[
  {
    "rendered_body": "<p>こちらは、<a href=\"https://qiita.com/advent-calendar/2020/lambda\">AWS LambdaとServerless Advent Calendar 2020</a> 25日目の記事になります！</p>\n\n<p>クリスマスの公開ですが季節感はないです<br>\n悪しからず🦵</p>\n\n<h1>\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n\n<p>AWS re:Invent 2020にて<a href=\"https://aws.amazon.com/jp/blogs/news/new-for-aws-lambda-container-image-support/\" rel=\"nofollow noopener\" target=\"_blank\">Lambdaのコンテナイメージのサポート</a>が発表されましたが、<br>\n我らが愛するServerless Frameworkでも早々に<a href=\"https://github.com/serverless/serverless/issues/8570\" rel=\"nofollow noopener\" target=\"_blank\">サポートが行われた</a>ので、お試しで使ってみました🎄</p>\n\n<p><code>serverless.yml</code> における定義については、<a href=\"https://www.serverless.com/blog/container-support-for-lambda\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a>のブログにある通り、 <code>&lt;account&gt;.dkr.ecr.&lt;region&gt;.amazonaws.com/&lt;repository&gt;@&lt;digest&gt;</code> の形式で指定する必要があるそうです<br>\nタグでなく、イメージのダイジェストで指定する必要があるとのことなので、 <code>sls deploy</code> 時にいい感じに注入する必要があります🥛</p>\n\n<h1>\n<span id=\"作ったもの\" class=\"fragment\"></span><a href=\"#%E4%BD%9C%E3%81%A3%E3%81%9F%E3%82%82%E3%81%AE\"><i class=\"fa fa-link\"></i></a>作ったもの</h1>\n\n<p>以下で公開しています🐙<br>\n<a href=\"https://github.com/yktakaha4/lambda-docker-serverless\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://github.com/yktakaha4/lambda-docker-serverless</a></p>\n\n<p>なるべく簡単に動作を試せるように、<br>\n環境構築からデプロイまでに必要なもろもろをGitHub Actionsに<a href=\"https://github.com/yktakaha4/lambda-docker-serverless/blob/master/.github/workflows/deployment.yml\" rel=\"nofollow noopener\" target=\"_blank\">まとめてます</a><br>\n変更すべき箇所はREADMEにまとめていますので併せてご覧ください</p>\n\n<h1>\n<span id=\"ポイント\" class=\"fragment\"></span><a href=\"#%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88\"><i class=\"fa fa-link\"></i></a>ポイント</h1>\n\n<p>Dockerファイルは、 <code>public.ecr.aws/lambda/xxxxx</code> から作成する必要があるそうです<br>\n<a href=\"https://github.com/aws/aws-lambda-base-images\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a>にてベースイメージが公開されています🐋</p>\n\n<p>あと、従来は <code>serverless.yml</code> にて関数のエントリーポイントを設定していたものと思いますが、Dockerfileにて設定しておく必要があるようです<br>\n個人的に、ECSのScheduled Taskで単一のコンテナに複数の関数を含めて、定義ごとに動かすものを変えるということをやっていたのですが、現状だと個別にビルドしておく必要がある感じなのでしょうか...？</p>\n\n<div class=\"code-frame\" data-lang=\"dockerfile\">\n<div class=\"code-lang\"><span class=\"bold\">Dockerfile</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">FROM</span><span class=\"s\"> public.ecr.aws/lambda/nodejs:12 AS builder</span>\n\n<span class=\"k\">WORKDIR</span><span class=\"s\"> /opt/build</span>\n\n<span class=\"k\">COPY</span><span class=\"s\"> . .</span>\n\n<span class=\"k\">RUN </span>npm ci\n\n<span class=\"k\">RUN </span>npm run build\n\n<span class=\"c\">##### ##### ##### #####</span>\n<span class=\"k\">FROM</span><span class=\"s\"> public.ecr.aws/lambda/nodejs:12 AS runner</span>\n\n<span class=\"k\">COPY</span><span class=\"s\"> --from=builder \\</span>\n  /opt/build/package*.json \\\n  ./\n\n<span class=\"k\">COPY</span><span class=\"s\"> --from=builder \\</span>\n  /opt/build/dist \\\n  ./dist\n\n<span class=\"k\">RUN </span>npm ci <span class=\"nt\">--only</span><span class=\"o\">=</span>production\n\n<span class=\"c\"># !!! ここポイント !!!</span>\n<span class=\"k\">CMD</span><span class=\"s\"> [\"dist/index.handler\"]</span>\n</code></pre></div>\n</div>\n\n<p>イメージのビルドとECRへのプッシュが済んだら、イメージのダイジェストを取得し、 <code>sls</code> コマンドに渡せるように環境変数に設定します<br>\n従来の <code>set-env</code> は現在無効となっているので、<a href=\"https://qiita.com/shonansurvivors/items/f256a0443d346f09448e\" id=\"reference-c1315afcf044466efc3e\">新しい書き方</a>でやってます</p>\n\n<p>あと、今回初めて知ったのですが、GitHub Actionsの環境にはデフォルトで <code>aws</code> コマンドがインストールされてるんですね...！</p>\n\n<div class=\"code-frame\" data-lang=\"yaml\">\n<div class=\"code-lang\"><span class=\"bold\">deployment.yml(抜粋)</span></div>\n<div class=\"highlight\"><pre><code><span class=\"na\">jobs</span><span class=\"pi\">:</span>\n  <span class=\"na\">deploy</span><span class=\"pi\">:</span>\n    <span class=\"na\">runs-on</span><span class=\"pi\">:</span> <span class=\"s\">ubuntu-18.04</span>\n    <span class=\"na\">timeout-minutes</span><span class=\"pi\">:</span> <span class=\"m\">300</span>\n\n    <span class=\"na\">steps</span><span class=\"pi\">:</span>\n      <span class=\"c1\"># 略</span>\n\n      <span class=\"c1\"># ECR</span>\n      <span class=\"pi\">-</span> <span class=\"na\">uses</span><span class=\"pi\">:</span> <span class=\"s\">aws-actions/amazon-ecr-login@v1</span>\n        <span class=\"na\">id</span><span class=\"pi\">:</span> <span class=\"s\">login-ecr</span>\n\n      <span class=\"pi\">-</span> <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"pi\">|</span>\n          <span class=\"s\">docker build -t $REGISTRY/$REPOSITORY:$TAG .</span>\n          <span class=\"s\">docker push $REGISTRY/$REPOSITORY:$TAG</span>\n\n          <span class=\"s\"># !!! ここポイント !!!</span>\n          <span class=\"s\">echo \"IMAGE_DIGEST=$(aws ecr describe-images --repository-name $REPOSITORY --image-ids imageTag=$TAG --output text --query 'imageDetails[0].imageDigest')\" &gt;&gt; $GITHUB_ENV</span>\n        <span class=\"na\">env</span><span class=\"pi\">:</span>\n          <span class=\"na\">REGISTRY</span><span class=\"pi\">:</span> <span class=\"s\">${{ steps.login-ecr.outputs.registry }}</span>\n          <span class=\"na\">REPOSITORY</span><span class=\"pi\">:</span> <span class=\"s\">lambda-docker-serverless-repos</span>\n          <span class=\"na\">TAG</span><span class=\"pi\">:</span> <span class=\"s\">latest</span>\n\n      <span class=\"c1\"># Serverless Framework</span>\n      <span class=\"pi\">-</span> <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"s\">npm ci</span>\n\n      <span class=\"pi\">-</span> <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"s\">npm run deploy</span>\n        <span class=\"na\">env</span><span class=\"pi\">:</span>\n          <span class=\"na\">AWS_ACCESS_KEY_ID</span><span class=\"pi\">:</span> <span class=\"s\">${{ secrets.AWS_ACCESS_KEY_ID }}</span>\n          <span class=\"na\">AWS_SECRET_ACCESS_KEY</span><span class=\"pi\">:</span> <span class=\"s\">${{ secrets.AWS_SECRET_ACCESS_KEY }}</span>\n          <span class=\"na\">AWS_DEFAULT_REGION</span><span class=\"pi\">:</span> <span class=\"s\">${{ secrets.AWS_DEFAULT_REGION }}</span>\n          <span class=\"na\">IMAGE_DIGEST</span><span class=\"pi\">:</span> <span class=\"s\">${{ env.IMAGE_DIGEST }}</span>\n</code></pre></div>\n</div>\n\n<p><code>serverless.yml</code> では、従来 <code>handler</code> を使っていたところを、 <code>image</code> でコンテナを指定します<br>\n<code>#{AWS::AccountId}</code> など、シャープで始まるものは <a href=\"https://www.serverless.com/plugins/serverless-pseudo-parameters\" rel=\"nofollow noopener\" target=\"_blank\">serverless-pseudo-parameters</a>の働きにより実値が埋め込まれます</p>\n\n<div class=\"code-frame\" data-lang=\"yml\">\n<div class=\"code-lang\"><span class=\"bold\">serverless.yml</span></div>\n<div class=\"highlight\"><pre><code><span class=\"na\">service</span><span class=\"pi\">:</span> <span class=\"s\">lambda-docker-serverless</span>\n\n<span class=\"na\">provider</span><span class=\"pi\">:</span>\n  <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">aws</span>\n  <span class=\"na\">stage</span><span class=\"pi\">:</span> <span class=\"s\">prod</span>\n  <span class=\"na\">region</span><span class=\"pi\">:</span> <span class=\"s\">${env:AWS_DEFAULT_REGION}</span>\n  <span class=\"na\">deploymentBucket</span><span class=\"pi\">:</span> <span class=\"s\">lambda-docker-serverless-deployment</span>\n\n<span class=\"na\">functions</span><span class=\"pi\">:</span>\n  <span class=\"na\">index</span><span class=\"pi\">:</span>\n    <span class=\"c1\"># !!! ここポイント !!!</span>\n    <span class=\"na\">image</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">#{AWS::AccountId}.dkr.ecr.#{AWS::Region}.amazonaws.com/lambda-docker-serverless-repos@${env:IMAGE_DIGEST}\"</span>\n    <span class=\"na\">events</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"na\">http</span><span class=\"pi\">:</span>\n          <span class=\"na\">path</span><span class=\"pi\">:</span> <span class=\"s\">index</span>\n          <span class=\"na\">method</span><span class=\"pi\">:</span> <span class=\"s\">post</span>\n          <span class=\"na\">cors</span><span class=\"pi\">:</span> <span class=\"no\">true</span>\n\n<span class=\"na\">plugins</span><span class=\"pi\">:</span>\n  <span class=\"pi\">-</span> <span class=\"s\">serverless-pseudo-parameters</span>\n</code></pre></div>\n</div>\n\n<p>今回は、こんなシンプルな関数を作ってみました<br>\nリクエストで受け取った名前を大文字にして、挨拶を返す処理になります👋</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">index.ts</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">APIGatewayProxyHandler</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">aws-lambda</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"dl\">\"</span><span class=\"s2\">source-map-support/register</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"kr\">interface</span> <span class=\"nx\">Request</span> <span class=\"p\">{</span>\n  <span class=\"nl\">name</span><span class=\"p\">?:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">handler</span><span class=\"p\">:</span> <span class=\"nx\">APIGatewayProxyHandler</span> <span class=\"o\">=</span> <span class=\"k\">async</span> <span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">try</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">name</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">body</span> <span class=\"o\">??</span> <span class=\"dl\">\"</span><span class=\"s2\">{}</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"nx\">Request</span><span class=\"p\">;</span>\n\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n      <span class=\"na\">statusCode</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"p\">,</span>\n      <span class=\"na\">body</span><span class=\"p\">:</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">({</span>\n        <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"s2\">`Hello, </span><span class=\"p\">${(</span><span class=\"nx\">name</span> <span class=\"o\">??</span> <span class=\"dl\">\"</span><span class=\"s2\">nanashi-san</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">toUpperCase</span><span class=\"p\">()}</span><span class=\"s2\"> !`</span><span class=\"p\">,</span>\n      <span class=\"p\">}),</span>\n    <span class=\"p\">};</span>\n  <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n      <span class=\"na\">statusCode</span><span class=\"p\">:</span> <span class=\"mi\">500</span><span class=\"p\">,</span>\n      <span class=\"na\">body</span><span class=\"p\">:</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">({</span>\n        <span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"nb\">String</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">),</span>\n      <span class=\"p\">}),</span>\n    <span class=\"p\">};</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div>\n</div>\n\n<p><code>https://xxxxxxxx.execute-api.ap-northeast-1.amazonaws.com/prod/index</code> にアクセスしてみます<br>\n<a href=\"https://insomnia.rest/\" rel=\"nofollow noopener\" target=\"_blank\">Insomnia</a>で実行してみると、ちゃんと動いてそうでいい感じです！</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/2d982fe092527fe455771a709acd3b6aa30fa838/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3130363235392f61346233643061332d373537342d656131612d333736312d3465333632613864313266342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2Fa4b3d0a3-7574-ea1a-3761-4e362a8d12f4.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=7b09ac2fae9cf50c3681940c4681cf7d\" alt=\"insomnia.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/a4b3d0a3-7574-ea1a-3761-4e362a8d12f4.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2Fa4b3d0a3-7574-ea1a-3761-4e362a8d12f4.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=11066bd857f5f9a10a21d5e463a86c1c 1x\" loading=\"lazy\"></a></p>\n\n<h1>\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n\n<p>当初は、関数内で<a href=\"https://pptr.dev/\" rel=\"nofollow noopener\" target=\"_blank\">Puppeteer</a>を動かそうと少し試していたのですが、<br>\n従来の一番安定したやり方だった<a href=\"https://github.com/alixaxel/chrome-aws-lambda\" rel=\"nofollow noopener\" target=\"_blank\">chrome-aws-lambda</a>を使うよりも楽に構築できると思いきや、ライブラリの不足やディレクトリの権限周りの問題で結構留意することが多かったので諦めました...<br>\n（ちなその残骸は<a href=\"https://github.com/yktakaha4/lambda-docker-puppeteer\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a>にあります⚰️）</p>\n\n<p>従来実行環境の微妙な差異に悩まされることもちょいちょいあったように思いますが、<br>\n今後コンテナベースの環境で開発ができるようになると利便性が上がるので、引き続き動向を追っていきたいですね🦌🦌🎅🎁</p>\n",
    "body": "こちらは、[AWS LambdaとServerless Advent Calendar 2020](https://qiita.com/advent-calendar/2020/lambda) 25日目の記事になります！\n\nクリスマスの公開ですが季節感はないです\n悪しからず🦵\n\n# はじめに\n\nAWS re:Invent 2020にて[Lambdaのコンテナイメージのサポート](https://aws.amazon.com/jp/blogs/news/new-for-aws-lambda-container-image-support/)が発表されましたが、\n我らが愛するServerless Frameworkでも早々に[サポートが行われた](https://github.com/serverless/serverless/issues/8570)ので、お試しで使ってみました🎄\n\n`serverless.yml` における定義については、[こちら](https://www.serverless.com/blog/container-support-for-lambda)のブログにある通り、 `<account>.dkr.ecr.<region>.amazonaws.com/<repository>@<digest>` の形式で指定する必要があるそうです\nタグでなく、イメージのダイジェストで指定する必要があるとのことなので、 `sls deploy` 時にいい感じに注入する必要があります🥛\n\n# 作ったもの\n\n以下で公開しています🐙\nhttps://github.com/yktakaha4/lambda-docker-serverless\n\nなるべく簡単に動作を試せるように、\n環境構築からデプロイまでに必要なもろもろをGitHub Actionsに[まとめてます](https://github.com/yktakaha4/lambda-docker-serverless/blob/master/.github/workflows/deployment.yml)\n変更すべき箇所はREADMEにまとめていますので併せてご覧ください\n\n# ポイント\n\nDockerファイルは、 `public.ecr.aws/lambda/xxxxx` から作成する必要があるそうです\n[こちら](https://github.com/aws/aws-lambda-base-images)にてベースイメージが公開されています🐋\n\nあと、従来は `serverless.yml` にて関数のエントリーポイントを設定していたものと思いますが、Dockerfileにて設定しておく必要があるようです\n個人的に、ECSのScheduled Taskで単一のコンテナに複数の関数を含めて、定義ごとに動かすものを変えるということをやっていたのですが、現状だと個別にビルドしておく必要がある感じなのでしょうか...？\n\n```dockerfile:Dockerfile\nFROM public.ecr.aws/lambda/nodejs:12 AS builder\n\nWORKDIR /opt/build\n\nCOPY . .\n\nRUN npm ci\n\nRUN npm run build\n\n##### ##### ##### #####\nFROM public.ecr.aws/lambda/nodejs:12 AS runner\n\nCOPY --from=builder \\\n  /opt/build/package*.json \\\n  ./\n\nCOPY --from=builder \\\n  /opt/build/dist \\\n  ./dist\n\nRUN npm ci --only=production\n\n# !!! ここポイント !!!\nCMD [\"dist/index.handler\"]\n```\n\nイメージのビルドとECRへのプッシュが済んだら、イメージのダイジェストを取得し、 `sls` コマンドに渡せるように環境変数に設定します\n従来の `set-env` は現在無効となっているので、[新しい書き方](https://qiita.com/shonansurvivors/items/f256a0443d346f09448e)でやってます\n\nあと、今回初めて知ったのですが、GitHub Actionsの環境にはデフォルトで `aws` コマンドがインストールされてるんですね...！\n\n```yaml:deployment.yml(抜粋)\njobs:\n  deploy:\n    runs-on: ubuntu-18.04\n    timeout-minutes: 300\n\n    steps:\n      # 略\n\n      # ECR\n      - uses: aws-actions/amazon-ecr-login@v1\n        id: login-ecr\n\n      - run: |\n          docker build -t $REGISTRY/$REPOSITORY:$TAG .\n          docker push $REGISTRY/$REPOSITORY:$TAG\n\n          # !!! ここポイント !!!\n          echo \"IMAGE_DIGEST=$(aws ecr describe-images --repository-name $REPOSITORY --image-ids imageTag=$TAG --output text --query 'imageDetails[0].imageDigest')\" >> $GITHUB_ENV\n        env:\n          REGISTRY: ${{ steps.login-ecr.outputs.registry }}\n          REPOSITORY: lambda-docker-serverless-repos\n          TAG: latest\n\n      # Serverless Framework\n      - run: npm ci\n\n      - run: npm run deploy\n        env:\n          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}\n          IMAGE_DIGEST: ${{ env.IMAGE_DIGEST }}\n```\n\n`serverless.yml` では、従来 `handler` を使っていたところを、 `image` でコンテナを指定します\n`#{AWS::AccountId}` など、シャープで始まるものは [serverless-pseudo-parameters]\n(https://www.serverless.com/plugins/serverless-pseudo-parameters)の働きにより実値が埋め込まれます\n\n```yml:serverless.yml\nservice: lambda-docker-serverless\n\nprovider:\n  name: aws\n  stage: prod\n  region: ${env:AWS_DEFAULT_REGION}\n  deploymentBucket: lambda-docker-serverless-deployment\n\nfunctions:\n  index:\n    # !!! ここポイント !!!\n    image: \"#{AWS::AccountId}.dkr.ecr.#{AWS::Region}.amazonaws.com/lambda-docker-serverless-repos@${env:IMAGE_DIGEST}\"\n    events:\n      - http:\n          path: index\n          method: post\n          cors: true\n\nplugins:\n  - serverless-pseudo-parameters\n```\n\n今回は、こんなシンプルな関数を作ってみました\nリクエストで受け取った名前を大文字にして、挨拶を返す処理になります👋\n\n```typescript:index.ts\nimport { APIGatewayProxyHandler } from \"aws-lambda\";\nimport \"source-map-support/register\";\n\ninterface Request {\n  name?: string;\n}\n\nexport const handler: APIGatewayProxyHandler = async (event) => {\n  try {\n    const { name } = JSON.parse(event.body ?? \"{}\") as Request;\n\n    return {\n      statusCode: 200,\n      body: JSON.stringify({\n        message: `Hello, ${(name ?? \"nanashi-san\").toUpperCase()} !`,\n      }),\n    };\n  } catch (e) {\n    return {\n      statusCode: 500,\n      body: JSON.stringify({\n        error: String(e),\n      }),\n    };\n  }\n};\n```\n\n`https://xxxxxxxx.execute-api.ap-northeast-1.amazonaws.com/prod/index` にアクセスしてみます\n[Insomnia](https://insomnia.rest/)で実行してみると、ちゃんと動いてそうでいい感じです！\n\n![insomnia.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/a4b3d0a3-7574-ea1a-3761-4e362a8d12f4.png)\n\n# おわりに\n\n当初は、関数内で[Puppeteer](https://pptr.dev/)を動かそうと少し試していたのですが、\n従来の一番安定したやり方だった[chrome-aws-lambda](https://github.com/alixaxel/chrome-aws-lambda)を使うよりも楽に構築できると思いきや、ライブラリの不足やディレクトリの権限周りの問題で結構留意することが多かったので諦めました...\n（ちなその残骸は[こちら](https://github.com/yktakaha4/lambda-docker-puppeteer)にあります⚰️）\n\n従来実行環境の微妙な差異に悩まされることもちょいちょいあったように思いますが、\n今後コンテナベースの環境で開発ができるようになると利便性が上がるので、引き続き動向を追っていきたいですね🦌🦌🎅🎁\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2020-12-18T03:25:49+09:00",
    "group": null,
    "id": "ead117870617f45c70d5",
    "likes_count": 3,
    "private": false,
    "reactions_count": 0,
    "stocks_count": 1,
    "tags": [
      {
        "name": "TypeScript",
        "versions": []
      },
      {
        "name": "Docker",
        "versions": []
      },
      {
        "name": "lambda",
        "versions": []
      },
      {
        "name": "ServerlessFramework",
        "versions": []
      },
      {
        "name": "GitHubActions",
        "versions": []
      }
    ],
    "title": "Serverless FrameworkでLambdaコンテナイメージを利用する",
    "updated_at": "2020-12-25T07:02:42+09:00",
    "url": "https://qiita.com/yktakaha4/items/ead117870617f45c70d5",
    "user": {
      "description": "",
      "facebook_id": "",
      "followees_count": 26,
      "followers_count": 22,
      "github_login_name": "yktakaha4",
      "id": "yktakaha4",
      "items_count": 27,
      "linkedin_id": "",
      "location": "",
      "name": "Yuuki Takahashi",
      "organization": "LAPRAS株式会社",
      "permanent_id": 106259,
      "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/profile-images/1600489516",
      "team_only": false,
      "twitter_screen_name": "yktakaha4",
      "website_url": "https://yktakaha4.github.io/"
    },
    "page_views_count": null,
    "team_membership": null,
    "organization_url_name": null,
    "slide": false
  },
  {
    "rendered_body": "<p>こちらは、<a href=\"https://qiita.com/advent-calendar/2020/typescript\">TypeScript Advent Calendar 2020</a> 14日目の記事になります！</p>\n\n<h1>\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n\n<p>最近、個人での開発にてTypeScriptを選定することが多くなり、その中で <a href=\"https://nestjs.com/\" rel=\"nofollow noopener\" target=\"_blank\">NestJS</a> を使ってバックエンドのAPIを構築する機会があったのですが、<br>\nフロントエンド（<a href=\"https://ja.nuxtjs.org/\" rel=\"nofollow noopener\" target=\"_blank\">Nuxt.js</a>で作ったSPA）との通信について、割といい感じに作れた気がしたので、備忘録として残したいと思います✍️</p>\n\n<h1>\n<span id=\"どんなものを作るか\" class=\"fragment\"></span><a href=\"#%E3%81%A9%E3%82%93%E3%81%AA%E3%82%82%E3%81%AE%E3%82%92%E4%BD%9C%E3%82%8B%E3%81%8B\"><i class=\"fa fa-link\"></i></a>どんなものを作るか</h1>\n\n<p>Webアプリのフロントエンドとバックエンド間での通信として、以下のことを実現したいという気持ちがありました</p>\n\n<ul>\n<li>\n<code>リクエスト/レスポンスに型付け</code> したい💪\n\n<ul>\n<li>フロント/バックエンド双方のTSで、InterfaceなりClassなりに値が詰められたDTOを扱いたい</li>\n<li>バックエンド側で定義した型をフロント側でも使いたい\n\n<ul>\n<li>I/Fの更新をフロント側からいい感じに取り込みたい</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>フロントのコード上で<code>APIであることを意識したくない</code> 🪨\n\n<ul>\n<li>パスとかHTTPメソッドとかは隠蔽して、TS上では関数呼び出しで使いたい</li>\n<li>ただし、Cookieによるセッション管理や環境毎にリクエスト先のドメインを分けるなど、必要があればHTTP上の挙動をカスタマイズしたい</li>\n</ul>\n</li>\n<li>\n<code>バリデーションや業務エラーを返却</code> したい🐟\n\n<ul>\n<li>項目毎のバリデーションをしたい\n\n<ul>\n<li>フロントでもよしなにやるが、特にバックエンド側で期待しないリクエストを受けたらエラーとしたい</li>\n</ul>\n</li>\n<li>業務エラーをいい感じに返却したい\n\n<ul>\n<li>IDに紐づくオブジェクトがDBから取れなかった...とか</li>\n<li>1回のリクエストに対してN個の業務エラーを返したい\n\n<ul>\n<li>返された業務エラーをフロント側で識別し、処理（エラー表示、無視など）をおこないたい</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>ネットワークエラー等は例外でコントロールしたい</li>\n</ul>\n</li>\n</ul>\n\n<p>上記の実現にあたりNestJSの公式ドキュメントをみていくと、 <a href=\"https://docs.nestjs.com/openapi/introduction\" rel=\"nofollow noopener\" target=\"_blank\">OpenAPI</a> の章の記述が役立ちそうですが、<br>\nやってくれるのはOpenAPIの定義を生成してくれるところまでなので、そこからAPIクライアントの作成と、フロントエンド側からの読み込みをどのように行うか検討しました</p>\n\n<p>なお、本アドベントカレンダーでも型安全な通信の方法として <a href=\"https://qiita.com/mikan3rd/items/3f46b1edcb79ad63deef\" id=\"reference-e0bccdf12305ce2e49db\">GraphQLを使ったパターン</a> を書かれている方がいますので、併せてご覧いただくと比較ができるかもしれません<br>\n（私は、開発時にGraphQLに対する知見がなかったのと、作りたいものに対してオーバースペック気味に感じたため今回は採用を見送りました）</p>\n\n<h1>\n<span id=\"作ったもの\" class=\"fragment\"></span><a href=\"#%E4%BD%9C%E3%81%A3%E3%81%9F%E3%82%82%E3%81%AE\"><i class=\"fa fa-link\"></i></a>作ったもの</h1>\n\n<p>ソースコードは以下になります🍔<br>\nサンプルになりそうな部分のみ抜き出しています<br>\n<a href=\"https://github.com/yktakaha4/nestjs-typed-client\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://github.com/yktakaha4/nestjs-typed-client</a></p>\n\n<p><code>/backend</code> にNestJSで作ったバックエンド、 <code>/frontend</code> にReactで作ったフロントエンドのサンプルアプリケーションを格納しています<br>\n実際に作ったものでは別々のリポジトリにて管理していますが、今回は簡便のためひとつにまとめました</p>\n\n<p>クライアントの生成からフロントエンドの取り込みを図にしたものは以下になります🦑<br>\nグレーの点線がソースコードの関連、オレンジの点線が実際の通信の関連のイメージです</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/463178918345172373a0f3c783bacd2ce16759a4/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3130363235392f66363764363830392d303465352d373332332d333136372d3635643234613337383764332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2Ff67d6809-04e5-7323-3167-65d24a3787d3.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=98ac88464063a5ce5e32041410fa91fb\" alt=\"archtecture.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/f67d6809-04e5-7323-3167-65d24a3787d3.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2Ff67d6809-04e5-7323-3167-65d24a3787d3.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=c2774507eccef55585b2cfe284b2c2f6 1x\" loading=\"lazy\"></a></p>\n\n<p>流れはこんな感じになります<br>\nなお、今回は 2.で生成するクライアントに <code>typescript-axios</code> を選択しましたが、 <a href=\"https://github.com/OpenAPITools/openapi-generator/tree/master/docs/generators#client-generators\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a> に記載されているものから任意に選択可能です</p>\n\n<ol>\n<li>NestJSにて <a href=\"https://github.com/nestjs/swagger\" rel=\"nofollow noopener\" target=\"_blank\">@nestjs/swagger</a> にてアノテートしたDTOとエンドポイントを定義し、OpenAPIのyamlファイルを生成する</li>\n<li>\n<a href=\"https://github.com/OpenAPITools/openapi-generator-cli\" rel=\"nofollow noopener\" target=\"_blank\">@openapitools/openapi-generator-cli</a> にて、1.で作成したyamlファイルからTypeScriptのAPIクライアントを生成する</li>\n<li>GitHub Actionsを用いて、tagがpushされた（≒Releaseを作成した）時、APIクライアントをtscにてビルドし <code>GitHub Packages Registry</code> に登録する</li>\n<li>フロントエンドから <code>npm install @xxxxx/sample-backend-client</code> の形で読み込んで利用する</li>\n</ol>\n\n<h2>\n<span id=\"アノテートしたdtoとエンドポイントの定義\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%8E%E3%83%86%E3%83%BC%E3%83%88%E3%81%97%E3%81%9Fdto%E3%81%A8%E3%82%A8%E3%83%B3%E3%83%89%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88%E3%81%AE%E5%AE%9A%E7%BE%A9\"><i class=\"fa fa-link\"></i></a>アノテートしたDTOとエンドポイントの定義</h2>\n\n<p>バックエンド側で以下のようにリクエスト、レスポンスを定義します<br>\n長くなるので一部のみ抜粋しますが、エラークラスは<a href=\"https://github.com/yktakaha4/nestjs-typed-client/blob/master/backend/src/app.error.ts\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a>のように定義しています</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">エラークラスの定義（バックエンド）</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">EmptyNameError</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// 空の名前を示すエラーオブジェクト</span>\n\n  <span class=\"p\">@</span><span class=\"nd\">ApiProperty</span><span class=\"p\">({</span> <span class=\"na\">enum</span><span class=\"p\">:</span> <span class=\"nx\">EmptyNameErrorType</span> <span class=\"p\">})</span>\n  <span class=\"k\">readonly</span> <span class=\"kd\">type</span> <span class=\"o\">=</span> <span class=\"nx\">EmptyNameErrorType</span><span class=\"p\">.</span><span class=\"nx\">Value</span><span class=\"p\">;</span>\n\n  <span class=\"p\">@</span><span class=\"nd\">ApiProperty</span><span class=\"p\">({</span> <span class=\"na\">enum</span><span class=\"p\">:</span> <span class=\"nx\">GreetParameter</span> <span class=\"p\">})</span>\n  <span class=\"k\">readonly</span> <span class=\"nx\">parameter</span><span class=\"p\">:</span> <span class=\"nx\">GreetParameter</span><span class=\"p\">;</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"nx\">parameter</span><span class=\"p\">:</span> <span class=\"nx\">GreetParameter</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">parameter</span> <span class=\"o\">=</span> <span class=\"nx\">parameter</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">VulgarNameError</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// 下品な名前を示すエラーオブジェクト</span>\n\n  <span class=\"p\">@</span><span class=\"nd\">ApiProperty</span><span class=\"p\">({</span> <span class=\"na\">enum</span><span class=\"p\">:</span> <span class=\"nx\">VulgarNameErrorType</span> <span class=\"p\">})</span>\n  <span class=\"k\">readonly</span> <span class=\"kd\">type</span> <span class=\"o\">=</span> <span class=\"nx\">VulgarNameErrorType</span><span class=\"p\">.</span><span class=\"nx\">Value</span><span class=\"p\">;</span>\n\n  <span class=\"p\">@</span><span class=\"nd\">ApiProperty</span><span class=\"p\">({</span> <span class=\"na\">enum</span><span class=\"p\">:</span> <span class=\"nx\">GreetParameter</span> <span class=\"p\">})</span>\n  <span class=\"k\">readonly</span> <span class=\"nx\">parameter</span><span class=\"p\">:</span> <span class=\"nx\">GreetParameter</span><span class=\"p\">;</span>\n\n  <span class=\"p\">@</span><span class=\"nd\">ApiProperty</span><span class=\"p\">()</span>\n  <span class=\"k\">readonly</span> <span class=\"nx\">vulgarWord</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"nx\">parameter</span><span class=\"p\">:</span> <span class=\"nx\">GreetParameter</span><span class=\"p\">,</span> <span class=\"nx\">vulgarWord</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">parameter</span> <span class=\"o\">=</span> <span class=\"nx\">parameter</span><span class=\"p\">;</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">vulgarWord</span> <span class=\"o\">=</span> <span class=\"nx\">vulgarWord</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">type</span> <span class=\"nx\">GreetErrors</span> <span class=\"o\">=</span> <span class=\"nb\">Array</span><span class=\"o\">&lt;</span><span class=\"nx\">EmptyNameError</span> <span class=\"o\">|</span> <span class=\"nx\">VulgarNameError</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n</code></pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">クラスへのアノテーション（バックエンド）</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">GreetRequest</span> <span class=\"p\">{</span>\n  <span class=\"p\">@</span><span class=\"nd\">ApiProperty</span><span class=\"p\">()</span>\n  <span class=\"k\">readonly</span> <span class=\"nx\">lastName</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n\n  <span class=\"p\">@</span><span class=\"nd\">ApiProperty</span><span class=\"p\">()</span>\n  <span class=\"k\">readonly</span> <span class=\"nx\">firstName</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"nx\">lastName</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">,</span> <span class=\"nx\">firstName</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">lastName</span> <span class=\"o\">=</span> <span class=\"nx\">lastName</span><span class=\"p\">;</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">firstName</span> <span class=\"o\">=</span> <span class=\"nx\">firstName</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">@</span><span class=\"nd\">ApiExtraModels</span><span class=\"p\">(</span><span class=\"nx\">EmptyNameError</span><span class=\"p\">,</span> <span class=\"nx\">VulgarNameError</span><span class=\"p\">)</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">GreetResponse</span> <span class=\"p\">{</span>\n  <span class=\"p\">@</span><span class=\"nd\">ApiProperty</span><span class=\"p\">({</span> <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nb\">String</span><span class=\"p\">,</span> <span class=\"na\">nullable</span><span class=\"p\">:</span> <span class=\"kc\">true</span> <span class=\"p\">})</span>\n  <span class=\"k\">readonly</span> <span class=\"nx\">message</span><span class=\"p\">:</span> <span class=\"kr\">string</span> <span class=\"o\">|</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n\n  <span class=\"p\">@</span><span class=\"nd\">ApiProperty</span><span class=\"p\">({</span>\n    <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">array</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n    <span class=\"na\">items</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"na\">oneOf</span><span class=\"p\">:</span> <span class=\"nx\">greetErrorSchemaPaths</span> <span class=\"p\">},</span>\n  <span class=\"p\">})</span>\n  <span class=\"k\">readonly</span> <span class=\"nx\">errors</span><span class=\"p\">:</span> <span class=\"nx\">GreetErrors</span><span class=\"p\">;</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">:</span> <span class=\"kr\">string</span> <span class=\"o\">|</span> <span class=\"kc\">null</span><span class=\"p\">,</span> <span class=\"nx\">errors</span><span class=\"p\">:</span> <span class=\"nx\">GreetErrors</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">message</span> <span class=\"o\">=</span> <span class=\"nx\">message</span><span class=\"p\">;</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">errors</span> <span class=\"o\">=</span> <span class=\"nx\">errors</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n</div>\n\n<p>エンドポイントのサンプルです<br>\n<code>@ApiOkResponse</code> によってアノテートしたDTOを指定します。 <code>@ApiOperation</code> でクライアントに生成されるメソッド名を指定できます</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">エンドポイント（バックエンド）</span></div>\n<div class=\"highlight\"><pre><code><span class=\"p\">@</span><span class=\"nd\">ApiTags</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">App</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n<span class=\"p\">@</span><span class=\"nd\">Controller</span><span class=\"p\">()</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">AppController</span> <span class=\"p\">{</span>\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"k\">private</span> <span class=\"k\">readonly</span> <span class=\"nx\">appService</span><span class=\"p\">:</span> <span class=\"nx\">AppService</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n\n  <span class=\"p\">@</span><span class=\"nd\">ApiOkResponse</span><span class=\"p\">({</span> <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nx\">GreetResponse</span> <span class=\"p\">})</span>\n  <span class=\"p\">@</span><span class=\"nd\">ApiOperation</span><span class=\"p\">({</span> <span class=\"na\">operationId</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">greet</span><span class=\"dl\">'</span> <span class=\"p\">})</span>\n  <span class=\"p\">@</span><span class=\"nd\">Post</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">greet</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n  <span class=\"p\">@</span><span class=\"nd\">HttpCode</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">)</span>\n  <span class=\"nx\">greet</span><span class=\"p\">(@</span><span class=\"nd\">Body</span><span class=\"p\">()</span> <span class=\"nx\">request</span><span class=\"p\">:</span> <span class=\"nx\">GreetRequest</span><span class=\"p\">):</span> <span class=\"nx\">GreetResponse</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 入力チェック</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">errors</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">appService</span><span class=\"p\">.</span><span class=\"nx\">validateGreetRequest</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">);</span>\n\n    <span class=\"kd\">let</span> <span class=\"nx\">message</span><span class=\"p\">:</span> <span class=\"kr\">string</span> <span class=\"o\">|</span> <span class=\"kc\">null</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">errors</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">===</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// エラーなしの場合のみメッセージを取得</span>\n      <span class=\"nx\">message</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">appService</span><span class=\"p\">.</span><span class=\"nx\">getGreetingMessage</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nx\">GreetResponse</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">,</span> <span class=\"nx\">errors</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n</div>\n\n<p>NestJSのコードからyamlファイルを生成する方法は<a href=\"https://qiita.com/yktakaha4/items/97ea169ed97dbcdd25fb\" id=\"reference-2e250818221dc4026861\">こちら</a> でも説明しています<br>\nコマンドは以下</p>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">cd</span> ./backend\n<span class=\"gp\">$</span><span class=\"w\"> </span>npm run openapi:export\n</code></pre></div></div>\n\n<h2>\n<span id=\"yamlファイルからクライアント生成\" class=\"fragment\"></span><a href=\"#yaml%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%8B%E3%82%89%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E7%94%9F%E6%88%90\"><i class=\"fa fa-link\"></i></a>yamlファイルからクライアント生成</h2>\n\n<p>バックエンドのコードとパッケージを分けるため、 <code>./backend/client</code> 配下にnpmパッケージ用の一式を格納しています</p>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">cd</span> ./backend/client\n<span class=\"gp\">$</span><span class=\"w\"> </span>npm ci\n<span class=\"gp\">$</span><span class=\"w\"> </span>npm run generate\n<span class=\"gp\">$</span><span class=\"w\"> </span>npm run build\n<span class=\"go\">\n</span><span class=\"gp\">#</span><span class=\"w\"> </span>run generate時に実行されるコマンド\n<span class=\"gp\">#</span><span class=\"w\"> </span>オプション等は以下参照\n<span class=\"gp\">#</span><span class=\"w\"> </span>https://github.com/OpenAPITools/openapi-generator/blob/master/docs/generators/typescript-axios.md\n<span class=\"gp\">#</span><span class=\"w\"> </span><span class=\"nv\">JAVA_OPTS</span><span class=\"o\">=</span><span class=\"s2\">\"-Dlog.level=warn\"</span> openapi-generator generate <span class=\"nt\">-i</span> sample-backend.yml <span class=\"nt\">-o</span> lib/ <span class=\"nt\">-g</span> typescript-axios <span class=\"nt\">--api-package</span><span class=\"o\">=</span>api <span class=\"nt\">--model-package</span><span class=\"o\">=</span>models <span class=\"nt\">--additional-properties</span><span class=\"o\">=</span><span class=\"nv\">supportsES6</span><span class=\"o\">=</span><span class=\"nb\">true</span>,withSeparateModelsAndApi<span class=\"o\">=</span><span class=\"nb\">true</span>\n</code></pre></div></div>\n\n<h2>\n<span id=\"npmパッケージ公開\" class=\"fragment\"></span><a href=\"#npm%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E5%85%AC%E9%96%8B\"><i class=\"fa fa-link\"></i></a>npmパッケージ公開</h2>\n\n<p>GitHub Actionsにて、 <code>client.*</code> という形式のタグが打たれたら以下ワークフローを実行するようにします<br>\nnpm publish時に、生成したパッケージのバージョン名を一意にする必要があるので、今回は<a href=\"https://github.com/yktakaha4/nestjs-typed-client/blob/master/backend/client/set-package-version.js\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a>のスクリプトを使って実現しています<br>\n今回は、クライアント側で読み込んでいるバージョンの一意性を保証できれば十分だったので、セマンティックバージョニングは考慮せずに、 <code>0.0.1-${タグ名}</code> の形式で公開するようにしました</p>\n\n<p>ちなみに、トークンについては、GitHub Actionsがデフォルトで指定してくれるもので問題ありません<br>\n（プライベートリポジトリの場合、パッケージの読み込みを行う側でパッケージの読み込み権限のあるアクセストークンの発行が必要になります）</p>\n\n<div class=\"code-frame\" data-lang=\"yaml\">\n<div class=\"code-lang\"><span class=\"bold\">publish-client.yml</span></div>\n<div class=\"highlight\"><pre><code><span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Publish client</span>\n\n<span class=\"na\">on</span><span class=\"pi\">:</span>\n  <span class=\"na\">push</span><span class=\"pi\">:</span>\n    <span class=\"na\">tags</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"s\">client.*</span>\n\n<span class=\"na\">jobs</span><span class=\"pi\">:</span>\n  <span class=\"na\">publish</span><span class=\"pi\">:</span>\n    <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Publish client</span>\n    <span class=\"na\">runs-on</span><span class=\"pi\">:</span> <span class=\"s\">ubuntu-18.04</span>\n    <span class=\"na\">timeout-minutes</span><span class=\"pi\">:</span> <span class=\"m\">3</span>\n    <span class=\"na\">steps</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"na\">uses</span><span class=\"pi\">:</span> <span class=\"s\">actions/checkout@v2</span>\n\n      <span class=\"pi\">-</span> <span class=\"na\">uses</span><span class=\"pi\">:</span> <span class=\"s\">actions/setup-node@v1</span>\n        <span class=\"na\">with</span><span class=\"pi\">:</span>\n          <span class=\"na\">node-version</span><span class=\"pi\">:</span> <span class=\"s\">12.x</span>\n          <span class=\"na\">registry-url</span><span class=\"pi\">:</span> <span class=\"s\">https://npm.pkg.github.com/</span>\n          <span class=\"na\">scope</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">@yktakaha4\"</span>\n\n      <span class=\"pi\">-</span> <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"s\">npm ci</span>\n        <span class=\"na\">working-directory</span><span class=\"pi\">:</span> <span class=\"s\">./backend</span>\n\n      <span class=\"pi\">-</span> <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"s\">npm run openapi:export</span>\n        <span class=\"na\">working-directory</span><span class=\"pi\">:</span> <span class=\"s\">./backend</span>\n\n      <span class=\"pi\">-</span> <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"s\">npm ci</span>\n        <span class=\"na\">working-directory</span><span class=\"pi\">:</span> <span class=\"s\">./backend/client</span>\n\n      <span class=\"pi\">-</span> <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"s\">npm run version $GH_REF</span>\n        <span class=\"na\">working-directory</span><span class=\"pi\">:</span> <span class=\"s\">./backend/client</span>\n        <span class=\"na\">env</span><span class=\"pi\">:</span>\n          <span class=\"na\">GH_REF</span><span class=\"pi\">:</span> <span class=\"s\">${{ github.ref }}</span>\n\n      <span class=\"pi\">-</span> <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"s\">npm publish</span>\n        <span class=\"na\">working-directory</span><span class=\"pi\">:</span> <span class=\"s\">./backend/client</span>\n        <span class=\"na\">env</span><span class=\"pi\">:</span>\n          <span class=\"na\">NODE_AUTH_TOKEN</span><span class=\"pi\">:</span> <span class=\"s\">${{ secrets.GITHUB_TOKEN }}</span>\n</code></pre></div>\n</div>\n\n<p>上記に基づいて生成されたnpmパッケージは、<a href=\"https://github.com/yktakaha4/nestjs-typed-client/packages/\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a> にて公開されます</p>\n\n<h1>\n<span id=\"demo\" class=\"fragment\"></span><a href=\"#demo\"><i class=\"fa fa-link\"></i></a>Demo</h1>\n\n<p>以下の方法で起動できます<br>\nバックエンドは <code>localhost:3100</code>、フロントエンドは <code>localhost:3000</code> で起動します</p>\n\n<div class=\"code-frame\" data-lang=\"terminal\">\n<div class=\"code-lang\"><span class=\"bold\">ターミナル</span></div>\n<div class=\"highlight\"><pre><code><span class=\"gp\">#</span><span class=\"w\"> </span>バックエンドを起動\n<span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">cd</span> ./backend\n<span class=\"gp\">$</span><span class=\"w\"> </span>npm ci\n<span class=\"gp\">$</span><span class=\"w\"> </span>npm run start\n<span class=\"go\">\n</span><span class=\"gp\">#</span><span class=\"w\"> </span>フロントエンドを起動（別ターミナルにて）\n<span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">cd</span> ./frontend\n<span class=\"gp\">$</span><span class=\"w\"> </span>yarn <span class=\"nb\">install</span>\n<span class=\"gp\">$</span><span class=\"w\"> </span>yarn start\n</code></pre></div>\n</div>\n\n<p>テキストボックスに苗字、名前を入力して <code>Greet</code> ボタンを押すと、挨拶が返却されます👋</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/25ce45631d4a231314337468e9284491df99d831/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3130363235392f30333866313130352d386137352d656435622d613962302d3830626539376462333438322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2F038f1105-8a75-ed5b-a9b0-80be97db3482.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=92ba519d5a883f07c7d3c8bb36e04233\" alt=\"名前を入力\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/038f1105-8a75-ed5b-a9b0-80be97db3482.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2F038f1105-8a75-ed5b-a9b0-80be97db3482.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=160b622754d616fa77b11a901ebaac13 1x\" loading=\"lazy\"></a></p>\n\n<p>リクエストとレスポンスはそれぞれこんな感じのものが送受されます</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">Request</span></div>\n<div class=\"highlight\"><pre><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"lastName\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"yuuki\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"firstName\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"takahashi\"</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">Response</span></div>\n<div class=\"highlight\"><pre><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"message\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Hello, Yuuki TAKAHASHI !\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"errors\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div>\n</div>\n\n<p>フロントエンドからのAPI呼び出しはこんな感じになります</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">呼び出しサンプル（フロントエンド）</span></div>\n<div class=\"highlight\"><pre><code><span class=\"c1\">// AppApiクラスは npmパッケージからインポートしたもの（自動生成）</span>\n<span class=\"kd\">const</span> <span class=\"nx\">api</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">AppApi</span><span class=\"p\">();</span>\n\n<span class=\"nx\">api</span><span class=\"p\">.</span><span class=\"nx\">greet</span><span class=\"p\">(</span><span class=\"nx\">greetingRequest</span><span class=\"p\">).</span><span class=\"nx\">then</span><span class=\"p\">((</span><span class=\"nx\">axiosResponse</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">dispatchResponse</span><span class=\"p\">(</span><span class=\"nx\">axiosResponse</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">);</span>\n<span class=\"p\">}).</span><span class=\"k\">catch</span><span class=\"p\">((</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">dispatch</span><span class=\"p\">({</span> <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">UPDATE_MESSAGE</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"na\">value</span><span class=\"p\">:</span> <span class=\"nb\">String</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n</div>\n\n<p>インテリセンスがちゃんと効いてます</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/0a7ffbd907f3a954d78c8472e86eaa8cf08c51b4/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3130363235392f33373936313532332d623965332d666334362d336230652d3761393666626262656566612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2F37961523-b9e3-fc46-3b0e-7a96fbbbeefa.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=3eb3c344dd9a1aa6215a211754bcc60f\" alt=\"インテリセンス\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/37961523-b9e3-fc46-3b0e-7a96fbbbeefa.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2F37961523-b9e3-fc46-3b0e-7a96fbbbeefa.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=52b16a31ec534d6cad58c1279483fb55 1x\" loading=\"lazy\"></a></p>\n\n<p>入力エラー（値が空 or 下品な言葉が入力されている）をサーバサイドで検証し、エラーの場合はフロントエンドにてメッセージを編集します</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/ada15f54c975345b758ec520b421b0a3e09c5c64/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3130363235392f62356361356334392d333261312d383238332d393061362d3838306232666363623663312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2Fb5ca5c49-32a1-8283-90a6-880b2fccb6c1.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=7b598a2840db236d0bf05128d0f64042\" alt=\"入力エラー\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/b5ca5c49-32a1-8283-90a6-880b2fccb6c1.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2Fb5ca5c49-32a1-8283-90a6-880b2fccb6c1.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=3f650f68a67cca8473e75ecb1fc2cdd8 1x\" loading=\"lazy\"></a></p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">Response</span></div>\n<div class=\"highlight\"><pre><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"message\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">null</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"errors\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n    </span><span class=\"p\">{</span><span class=\"w\">\n      </span><span class=\"nl\">\"type\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"EmptyNameError\"</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"parameter\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"LastName\"</span><span class=\"w\">\n    </span><span class=\"p\">},</span><span class=\"w\">\n    </span><span class=\"p\">{</span><span class=\"w\">\n      </span><span class=\"nl\">\"type\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"VulgarNameError\"</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"parameter\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"FirstName\"</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"vulgarWord\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"shit\"</span><span class=\"w\">\n    </span><span class=\"p\">}</span><span class=\"w\">\n  </span><span class=\"p\">]</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div>\n</div>\n\n<p>エラーメッセージ編集のサンプルは以下になります<br>\nこのコードだけではわかりづらいですが、 <code>type</code> も <code>parameter</code> も型付けされており、また <a href=\"https://typescript-jp.gitbook.io/deep-dive/type-system/typeguard\" rel=\"nofollow noopener\" target=\"_blank\">型ガード</a> の効果により <code>VulgarNameError</code> の判定文の中では <code>vulgarWord</code> が参照できています🌿</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">エラーメッセージ設定サンプル（フロントエンド）</span></div>\n<div class=\"highlight\"><pre><code><span class=\"kd\">const</span> <span class=\"nx\">dispatchResponse</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">response</span><span class=\"p\">:</span> <span class=\"nx\">GreetResponse</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// メッセージが返却された場合はそれを設定</span>\n    <span class=\"nx\">dispatch</span><span class=\"p\">({</span> <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">UPDATE_MESSAGE</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"na\">value</span><span class=\"p\">:</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">message</span> <span class=\"p\">});</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// されなかった場合は、エラーオブジェクトに合わせて設定</span>\n    <span class=\"kd\">const</span> <span class=\"na\">messages</span><span class=\"p\">:</span> <span class=\"nb\">Array</span><span class=\"o\">&lt;</span><span class=\"kr\">string</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">const</span> <span class=\"nx\">error</span> <span class=\"k\">of</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">errors</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"kd\">type</span> <span class=\"o\">===</span> <span class=\"dl\">'</span><span class=\"s1\">EmptyNameError</span><span class=\"dl\">'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">parameter</span> <span class=\"o\">===</span> <span class=\"dl\">'</span><span class=\"s1\">LastName</span><span class=\"dl\">'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"nx\">messages</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">・名前は空にできません</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">parameter</span> <span class=\"o\">===</span> <span class=\"dl\">'</span><span class=\"s1\">FirstName</span><span class=\"dl\">'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"nx\">messages</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">・苗字は空にできません</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"kd\">type</span> <span class=\"o\">===</span> <span class=\"dl\">'</span><span class=\"s1\">VulgarNameError</span><span class=\"dl\">'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">parameter</span> <span class=\"o\">===</span> <span class=\"dl\">'</span><span class=\"s1\">LastName</span><span class=\"dl\">'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"nx\">messages</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"s2\">`・名前に </span><span class=\"p\">${</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">vulgarWord</span><span class=\"p\">}</span><span class=\"s2\"> は設定できません`</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">parameter</span> <span class=\"o\">===</span> <span class=\"dl\">'</span><span class=\"s1\">FirstName</span><span class=\"dl\">'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"nx\">messages</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"s2\">`・苗字に </span><span class=\"p\">${</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">vulgarWord</span><span class=\"p\">}</span><span class=\"s2\"> は設定できません`</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">dispatch</span><span class=\"p\">({</span> <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">UPDATE_MESSAGE</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"na\">value</span><span class=\"p\">:</span> <span class=\"nx\">messages</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"dl\">''</span><span class=\"p\">)</span> <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div>\n</div>\n\n<p>一つ残念なのは、現時点でのOpenAPIv3ではパラメータ上でリテラル値を表現できないため、（<a href=\"https://swagger.io/docs/specification/describing-parameters/\" rel=\"nofollow noopener\" target=\"_blank\">こちらのConstant Parametersの項のように、単一のメンバを持つEnumとして定義する必要あり</a>）<br>\n上記の型ガードを実現するにあたり、 <code>type</code> を <code>'EmptyNameError' | 'VulgarNameError'</code> のようなstringのUnion型では定義できず、自動生成されるコードは <code>EmptyNameErrorTypeEnum | VulgarNameErrorTypeEnum</code> のような形になるため、インテリセンスを効かせることができずにいます<br>\n値の検証は正しくできるため、これでも問題はないですが...<br>\n（私の理解不足なだけで、いいやり方ができる気はものすごくします🙃）</p>\n\n<p>あと、今回は本旨から外れるため割愛していますが、項目毎のバリデーションについては<a href=\"https://docs.nestjs.com/techniques/validation#validation\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a>を使うといい感じにできるので、併せて導入をオススメします</p>\n\n<h1>\n<span id=\"まとめ\" class=\"fragment\"></span><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"><i class=\"fa fa-link\"></i></a>まとめ</h1>\n\n<p>ひとついい実装パターンが作れた気がするので、他のやり方（先ほど説明したGraphQLや、<a href=\"https://github.com/frouriojs/frourio\" rel=\"nofollow noopener\" target=\"_blank\">frourio</a>なんかもそうなんでしょうか？）についても挑戦していきたいと思います！</p>\n",
    "body": "こちらは、[TypeScript Advent Calendar 2020](https://qiita.com/advent-calendar/2020/typescript) 14日目の記事になります！\n\n# はじめに\n\n最近、個人での開発にてTypeScriptを選定することが多くなり、その中で [NestJS](https://nestjs.com/) を使ってバックエンドのAPIを構築する機会があったのですが、\nフロントエンド（[Nuxt.js](https://ja.nuxtjs.org/)で作ったSPA）との通信について、割といい感じに作れた気がしたので、備忘録として残したいと思います✍️\n\n# どんなものを作るか\n\nWebアプリのフロントエンドとバックエンド間での通信として、以下のことを実現したいという気持ちがありました\n\n- `リクエスト/レスポンスに型付け` したい💪\n    - フロント/バックエンド双方のTSで、InterfaceなりClassなりに値が詰められたDTOを扱いたい\n    - バックエンド側で定義した型をフロント側でも使いたい\n        - I/Fの更新をフロント側からいい感じに取り込みたい\n- フロントのコード上で`APIであることを意識したくない` 🪨\n    - パスとかHTTPメソッドとかは隠蔽して、TS上では関数呼び出しで使いたい\n    - ただし、Cookieによるセッション管理や環境毎にリクエスト先のドメインを分けるなど、必要があればHTTP上の挙動をカスタマイズしたい\n- `バリデーションや業務エラーを返却` したい🐟\n    - 項目毎のバリデーションをしたい\n        - フロントでもよしなにやるが、特にバックエンド側で期待しないリクエストを受けたらエラーとしたい\n    - 業務エラーをいい感じに返却したい\n        - IDに紐づくオブジェクトがDBから取れなかった...とか\n        - 1回のリクエストに対してN個の業務エラーを返したい\n            - 返された業務エラーをフロント側で識別し、処理（エラー表示、無視など）をおこないたい\n    - ネットワークエラー等は例外でコントロールしたい\n\n上記の実現にあたりNestJSの公式ドキュメントをみていくと、 [OpenAPI](https://docs.nestjs.com/openapi/introduction) の章の記述が役立ちそうですが、\nやってくれるのはOpenAPIの定義を生成してくれるところまでなので、そこからAPIクライアントの作成と、フロントエンド側からの読み込みをどのように行うか検討しました\n\nなお、本アドベントカレンダーでも型安全な通信の方法として [GraphQLを使ったパターン](https://qiita.com/mikan3rd/items/3f46b1edcb79ad63deef) を書かれている方がいますので、併せてご覧いただくと比較ができるかもしれません\n（私は、開発時にGraphQLに対する知見がなかったのと、作りたいものに対してオーバースペック気味に感じたため今回は採用を見送りました）\n\n# 作ったもの\n\nソースコードは以下になります🍔\nサンプルになりそうな部分のみ抜き出しています\nhttps://github.com/yktakaha4/nestjs-typed-client\n\n`/backend` にNestJSで作ったバックエンド、 `/frontend` にReactで作ったフロントエンドのサンプルアプリケーションを格納しています\n実際に作ったものでは別々のリポジトリにて管理していますが、今回は簡便のためひとつにまとめました\n\nクライアントの生成からフロントエンドの取り込みを図にしたものは以下になります🦑\nグレーの点線がソースコードの関連、オレンジの点線が実際の通信の関連のイメージです\n\n![archtecture.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/f67d6809-04e5-7323-3167-65d24a3787d3.png)\n\n流れはこんな感じになります\nなお、今回は 2.で生成するクライアントに `typescript-axios` を選択しましたが、 [こちら](https://github.com/OpenAPITools/openapi-generator/tree/master/docs/generators#client-generators) に記載されているものから任意に選択可能です\n\n1. NestJSにて [@nestjs/swagger](https://github.com/nestjs/swagger) にてアノテートしたDTOとエンドポイントを定義し、OpenAPIのyamlファイルを生成する\n2. [@openapitools/openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) にて、1.で作成したyamlファイルからTypeScriptのAPIクライアントを生成する\n3. GitHub Actionsを用いて、tagがpushされた（≒Releaseを作成した）時、APIクライアントをtscにてビルドし `GitHub Packages Registry` に登録する\n4. フロントエンドから `npm install @xxxxx/sample-backend-client` の形で読み込んで利用する\n\n## アノテートしたDTOとエンドポイントの定義\n\nバックエンド側で以下のようにリクエスト、レスポンスを定義します\n長くなるので一部のみ抜粋しますが、エラークラスは[こちら](https://github.com/yktakaha4/nestjs-typed-client/blob/master/backend/src/app.error.ts)のように定義しています\n\n```typescript:エラークラスの定義（バックエンド）\nexport class EmptyNameError {\n  // 空の名前を示すエラーオブジェクト\n\n  @ApiProperty({ enum: EmptyNameErrorType })\n  readonly type = EmptyNameErrorType.Value;\n\n  @ApiProperty({ enum: GreetParameter })\n  readonly parameter: GreetParameter;\n\n  constructor(parameter: GreetParameter) {\n    this.parameter = parameter;\n  }\n}\n\nexport class VulgarNameError {\n  // 下品な名前を示すエラーオブジェクト\n\n  @ApiProperty({ enum: VulgarNameErrorType })\n  readonly type = VulgarNameErrorType.Value;\n\n  @ApiProperty({ enum: GreetParameter })\n  readonly parameter: GreetParameter;\n\n  @ApiProperty()\n  readonly vulgarWord: string;\n\n  constructor(parameter: GreetParameter, vulgarWord: string) {\n    this.parameter = parameter;\n    this.vulgarWord = vulgarWord;\n  }\n}\n\nexport type GreetErrors = Array<EmptyNameError | VulgarNameError>;\n```\n\n```typescript:クラスへのアノテーション（バックエンド）\nexport class GreetRequest {\n  @ApiProperty()\n  readonly lastName: string;\n\n  @ApiProperty()\n  readonly firstName: string;\n\n  constructor(lastName: string, firstName: string) {\n    this.lastName = lastName;\n    this.firstName = firstName;\n  }\n}\n\n@ApiExtraModels(EmptyNameError, VulgarNameError)\nexport class GreetResponse {\n  @ApiProperty({ type: String, nullable: true })\n  readonly message: string | null;\n\n  @ApiProperty({\n    type: 'array',\n    items: { oneOf: greetErrorSchemaPaths },\n  })\n  readonly errors: GreetErrors;\n\n  constructor(message: string | null, errors: GreetErrors) {\n    this.message = message;\n    this.errors = errors;\n  }\n}\n```\n\nエンドポイントのサンプルです\n`@ApiOkResponse` によってアノテートしたDTOを指定します。 `@ApiOperation` でクライアントに生成されるメソッド名を指定できます\n\n```typescript:エンドポイント（バックエンド）\n@ApiTags('App')\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @ApiOkResponse({ type: GreetResponse })\n  @ApiOperation({ operationId: 'greet' })\n  @Post('greet')\n  @HttpCode(200)\n  greet(@Body() request: GreetRequest): GreetResponse {\n    // 入力チェック\n    const errors = this.appService.validateGreetRequest(request);\n\n    let message: string | null = null;\n    if (errors.length === 0) {\n      // エラーなしの場合のみメッセージを取得\n      message = this.appService.getGreetingMessage(request);\n    }\n\n    return new GreetResponse(message, errors);\n  }\n}\n```\n\nNestJSのコードからyamlファイルを生成する方法は[こちら](https://qiita.com/yktakaha4/items/97ea169ed97dbcdd25fb) でも説明しています\nコマンドは以下\n\n```terminal\n$ cd ./backend\n$ npm run openapi:export\n```\n\n## yamlファイルからクライアント生成\n\nバックエンドのコードとパッケージを分けるため、 `./backend/client` 配下にnpmパッケージ用の一式を格納しています\n\n```terminal\n$ cd ./backend/client\n$ npm ci\n$ npm run generate\n$ npm run build\n\n# run generate時に実行されるコマンド\n# オプション等は以下参照\n# https://github.com/OpenAPITools/openapi-generator/blob/master/docs/generators/typescript-axios.md\n# JAVA_OPTS=\"-Dlog.level=warn\" openapi-generator generate -i sample-backend.yml -o lib/ -g typescript-axios --api-package=api --model-package=models --additional-properties=supportsES6=true,withSeparateModelsAndApi=true\n```\n\n## npmパッケージ公開\n\nGitHub Actionsにて、 `client.*` という形式のタグが打たれたら以下ワークフローを実行するようにします\nnpm publish時に、生成したパッケージのバージョン名を一意にする必要があるので、今回は[こちら](https://github.com/yktakaha4/nestjs-typed-client/blob/master/backend/client/set-package-version.js)のスクリプトを使って実現しています\n今回は、クライアント側で読み込んでいるバージョンの一意性を保証できれば十分だったので、セマンティックバージョニングは考慮せずに、 `0.0.1-${タグ名}` の形式で公開するようにしました\n\nちなみに、トークンについては、GitHub Actionsがデフォルトで指定してくれるもので問題ありません\n（プライベートリポジトリの場合、パッケージの読み込みを行う側でパッケージの読み込み権限のあるアクセストークンの発行が必要になります）\n\n```yaml:publish-client.yml\nname: Publish client\n\non:\n  push:\n    tags:\n      - client.*\n\njobs:\n  publish:\n    name: Publish client\n    runs-on: ubuntu-18.04\n    timeout-minutes: 3\n    steps:\n      - uses: actions/checkout@v2\n\n      - uses: actions/setup-node@v1\n        with:\n          node-version: 12.x\n          registry-url: https://npm.pkg.github.com/\n          scope: \"@yktakaha4\"\n\n      - run: npm ci\n        working-directory: ./backend\n\n      - run: npm run openapi:export\n        working-directory: ./backend\n\n      - run: npm ci\n        working-directory: ./backend/client\n\n      - run: npm run version $GH_REF\n        working-directory: ./backend/client\n        env:\n          GH_REF: ${{ github.ref }}\n\n      - run: npm publish\n        working-directory: ./backend/client\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```\n\n上記に基づいて生成されたnpmパッケージは、[こちら](https://github.com/yktakaha4/nestjs-typed-client/packages/) にて公開されます\n\n# Demo\n\n以下の方法で起動できます\nバックエンドは `localhost:3100`、フロントエンドは `localhost:3000` で起動します\n\n```terminal:ターミナル\n# バックエンドを起動\n$ cd ./backend\n$ npm ci\n$ npm run start\n\n# フロントエンドを起動（別ターミナルにて）\n$ cd ./frontend\n$ yarn install\n$ yarn start\n```\n\nテキストボックスに苗字、名前を入力して `Greet` ボタンを押すと、挨拶が返却されます👋\n\n![名前を入力](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/038f1105-8a75-ed5b-a9b0-80be97db3482.png)\n\nリクエストとレスポンスはそれぞれこんな感じのものが送受されます\n\n```json:Request\n{\n  \"lastName\": \"yuuki\",\n  \"firstName\": \"takahashi\"\n}\n```\n\n```json:Response\n{\n  \"message\": \"Hello, Yuuki TAKAHASHI !\",\n  \"errors\": []\n}\n```\n\nフロントエンドからのAPI呼び出しはこんな感じになります\n\n```typescript:呼び出しサンプル（フロントエンド）\n// AppApiクラスは npmパッケージからインポートしたもの（自動生成）\nconst api = new AppApi();\n\napi.greet(greetingRequest).then((axiosResponse) => {\n  dispatchResponse(axiosResponse.data);\n}).catch((error) => {\n  dispatch({ type: 'UPDATE_MESSAGE', value: String(error) });\n});\n```\n\nインテリセンスがちゃんと効いてます\n\n![インテリセンス](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/37961523-b9e3-fc46-3b0e-7a96fbbbeefa.png)\n\n入力エラー（値が空 or 下品な言葉が入力されている）をサーバサイドで検証し、エラーの場合はフロントエンドにてメッセージを編集します\n\n![入力エラー](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/b5ca5c49-32a1-8283-90a6-880b2fccb6c1.png)\n\n```json:Response\n{\n  \"message\": null,\n  \"errors\": [\n    {\n      \"type\": \"EmptyNameError\",\n      \"parameter\": \"LastName\"\n    },\n    {\n      \"type\": \"VulgarNameError\",\n      \"parameter\": \"FirstName\",\n      \"vulgarWord\": \"shit\"\n    }\n  ]\n}\n```\n\nエラーメッセージ編集のサンプルは以下になります\nこのコードだけではわかりづらいですが、 `type` も `parameter` も型付けされており、また [型ガード](https://typescript-jp.gitbook.io/deep-dive/type-system/typeguard) の効果により `VulgarNameError` の判定文の中では `vulgarWord` が参照できています🌿\n\n```typescript:エラーメッセージ設定サンプル（フロントエンド）\nconst dispatchResponse = (response: GreetResponse) => {\n  if (response.message) {\n    // メッセージが返却された場合はそれを設定\n    dispatch({ type: 'UPDATE_MESSAGE', value: response.message });\n  } else {\n    // されなかった場合は、エラーオブジェクトに合わせて設定\n    const messages: Array<string> = [];\n    for (const error of response.errors) {\n      if (error.type === 'EmptyNameError') {\n        if (error.parameter === 'LastName') {\n          messages.push('・名前は空にできません');\n        } else if (error.parameter === 'FirstName') {\n          messages.push('・苗字は空にできません');\n        }\n      } else if (error.type === 'VulgarNameError') {\n        if (error.parameter === 'LastName') {\n          messages.push(`・名前に ${error.vulgarWord} は設定できません`);\n        } else if (error.parameter === 'FirstName') {\n          messages.push(`・苗字に ${error.vulgarWord} は設定できません`);\n        }\n      }\n    }\n\n    dispatch({ type: 'UPDATE_MESSAGE', value: messages.join('') });\n  }\n};\n```\n\n一つ残念なのは、現時点でのOpenAPIv3ではパラメータ上でリテラル値を表現できないため、（[こちらのConstant Parametersの項のように、単一のメンバを持つEnumとして定義する必要あり](https://swagger.io/docs/specification/describing-parameters/)）\n上記の型ガードを実現するにあたり、 `type` を `'EmptyNameError' | 'VulgarNameError'` のようなstringのUnion型では定義できず、自動生成されるコードは `EmptyNameErrorTypeEnum | VulgarNameErrorTypeEnum` のような形になるため、インテリセンスを効かせることができずにいます\n値の検証は正しくできるため、これでも問題はないですが...\n（私の理解不足なだけで、いいやり方ができる気はものすごくします🙃）\n\nあと、今回は本旨から外れるため割愛していますが、項目毎のバリデーションについては[こちら](https://docs.nestjs.com/techniques/validation#validation)を使うといい感じにできるので、併せて導入をオススメします\n\n# まとめ\n\nひとついい実装パターンが作れた気がするので、他のやり方（先ほど説明したGraphQLや、[frourio](https://github.com/frouriojs/frourio)なんかもそうなんでしょうか？）についても挑戦していきたいと思います！\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2020-12-10T03:06:46+09:00",
    "group": null,
    "id": "0aecde44848d6a861bf5",
    "likes_count": 15,
    "private": false,
    "reactions_count": 0,
    "stocks_count": 9,
    "tags": [
      {
        "name": "npm",
        "versions": []
      },
      {
        "name": "TypeScript",
        "versions": []
      },
      {
        "name": "OpenAPI",
        "versions": []
      },
      {
        "name": "NestJS",
        "versions": []
      },
      {
        "name": "GitHubActions",
        "versions": []
      }
    ],
    "title": "NestJS + OpenAPI(Swagger)からAPIクライアントを生成し型安全に通信する",
    "updated_at": "2020-12-14T07:03:00+09:00",
    "url": "https://qiita.com/yktakaha4/items/0aecde44848d6a861bf5",
    "user": {
      "description": "",
      "facebook_id": "",
      "followees_count": 26,
      "followers_count": 22,
      "github_login_name": "yktakaha4",
      "id": "yktakaha4",
      "items_count": 27,
      "linkedin_id": "",
      "location": "",
      "name": "Yuuki Takahashi",
      "organization": "LAPRAS株式会社",
      "permanent_id": 106259,
      "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/profile-images/1600489516",
      "team_only": false,
      "twitter_screen_name": "yktakaha4",
      "website_url": "https://yktakaha4.github.io/"
    },
    "page_views_count": null,
    "team_membership": null,
    "organization_url_name": null,
    "slide": false
  }
]
