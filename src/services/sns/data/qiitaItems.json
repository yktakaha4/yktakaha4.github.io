{
  "items": [
    {
      "rendered_body": "<p>こちらは、<a href=\"https://qiita.com/advent-calendar/2020/lambda\">AWS LambdaとServerless Advent Calendar 2020</a> 25日目の記事になります！</p>\n\n<p>クリスマスの公開ですが季節感はないです<br>\n悪しからず🦵</p>\n\n<h1>\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n\n<p>AWS re:Invent 2020にて<a href=\"https://aws.amazon.com/jp/blogs/news/new-for-aws-lambda-container-image-support/\" rel=\"nofollow noopener\" target=\"_blank\">Lambdaのコンテナイメージのサポート</a>が発表されましたが、<br>\n我らが愛するServerless Frameworkでも早々に<a href=\"https://github.com/serverless/serverless/issues/8570\" rel=\"nofollow noopener\" target=\"_blank\">サポートが行われた</a>ので、お試しで使ってみました🎄</p>\n\n<p><code>serverless.yml</code> における定義については、<a href=\"https://www.serverless.com/blog/container-support-for-lambda\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a>のブログにある通り、 <code>&lt;account&gt;.dkr.ecr.&lt;region&gt;.amazonaws.com/&lt;repository&gt;@&lt;digest&gt;</code> の形式で指定する必要があるそうです<br>\nタグでなく、イメージのダイジェストで指定する必要があるとのことなので、 <code>sls deploy</code> 時にいい感じに注入する必要があります🥛</p>\n\n<h1>\n<span id=\"作ったもの\" class=\"fragment\"></span><a href=\"#%E4%BD%9C%E3%81%A3%E3%81%9F%E3%82%82%E3%81%AE\"><i class=\"fa fa-link\"></i></a>作ったもの</h1>\n\n<p>以下で公開しています🐙<br>\n<a href=\"https://github.com/yktakaha4/lambda-docker-serverless\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://github.com/yktakaha4/lambda-docker-serverless</a></p>\n\n<p>なるべく簡単に動作を試せるように、<br>\n環境構築からデプロイまでに必要なもろもろをGitHub Actionsに<a href=\"https://github.com/yktakaha4/lambda-docker-serverless/blob/master/.github/workflows/deployment.yml\" rel=\"nofollow noopener\" target=\"_blank\">まとめてます</a><br>\n変更すべき箇所はREADMEにまとめていますので併せてご覧ください</p>\n\n<h1>\n<span id=\"ポイント\" class=\"fragment\"></span><a href=\"#%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88\"><i class=\"fa fa-link\"></i></a>ポイント</h1>\n\n<p>Dockerファイルは、 <code>public.ecr.aws/lambda/xxxxx</code> から作成する必要があるそうです<br>\n<a href=\"https://github.com/aws/aws-lambda-base-images\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a>にてベースイメージが公開されています🐋</p>\n\n<p>あと、従来は <code>serverless.yml</code> にて関数のエントリーポイントを設定していたものと思いますが、Dockerfileにて設定しておく必要があるようです<br>\n個人的に、ECSのScheduled Taskで単一のコンテナに複数の関数を含めて、定義ごとに動かすものを変えるということをやっていたのですが、現状だと個別にビルドしておく必要がある感じなのでしょうか...？</p>\n\n<div class=\"code-frame\" data-lang=\"dockerfile\">\n<div class=\"code-lang\"><span class=\"bold\">Dockerfile</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">FROM</span><span class=\"s\"> public.ecr.aws/lambda/nodejs:12 AS builder</span>\n\n<span class=\"k\">WORKDIR</span><span class=\"s\"> /opt/build</span>\n\n<span class=\"k\">COPY</span><span class=\"s\"> . .</span>\n\n<span class=\"k\">RUN </span>npm ci\n\n<span class=\"k\">RUN </span>npm run build\n\n<span class=\"c\">##### ##### ##### #####</span>\n<span class=\"k\">FROM</span><span class=\"s\"> public.ecr.aws/lambda/nodejs:12 AS runner</span>\n\n<span class=\"k\">COPY</span><span class=\"s\"> --from=builder \\</span>\n  /opt/build/package*.json \\\n  ./\n\n<span class=\"k\">COPY</span><span class=\"s\"> --from=builder \\</span>\n  /opt/build/dist \\\n  ./dist\n\n<span class=\"k\">RUN </span>npm ci <span class=\"nt\">--only</span><span class=\"o\">=</span>production\n\n<span class=\"c\"># !!! ここポイント !!!</span>\n<span class=\"k\">CMD</span><span class=\"s\"> [\"dist/index.handler\"]</span>\n</code></pre></div>\n</div>\n\n<p>イメージのビルドとECRへのプッシュが済んだら、イメージのダイジェストを取得し、 <code>sls</code> コマンドに渡せるように環境変数に設定します<br>\n従来の <code>set-env</code> は現在無効となっているので、<a href=\"https://qiita.com/shonansurvivors/items/f256a0443d346f09448e\" id=\"reference-c1315afcf044466efc3e\">新しい書き方</a>でやってます</p>\n\n<p>あと、今回初めて知ったのですが、GitHub Actionsの環境にはデフォルトで <code>aws</code> コマンドがインストールされてるんですね...！</p>\n\n<div class=\"code-frame\" data-lang=\"yaml\">\n<div class=\"code-lang\"><span class=\"bold\">deployment.yml(抜粋)</span></div>\n<div class=\"highlight\"><pre><code><span class=\"na\">jobs</span><span class=\"pi\">:</span>\n  <span class=\"na\">deploy</span><span class=\"pi\">:</span>\n    <span class=\"na\">runs-on</span><span class=\"pi\">:</span> <span class=\"s\">ubuntu-18.04</span>\n    <span class=\"na\">timeout-minutes</span><span class=\"pi\">:</span> <span class=\"m\">300</span>\n\n    <span class=\"na\">steps</span><span class=\"pi\">:</span>\n      <span class=\"c1\"># 略</span>\n\n      <span class=\"c1\"># ECR</span>\n      <span class=\"pi\">-</span> <span class=\"na\">uses</span><span class=\"pi\">:</span> <span class=\"s\">aws-actions/amazon-ecr-login@v1</span>\n        <span class=\"na\">id</span><span class=\"pi\">:</span> <span class=\"s\">login-ecr</span>\n\n      <span class=\"pi\">-</span> <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"pi\">|</span>\n          <span class=\"s\">docker build -t $REGISTRY/$REPOSITORY:$TAG .</span>\n          <span class=\"s\">docker push $REGISTRY/$REPOSITORY:$TAG</span>\n\n          <span class=\"s\"># !!! ここポイント !!!</span>\n          <span class=\"s\">echo \"IMAGE_DIGEST=$(aws ecr describe-images --repository-name $REPOSITORY --image-ids imageTag=$TAG --output text --query 'imageDetails[0].imageDigest')\" &gt;&gt; $GITHUB_ENV</span>\n        <span class=\"na\">env</span><span class=\"pi\">:</span>\n          <span class=\"na\">REGISTRY</span><span class=\"pi\">:</span> <span class=\"s\">${{ steps.login-ecr.outputs.registry }}</span>\n          <span class=\"na\">REPOSITORY</span><span class=\"pi\">:</span> <span class=\"s\">lambda-docker-serverless-repos</span>\n          <span class=\"na\">TAG</span><span class=\"pi\">:</span> <span class=\"s\">latest</span>\n\n      <span class=\"c1\"># Serverless Framework</span>\n      <span class=\"pi\">-</span> <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"s\">npm ci</span>\n\n      <span class=\"pi\">-</span> <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"s\">npm run deploy</span>\n        <span class=\"na\">env</span><span class=\"pi\">:</span>\n          <span class=\"na\">AWS_ACCESS_KEY_ID</span><span class=\"pi\">:</span> <span class=\"s\">${{ secrets.AWS_ACCESS_KEY_ID }}</span>\n          <span class=\"na\">AWS_SECRET_ACCESS_KEY</span><span class=\"pi\">:</span> <span class=\"s\">${{ secrets.AWS_SECRET_ACCESS_KEY }}</span>\n          <span class=\"na\">AWS_DEFAULT_REGION</span><span class=\"pi\">:</span> <span class=\"s\">${{ secrets.AWS_DEFAULT_REGION }}</span>\n          <span class=\"na\">IMAGE_DIGEST</span><span class=\"pi\">:</span> <span class=\"s\">${{ env.IMAGE_DIGEST }}</span>\n</code></pre></div>\n</div>\n\n<p><code>serverless.yml</code> では、従来 <code>handler</code> を使っていたところを、 <code>image</code> でコンテナを指定します<br>\n<code>#{AWS::AccountId}</code> など、シャープで始まるものは <a href=\"https://www.serverless.com/plugins/serverless-pseudo-parameters\" rel=\"nofollow noopener\" target=\"_blank\">serverless-pseudo-parameters</a>の働きにより実値が埋め込まれます</p>\n\n<div class=\"code-frame\" data-lang=\"yml\">\n<div class=\"code-lang\"><span class=\"bold\">serverless.yml</span></div>\n<div class=\"highlight\"><pre><code><span class=\"na\">service</span><span class=\"pi\">:</span> <span class=\"s\">lambda-docker-serverless</span>\n\n<span class=\"na\">provider</span><span class=\"pi\">:</span>\n  <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">aws</span>\n  <span class=\"na\">stage</span><span class=\"pi\">:</span> <span class=\"s\">prod</span>\n  <span class=\"na\">region</span><span class=\"pi\">:</span> <span class=\"s\">${env:AWS_DEFAULT_REGION}</span>\n  <span class=\"na\">deploymentBucket</span><span class=\"pi\">:</span> <span class=\"s\">lambda-docker-serverless-deployment</span>\n\n<span class=\"na\">functions</span><span class=\"pi\">:</span>\n  <span class=\"na\">index</span><span class=\"pi\">:</span>\n    <span class=\"c1\"># !!! ここポイント !!!</span>\n    <span class=\"na\">image</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">#{AWS::AccountId}.dkr.ecr.#{AWS::Region}.amazonaws.com/lambda-docker-serverless-repos@${env:IMAGE_DIGEST}\"</span>\n    <span class=\"na\">events</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"na\">http</span><span class=\"pi\">:</span>\n          <span class=\"na\">path</span><span class=\"pi\">:</span> <span class=\"s\">index</span>\n          <span class=\"na\">method</span><span class=\"pi\">:</span> <span class=\"s\">post</span>\n          <span class=\"na\">cors</span><span class=\"pi\">:</span> <span class=\"no\">true</span>\n\n<span class=\"na\">plugins</span><span class=\"pi\">:</span>\n  <span class=\"pi\">-</span> <span class=\"s\">serverless-pseudo-parameters</span>\n</code></pre></div>\n</div>\n\n<p>今回は、こんなシンプルな関数を作ってみました<br>\nリクエストで受け取った名前を大文字にして、挨拶を返す処理になります👋</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">index.ts</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">APIGatewayProxyHandler</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">aws-lambda</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"dl\">\"</span><span class=\"s2\">source-map-support/register</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"kr\">interface</span> <span class=\"nx\">Request</span> <span class=\"p\">{</span>\n  <span class=\"nl\">name</span><span class=\"p\">?:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">handler</span><span class=\"p\">:</span> <span class=\"nx\">APIGatewayProxyHandler</span> <span class=\"o\">=</span> <span class=\"k\">async</span> <span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">try</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">name</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">body</span> <span class=\"o\">??</span> <span class=\"dl\">\"</span><span class=\"s2\">{}</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"nx\">Request</span><span class=\"p\">;</span>\n\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n      <span class=\"na\">statusCode</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"p\">,</span>\n      <span class=\"na\">body</span><span class=\"p\">:</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">({</span>\n        <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"s2\">`Hello, </span><span class=\"p\">${(</span><span class=\"nx\">name</span> <span class=\"o\">??</span> <span class=\"dl\">\"</span><span class=\"s2\">nanashi-san</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">toUpperCase</span><span class=\"p\">()}</span><span class=\"s2\"> !`</span><span class=\"p\">,</span>\n      <span class=\"p\">}),</span>\n    <span class=\"p\">};</span>\n  <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n      <span class=\"na\">statusCode</span><span class=\"p\">:</span> <span class=\"mi\">500</span><span class=\"p\">,</span>\n      <span class=\"na\">body</span><span class=\"p\">:</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">({</span>\n        <span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"nb\">String</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">),</span>\n      <span class=\"p\">}),</span>\n    <span class=\"p\">};</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div>\n</div>\n\n<p><code>https://xxxxxxxx.execute-api.ap-northeast-1.amazonaws.com/prod/index</code> にアクセスしてみます<br>\n<a href=\"https://insomnia.rest/\" rel=\"nofollow noopener\" target=\"_blank\">Insomnia</a>で実行してみると、ちゃんと動いてそうでいい感じです！</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/2d982fe092527fe455771a709acd3b6aa30fa838/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3130363235392f61346233643061332d373537342d656131612d333736312d3465333632613864313266342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2Fa4b3d0a3-7574-ea1a-3761-4e362a8d12f4.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=7b09ac2fae9cf50c3681940c4681cf7d\" alt=\"insomnia.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/a4b3d0a3-7574-ea1a-3761-4e362a8d12f4.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2Fa4b3d0a3-7574-ea1a-3761-4e362a8d12f4.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=11066bd857f5f9a10a21d5e463a86c1c 1x\" loading=\"lazy\"></a></p>\n\n<h1>\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n\n<p>当初は、関数内で<a href=\"https://pptr.dev/\" rel=\"nofollow noopener\" target=\"_blank\">Puppeteer</a>を動かそうと少し試していたのですが、<br>\n従来の一番安定したやり方だった<a href=\"https://github.com/alixaxel/chrome-aws-lambda\" rel=\"nofollow noopener\" target=\"_blank\">chrome-aws-lambda</a>を使うよりも楽に構築できると思いきや、ライブラリの不足やディレクトリの権限周りの問題で結構留意することが多かったので諦めました...<br>\n（ちなその残骸は<a href=\"https://github.com/yktakaha4/lambda-docker-puppeteer\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a>にあります⚰️）</p>\n\n<p>従来実行環境の微妙な差異に悩まされることもちょいちょいあったように思いますが、<br>\n今後コンテナベースの環境で開発ができるようになると利便性が上がるので、引き続き動向を追っていきたいですね🦌🦌🎅🎁</p>\n",
      "body": "こちらは、[AWS LambdaとServerless Advent Calendar 2020](https://qiita.com/advent-calendar/2020/lambda) 25日目の記事になります！\n\nクリスマスの公開ですが季節感はないです\n悪しからず🦵\n\n# はじめに\n\nAWS re:Invent 2020にて[Lambdaのコンテナイメージのサポート](https://aws.amazon.com/jp/blogs/news/new-for-aws-lambda-container-image-support/)が発表されましたが、\n我らが愛するServerless Frameworkでも早々に[サポートが行われた](https://github.com/serverless/serverless/issues/8570)ので、お試しで使ってみました🎄\n\n`serverless.yml` における定義については、[こちら](https://www.serverless.com/blog/container-support-for-lambda)のブログにある通り、 `<account>.dkr.ecr.<region>.amazonaws.com/<repository>@<digest>` の形式で指定する必要があるそうです\nタグでなく、イメージのダイジェストで指定する必要があるとのことなので、 `sls deploy` 時にいい感じに注入する必要があります🥛\n\n# 作ったもの\n\n以下で公開しています🐙\nhttps://github.com/yktakaha4/lambda-docker-serverless\n\nなるべく簡単に動作を試せるように、\n環境構築からデプロイまでに必要なもろもろをGitHub Actionsに[まとめてます](https://github.com/yktakaha4/lambda-docker-serverless/blob/master/.github/workflows/deployment.yml)\n変更すべき箇所はREADMEにまとめていますので併せてご覧ください\n\n# ポイント\n\nDockerファイルは、 `public.ecr.aws/lambda/xxxxx` から作成する必要があるそうです\n[こちら](https://github.com/aws/aws-lambda-base-images)にてベースイメージが公開されています🐋\n\nあと、従来は `serverless.yml` にて関数のエントリーポイントを設定していたものと思いますが、Dockerfileにて設定しておく必要があるようです\n個人的に、ECSのScheduled Taskで単一のコンテナに複数の関数を含めて、定義ごとに動かすものを変えるということをやっていたのですが、現状だと個別にビルドしておく必要がある感じなのでしょうか...？\n\n```dockerfile:Dockerfile\nFROM public.ecr.aws/lambda/nodejs:12 AS builder\n\nWORKDIR /opt/build\n\nCOPY . .\n\nRUN npm ci\n\nRUN npm run build\n\n##### ##### ##### #####\nFROM public.ecr.aws/lambda/nodejs:12 AS runner\n\nCOPY --from=builder \\\n  /opt/build/package*.json \\\n  ./\n\nCOPY --from=builder \\\n  /opt/build/dist \\\n  ./dist\n\nRUN npm ci --only=production\n\n# !!! ここポイント !!!\nCMD [\"dist/index.handler\"]\n```\n\nイメージのビルドとECRへのプッシュが済んだら、イメージのダイジェストを取得し、 `sls` コマンドに渡せるように環境変数に設定します\n従来の `set-env` は現在無効となっているので、[新しい書き方](https://qiita.com/shonansurvivors/items/f256a0443d346f09448e)でやってます\n\nあと、今回初めて知ったのですが、GitHub Actionsの環境にはデフォルトで `aws` コマンドがインストールされてるんですね...！\n\n```yaml:deployment.yml(抜粋)\njobs:\n  deploy:\n    runs-on: ubuntu-18.04\n    timeout-minutes: 300\n\n    steps:\n      # 略\n\n      # ECR\n      - uses: aws-actions/amazon-ecr-login@v1\n        id: login-ecr\n\n      - run: |\n          docker build -t $REGISTRY/$REPOSITORY:$TAG .\n          docker push $REGISTRY/$REPOSITORY:$TAG\n\n          # !!! ここポイント !!!\n          echo \"IMAGE_DIGEST=$(aws ecr describe-images --repository-name $REPOSITORY --image-ids imageTag=$TAG --output text --query 'imageDetails[0].imageDigest')\" >> $GITHUB_ENV\n        env:\n          REGISTRY: ${{ steps.login-ecr.outputs.registry }}\n          REPOSITORY: lambda-docker-serverless-repos\n          TAG: latest\n\n      # Serverless Framework\n      - run: npm ci\n\n      - run: npm run deploy\n        env:\n          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}\n          IMAGE_DIGEST: ${{ env.IMAGE_DIGEST }}\n```\n\n`serverless.yml` では、従来 `handler` を使っていたところを、 `image` でコンテナを指定します\n`#{AWS::AccountId}` など、シャープで始まるものは [serverless-pseudo-parameters]\n(https://www.serverless.com/plugins/serverless-pseudo-parameters)の働きにより実値が埋め込まれます\n\n```yml:serverless.yml\nservice: lambda-docker-serverless\n\nprovider:\n  name: aws\n  stage: prod\n  region: ${env:AWS_DEFAULT_REGION}\n  deploymentBucket: lambda-docker-serverless-deployment\n\nfunctions:\n  index:\n    # !!! ここポイント !!!\n    image: \"#{AWS::AccountId}.dkr.ecr.#{AWS::Region}.amazonaws.com/lambda-docker-serverless-repos@${env:IMAGE_DIGEST}\"\n    events:\n      - http:\n          path: index\n          method: post\n          cors: true\n\nplugins:\n  - serverless-pseudo-parameters\n```\n\n今回は、こんなシンプルな関数を作ってみました\nリクエストで受け取った名前を大文字にして、挨拶を返す処理になります👋\n\n```typescript:index.ts\nimport { APIGatewayProxyHandler } from \"aws-lambda\";\nimport \"source-map-support/register\";\n\ninterface Request {\n  name?: string;\n}\n\nexport const handler: APIGatewayProxyHandler = async (event) => {\n  try {\n    const { name } = JSON.parse(event.body ?? \"{}\") as Request;\n\n    return {\n      statusCode: 200,\n      body: JSON.stringify({\n        message: `Hello, ${(name ?? \"nanashi-san\").toUpperCase()} !`,\n      }),\n    };\n  } catch (e) {\n    return {\n      statusCode: 500,\n      body: JSON.stringify({\n        error: String(e),\n      }),\n    };\n  }\n};\n```\n\n`https://xxxxxxxx.execute-api.ap-northeast-1.amazonaws.com/prod/index` にアクセスしてみます\n[Insomnia](https://insomnia.rest/)で実行してみると、ちゃんと動いてそうでいい感じです！\n\n![insomnia.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/a4b3d0a3-7574-ea1a-3761-4e362a8d12f4.png)\n\n# おわりに\n\n当初は、関数内で[Puppeteer](https://pptr.dev/)を動かそうと少し試していたのですが、\n従来の一番安定したやり方だった[chrome-aws-lambda](https://github.com/alixaxel/chrome-aws-lambda)を使うよりも楽に構築できると思いきや、ライブラリの不足やディレクトリの権限周りの問題で結構留意することが多かったので諦めました...\n（ちなその残骸は[こちら](https://github.com/yktakaha4/lambda-docker-puppeteer)にあります⚰️）\n\n従来実行環境の微妙な差異に悩まされることもちょいちょいあったように思いますが、\n今後コンテナベースの環境で開発ができるようになると利便性が上がるので、引き続き動向を追っていきたいですね🦌🦌🎅🎁\n",
      "coediting": false,
      "comments_count": 0,
      "created_at": "2020-12-18T03:25:49+09:00",
      "group": null,
      "id": "ead117870617f45c70d5",
      "likes_count": 3,
      "private": false,
      "reactions_count": 0,
      "stocks_count": 1,
      "tags": [
        {
          "name": "TypeScript",
          "versions": []
        },
        {
          "name": "Docker",
          "versions": []
        },
        {
          "name": "lambda",
          "versions": []
        },
        {
          "name": "ServerlessFramework",
          "versions": []
        },
        {
          "name": "GitHubActions",
          "versions": []
        }
      ],
      "title": "Serverless FrameworkでLambdaコンテナイメージを利用する",
      "updated_at": "2020-12-25T07:02:42+09:00",
      "url": "https://qiita.com/yktakaha4/items/ead117870617f45c70d5",
      "user": {
        "description": "",
        "facebook_id": "",
        "followees_count": 26,
        "followers_count": 23,
        "github_login_name": "yktakaha4",
        "id": "yktakaha4",
        "items_count": 27,
        "linkedin_id": "",
        "location": "",
        "name": "Yuuki Takahashi",
        "organization": "LAPRAS株式会社",
        "permanent_id": 106259,
        "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/profile-images/1600489516",
        "team_only": false,
        "twitter_screen_name": "yktakaha4",
        "website_url": "https://yktakaha4.github.io/"
      },
      "page_views_count": null,
      "team_membership": null,
      "organization_url_name": null,
      "slide": false
    },
    {
      "rendered_body": "<p>こちらは、<a href=\"https://qiita.com/advent-calendar/2020/typescript\">TypeScript Advent Calendar 2020</a> 14日目の記事になります！</p>\n\n<h1>\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n\n<p>最近、個人での開発にてTypeScriptを選定することが多くなり、その中で <a href=\"https://nestjs.com/\" rel=\"nofollow noopener\" target=\"_blank\">NestJS</a> を使ってバックエンドのAPIを構築する機会があったのですが、<br>\nフロントエンド（<a href=\"https://ja.nuxtjs.org/\" rel=\"nofollow noopener\" target=\"_blank\">Nuxt.js</a>で作ったSPA）との通信について、割といい感じに作れた気がしたので、備忘録として残したいと思います✍️</p>\n\n<h1>\n<span id=\"どんなものを作るか\" class=\"fragment\"></span><a href=\"#%E3%81%A9%E3%82%93%E3%81%AA%E3%82%82%E3%81%AE%E3%82%92%E4%BD%9C%E3%82%8B%E3%81%8B\"><i class=\"fa fa-link\"></i></a>どんなものを作るか</h1>\n\n<p>Webアプリのフロントエンドとバックエンド間での通信として、以下のことを実現したいという気持ちがありました</p>\n\n<ul>\n<li>\n<code>リクエスト/レスポンスに型付け</code> したい💪\n\n<ul>\n<li>フロント/バックエンド双方のTSで、InterfaceなりClassなりに値が詰められたDTOを扱いたい</li>\n<li>バックエンド側で定義した型をフロント側でも使いたい\n\n<ul>\n<li>I/Fの更新をフロント側からいい感じに取り込みたい</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>フロントのコード上で<code>APIであることを意識したくない</code> 🪨\n\n<ul>\n<li>パスとかHTTPメソッドとかは隠蔽して、TS上では関数呼び出しで使いたい</li>\n<li>ただし、Cookieによるセッション管理や環境毎にリクエスト先のドメインを分けるなど、必要があればHTTP上の挙動をカスタマイズしたい</li>\n</ul>\n</li>\n<li>\n<code>バリデーションや業務エラーを返却</code> したい🐟\n\n<ul>\n<li>項目毎のバリデーションをしたい\n\n<ul>\n<li>フロントでもよしなにやるが、特にバックエンド側で期待しないリクエストを受けたらエラーとしたい</li>\n</ul>\n</li>\n<li>業務エラーをいい感じに返却したい\n\n<ul>\n<li>IDに紐づくオブジェクトがDBから取れなかった...とか</li>\n<li>1回のリクエストに対してN個の業務エラーを返したい\n\n<ul>\n<li>返された業務エラーをフロント側で識別し、処理（エラー表示、無視など）をおこないたい</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>ネットワークエラー等は例外でコントロールしたい</li>\n</ul>\n</li>\n</ul>\n\n<p>上記の実現にあたりNestJSの公式ドキュメントをみていくと、 <a href=\"https://docs.nestjs.com/openapi/introduction\" rel=\"nofollow noopener\" target=\"_blank\">OpenAPI</a> の章の記述が役立ちそうですが、<br>\nやってくれるのはOpenAPIの定義を生成してくれるところまでなので、そこからAPIクライアントの作成と、フロントエンド側からの読み込みをどのように行うか検討しました</p>\n\n<p>なお、本アドベントカレンダーでも型安全な通信の方法として <a href=\"https://qiita.com/mikan3rd/items/3f46b1edcb79ad63deef\" id=\"reference-e0bccdf12305ce2e49db\">GraphQLを使ったパターン</a> を書かれている方がいますので、併せてご覧いただくと比較ができるかもしれません<br>\n（私は、開発時にGraphQLに対する知見がなかったのと、作りたいものに対してオーバースペック気味に感じたため今回は採用を見送りました）</p>\n\n<h1>\n<span id=\"作ったもの\" class=\"fragment\"></span><a href=\"#%E4%BD%9C%E3%81%A3%E3%81%9F%E3%82%82%E3%81%AE\"><i class=\"fa fa-link\"></i></a>作ったもの</h1>\n\n<p>ソースコードは以下になります🍔<br>\nサンプルになりそうな部分のみ抜き出しています<br>\n<a href=\"https://github.com/yktakaha4/nestjs-typed-client\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://github.com/yktakaha4/nestjs-typed-client</a></p>\n\n<p><code>/backend</code> にNestJSで作ったバックエンド、 <code>/frontend</code> にReactで作ったフロントエンドのサンプルアプリケーションを格納しています<br>\n実際に作ったものでは別々のリポジトリにて管理していますが、今回は簡便のためひとつにまとめました</p>\n\n<p>クライアントの生成からフロントエンドの取り込みを図にしたものは以下になります🦑<br>\nグレーの点線がソースコードの関連、オレンジの点線が実際の通信の関連のイメージです</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/463178918345172373a0f3c783bacd2ce16759a4/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3130363235392f66363764363830392d303465352d373332332d333136372d3635643234613337383764332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2Ff67d6809-04e5-7323-3167-65d24a3787d3.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=98ac88464063a5ce5e32041410fa91fb\" alt=\"archtecture.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/f67d6809-04e5-7323-3167-65d24a3787d3.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2Ff67d6809-04e5-7323-3167-65d24a3787d3.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=c2774507eccef55585b2cfe284b2c2f6 1x\" loading=\"lazy\"></a></p>\n\n<p>流れはこんな感じになります<br>\nなお、今回は 2.で生成するクライアントに <code>typescript-axios</code> を選択しましたが、 <a href=\"https://github.com/OpenAPITools/openapi-generator/tree/master/docs/generators#client-generators\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a> に記載されているものから任意に選択可能です</p>\n\n<ol>\n<li>NestJSにて <a href=\"https://github.com/nestjs/swagger\" rel=\"nofollow noopener\" target=\"_blank\">@nestjs/swagger</a> にてアノテートしたDTOとエンドポイントを定義し、OpenAPIのyamlファイルを生成する</li>\n<li>\n<a href=\"https://github.com/OpenAPITools/openapi-generator-cli\" rel=\"nofollow noopener\" target=\"_blank\">@openapitools/openapi-generator-cli</a> にて、1.で作成したyamlファイルからTypeScriptのAPIクライアントを生成する</li>\n<li>GitHub Actionsを用いて、tagがpushされた（≒Releaseを作成した）時、APIクライアントをtscにてビルドし <code>GitHub Packages Registry</code> に登録する</li>\n<li>フロントエンドから <code>npm install @xxxxx/sample-backend-client</code> の形で読み込んで利用する</li>\n</ol>\n\n<h2>\n<span id=\"アノテートしたdtoとエンドポイントの定義\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%8E%E3%83%86%E3%83%BC%E3%83%88%E3%81%97%E3%81%9Fdto%E3%81%A8%E3%82%A8%E3%83%B3%E3%83%89%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88%E3%81%AE%E5%AE%9A%E7%BE%A9\"><i class=\"fa fa-link\"></i></a>アノテートしたDTOとエンドポイントの定義</h2>\n\n<p>バックエンド側で以下のようにリクエスト、レスポンスを定義します<br>\n長くなるので一部のみ抜粋しますが、エラークラスは<a href=\"https://github.com/yktakaha4/nestjs-typed-client/blob/master/backend/src/app.error.ts\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a>のように定義しています</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">エラークラスの定義（バックエンド）</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">EmptyNameError</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// 空の名前を示すエラーオブジェクト</span>\n\n  <span class=\"p\">@</span><span class=\"nd\">ApiProperty</span><span class=\"p\">({</span> <span class=\"na\">enum</span><span class=\"p\">:</span> <span class=\"nx\">EmptyNameErrorType</span> <span class=\"p\">})</span>\n  <span class=\"k\">readonly</span> <span class=\"kd\">type</span> <span class=\"o\">=</span> <span class=\"nx\">EmptyNameErrorType</span><span class=\"p\">.</span><span class=\"nx\">Value</span><span class=\"p\">;</span>\n\n  <span class=\"p\">@</span><span class=\"nd\">ApiProperty</span><span class=\"p\">({</span> <span class=\"na\">enum</span><span class=\"p\">:</span> <span class=\"nx\">GreetParameter</span> <span class=\"p\">})</span>\n  <span class=\"k\">readonly</span> <span class=\"nx\">parameter</span><span class=\"p\">:</span> <span class=\"nx\">GreetParameter</span><span class=\"p\">;</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"nx\">parameter</span><span class=\"p\">:</span> <span class=\"nx\">GreetParameter</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">parameter</span> <span class=\"o\">=</span> <span class=\"nx\">parameter</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">VulgarNameError</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// 下品な名前を示すエラーオブジェクト</span>\n\n  <span class=\"p\">@</span><span class=\"nd\">ApiProperty</span><span class=\"p\">({</span> <span class=\"na\">enum</span><span class=\"p\">:</span> <span class=\"nx\">VulgarNameErrorType</span> <span class=\"p\">})</span>\n  <span class=\"k\">readonly</span> <span class=\"kd\">type</span> <span class=\"o\">=</span> <span class=\"nx\">VulgarNameErrorType</span><span class=\"p\">.</span><span class=\"nx\">Value</span><span class=\"p\">;</span>\n\n  <span class=\"p\">@</span><span class=\"nd\">ApiProperty</span><span class=\"p\">({</span> <span class=\"na\">enum</span><span class=\"p\">:</span> <span class=\"nx\">GreetParameter</span> <span class=\"p\">})</span>\n  <span class=\"k\">readonly</span> <span class=\"nx\">parameter</span><span class=\"p\">:</span> <span class=\"nx\">GreetParameter</span><span class=\"p\">;</span>\n\n  <span class=\"p\">@</span><span class=\"nd\">ApiProperty</span><span class=\"p\">()</span>\n  <span class=\"k\">readonly</span> <span class=\"nx\">vulgarWord</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"nx\">parameter</span><span class=\"p\">:</span> <span class=\"nx\">GreetParameter</span><span class=\"p\">,</span> <span class=\"nx\">vulgarWord</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">parameter</span> <span class=\"o\">=</span> <span class=\"nx\">parameter</span><span class=\"p\">;</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">vulgarWord</span> <span class=\"o\">=</span> <span class=\"nx\">vulgarWord</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">type</span> <span class=\"nx\">GreetErrors</span> <span class=\"o\">=</span> <span class=\"nb\">Array</span><span class=\"o\">&lt;</span><span class=\"nx\">EmptyNameError</span> <span class=\"o\">|</span> <span class=\"nx\">VulgarNameError</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n</code></pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">クラスへのアノテーション（バックエンド）</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">GreetRequest</span> <span class=\"p\">{</span>\n  <span class=\"p\">@</span><span class=\"nd\">ApiProperty</span><span class=\"p\">()</span>\n  <span class=\"k\">readonly</span> <span class=\"nx\">lastName</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n\n  <span class=\"p\">@</span><span class=\"nd\">ApiProperty</span><span class=\"p\">()</span>\n  <span class=\"k\">readonly</span> <span class=\"nx\">firstName</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"nx\">lastName</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">,</span> <span class=\"nx\">firstName</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">lastName</span> <span class=\"o\">=</span> <span class=\"nx\">lastName</span><span class=\"p\">;</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">firstName</span> <span class=\"o\">=</span> <span class=\"nx\">firstName</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">@</span><span class=\"nd\">ApiExtraModels</span><span class=\"p\">(</span><span class=\"nx\">EmptyNameError</span><span class=\"p\">,</span> <span class=\"nx\">VulgarNameError</span><span class=\"p\">)</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">GreetResponse</span> <span class=\"p\">{</span>\n  <span class=\"p\">@</span><span class=\"nd\">ApiProperty</span><span class=\"p\">({</span> <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nb\">String</span><span class=\"p\">,</span> <span class=\"na\">nullable</span><span class=\"p\">:</span> <span class=\"kc\">true</span> <span class=\"p\">})</span>\n  <span class=\"k\">readonly</span> <span class=\"nx\">message</span><span class=\"p\">:</span> <span class=\"kr\">string</span> <span class=\"o\">|</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n\n  <span class=\"p\">@</span><span class=\"nd\">ApiProperty</span><span class=\"p\">({</span>\n    <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">array</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n    <span class=\"na\">items</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"na\">oneOf</span><span class=\"p\">:</span> <span class=\"nx\">greetErrorSchemaPaths</span> <span class=\"p\">},</span>\n  <span class=\"p\">})</span>\n  <span class=\"k\">readonly</span> <span class=\"nx\">errors</span><span class=\"p\">:</span> <span class=\"nx\">GreetErrors</span><span class=\"p\">;</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">:</span> <span class=\"kr\">string</span> <span class=\"o\">|</span> <span class=\"kc\">null</span><span class=\"p\">,</span> <span class=\"nx\">errors</span><span class=\"p\">:</span> <span class=\"nx\">GreetErrors</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">message</span> <span class=\"o\">=</span> <span class=\"nx\">message</span><span class=\"p\">;</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">errors</span> <span class=\"o\">=</span> <span class=\"nx\">errors</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n</div>\n\n<p>エンドポイントのサンプルです<br>\n<code>@ApiOkResponse</code> によってアノテートしたDTOを指定します。 <code>@ApiOperation</code> でクライアントに生成されるメソッド名を指定できます</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">エンドポイント（バックエンド）</span></div>\n<div class=\"highlight\"><pre><code><span class=\"p\">@</span><span class=\"nd\">ApiTags</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">App</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n<span class=\"p\">@</span><span class=\"nd\">Controller</span><span class=\"p\">()</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">AppController</span> <span class=\"p\">{</span>\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"k\">private</span> <span class=\"k\">readonly</span> <span class=\"nx\">appService</span><span class=\"p\">:</span> <span class=\"nx\">AppService</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n\n  <span class=\"p\">@</span><span class=\"nd\">ApiOkResponse</span><span class=\"p\">({</span> <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nx\">GreetResponse</span> <span class=\"p\">})</span>\n  <span class=\"p\">@</span><span class=\"nd\">ApiOperation</span><span class=\"p\">({</span> <span class=\"na\">operationId</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">greet</span><span class=\"dl\">'</span> <span class=\"p\">})</span>\n  <span class=\"p\">@</span><span class=\"nd\">Post</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">greet</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n  <span class=\"p\">@</span><span class=\"nd\">HttpCode</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">)</span>\n  <span class=\"nx\">greet</span><span class=\"p\">(@</span><span class=\"nd\">Body</span><span class=\"p\">()</span> <span class=\"nx\">request</span><span class=\"p\">:</span> <span class=\"nx\">GreetRequest</span><span class=\"p\">):</span> <span class=\"nx\">GreetResponse</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 入力チェック</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">errors</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">appService</span><span class=\"p\">.</span><span class=\"nx\">validateGreetRequest</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">);</span>\n\n    <span class=\"kd\">let</span> <span class=\"nx\">message</span><span class=\"p\">:</span> <span class=\"kr\">string</span> <span class=\"o\">|</span> <span class=\"kc\">null</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">errors</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">===</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// エラーなしの場合のみメッセージを取得</span>\n      <span class=\"nx\">message</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">appService</span><span class=\"p\">.</span><span class=\"nx\">getGreetingMessage</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nx\">GreetResponse</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">,</span> <span class=\"nx\">errors</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n</div>\n\n<p>NestJSのコードからyamlファイルを生成する方法は<a href=\"https://qiita.com/yktakaha4/items/97ea169ed97dbcdd25fb\" id=\"reference-2e250818221dc4026861\">こちら</a> でも説明しています<br>\nコマンドは以下</p>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">cd</span> ./backend\n<span class=\"gp\">$</span><span class=\"w\"> </span>npm run openapi:export\n</code></pre></div></div>\n\n<h2>\n<span id=\"yamlファイルからクライアント生成\" class=\"fragment\"></span><a href=\"#yaml%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%8B%E3%82%89%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E7%94%9F%E6%88%90\"><i class=\"fa fa-link\"></i></a>yamlファイルからクライアント生成</h2>\n\n<p>バックエンドのコードとパッケージを分けるため、 <code>./backend/client</code> 配下にnpmパッケージ用の一式を格納しています</p>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">cd</span> ./backend/client\n<span class=\"gp\">$</span><span class=\"w\"> </span>npm ci\n<span class=\"gp\">$</span><span class=\"w\"> </span>npm run generate\n<span class=\"gp\">$</span><span class=\"w\"> </span>npm run build\n<span class=\"go\">\n</span><span class=\"gp\">#</span><span class=\"w\"> </span>run generate時に実行されるコマンド\n<span class=\"gp\">#</span><span class=\"w\"> </span>オプション等は以下参照\n<span class=\"gp\">#</span><span class=\"w\"> </span>https://github.com/OpenAPITools/openapi-generator/blob/master/docs/generators/typescript-axios.md\n<span class=\"gp\">#</span><span class=\"w\"> </span><span class=\"nv\">JAVA_OPTS</span><span class=\"o\">=</span><span class=\"s2\">\"-Dlog.level=warn\"</span> openapi-generator generate <span class=\"nt\">-i</span> sample-backend.yml <span class=\"nt\">-o</span> lib/ <span class=\"nt\">-g</span> typescript-axios <span class=\"nt\">--api-package</span><span class=\"o\">=</span>api <span class=\"nt\">--model-package</span><span class=\"o\">=</span>models <span class=\"nt\">--additional-properties</span><span class=\"o\">=</span><span class=\"nv\">supportsES6</span><span class=\"o\">=</span><span class=\"nb\">true</span>,withSeparateModelsAndApi<span class=\"o\">=</span><span class=\"nb\">true</span>\n</code></pre></div></div>\n\n<h2>\n<span id=\"npmパッケージ公開\" class=\"fragment\"></span><a href=\"#npm%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E5%85%AC%E9%96%8B\"><i class=\"fa fa-link\"></i></a>npmパッケージ公開</h2>\n\n<p>GitHub Actionsにて、 <code>client.*</code> という形式のタグが打たれたら以下ワークフローを実行するようにします<br>\nnpm publish時に、生成したパッケージのバージョン名を一意にする必要があるので、今回は<a href=\"https://github.com/yktakaha4/nestjs-typed-client/blob/master/backend/client/set-package-version.js\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a>のスクリプトを使って実現しています<br>\n今回は、クライアント側で読み込んでいるバージョンの一意性を保証できれば十分だったので、セマンティックバージョニングは考慮せずに、 <code>0.0.1-${タグ名}</code> の形式で公開するようにしました</p>\n\n<p>ちなみに、トークンについては、GitHub Actionsがデフォルトで指定してくれるもので問題ありません<br>\n（プライベートリポジトリの場合、パッケージの読み込みを行う側でパッケージの読み込み権限のあるアクセストークンの発行が必要になります）</p>\n\n<div class=\"code-frame\" data-lang=\"yaml\">\n<div class=\"code-lang\"><span class=\"bold\">publish-client.yml</span></div>\n<div class=\"highlight\"><pre><code><span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Publish client</span>\n\n<span class=\"na\">on</span><span class=\"pi\">:</span>\n  <span class=\"na\">push</span><span class=\"pi\">:</span>\n    <span class=\"na\">tags</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"s\">client.*</span>\n\n<span class=\"na\">jobs</span><span class=\"pi\">:</span>\n  <span class=\"na\">publish</span><span class=\"pi\">:</span>\n    <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Publish client</span>\n    <span class=\"na\">runs-on</span><span class=\"pi\">:</span> <span class=\"s\">ubuntu-18.04</span>\n    <span class=\"na\">timeout-minutes</span><span class=\"pi\">:</span> <span class=\"m\">3</span>\n    <span class=\"na\">steps</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"na\">uses</span><span class=\"pi\">:</span> <span class=\"s\">actions/checkout@v2</span>\n\n      <span class=\"pi\">-</span> <span class=\"na\">uses</span><span class=\"pi\">:</span> <span class=\"s\">actions/setup-node@v1</span>\n        <span class=\"na\">with</span><span class=\"pi\">:</span>\n          <span class=\"na\">node-version</span><span class=\"pi\">:</span> <span class=\"s\">12.x</span>\n          <span class=\"na\">registry-url</span><span class=\"pi\">:</span> <span class=\"s\">https://npm.pkg.github.com/</span>\n          <span class=\"na\">scope</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">@yktakaha4\"</span>\n\n      <span class=\"pi\">-</span> <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"s\">npm ci</span>\n        <span class=\"na\">working-directory</span><span class=\"pi\">:</span> <span class=\"s\">./backend</span>\n\n      <span class=\"pi\">-</span> <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"s\">npm run openapi:export</span>\n        <span class=\"na\">working-directory</span><span class=\"pi\">:</span> <span class=\"s\">./backend</span>\n\n      <span class=\"pi\">-</span> <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"s\">npm ci</span>\n        <span class=\"na\">working-directory</span><span class=\"pi\">:</span> <span class=\"s\">./backend/client</span>\n\n      <span class=\"pi\">-</span> <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"s\">npm run version $GH_REF</span>\n        <span class=\"na\">working-directory</span><span class=\"pi\">:</span> <span class=\"s\">./backend/client</span>\n        <span class=\"na\">env</span><span class=\"pi\">:</span>\n          <span class=\"na\">GH_REF</span><span class=\"pi\">:</span> <span class=\"s\">${{ github.ref }}</span>\n\n      <span class=\"pi\">-</span> <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"s\">npm publish</span>\n        <span class=\"na\">working-directory</span><span class=\"pi\">:</span> <span class=\"s\">./backend/client</span>\n        <span class=\"na\">env</span><span class=\"pi\">:</span>\n          <span class=\"na\">NODE_AUTH_TOKEN</span><span class=\"pi\">:</span> <span class=\"s\">${{ secrets.GITHUB_TOKEN }}</span>\n</code></pre></div>\n</div>\n\n<p>上記に基づいて生成されたnpmパッケージは、<a href=\"https://github.com/yktakaha4/nestjs-typed-client/packages/\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a> にて公開されます</p>\n\n<h1>\n<span id=\"demo\" class=\"fragment\"></span><a href=\"#demo\"><i class=\"fa fa-link\"></i></a>Demo</h1>\n\n<p>以下の方法で起動できます<br>\nバックエンドは <code>localhost:3100</code>、フロントエンドは <code>localhost:3000</code> で起動します</p>\n\n<div class=\"code-frame\" data-lang=\"terminal\">\n<div class=\"code-lang\"><span class=\"bold\">ターミナル</span></div>\n<div class=\"highlight\"><pre><code><span class=\"gp\">#</span><span class=\"w\"> </span>バックエンドを起動\n<span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">cd</span> ./backend\n<span class=\"gp\">$</span><span class=\"w\"> </span>npm ci\n<span class=\"gp\">$</span><span class=\"w\"> </span>npm run start\n<span class=\"go\">\n</span><span class=\"gp\">#</span><span class=\"w\"> </span>フロントエンドを起動（別ターミナルにて）\n<span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">cd</span> ./frontend\n<span class=\"gp\">$</span><span class=\"w\"> </span>yarn <span class=\"nb\">install</span>\n<span class=\"gp\">$</span><span class=\"w\"> </span>yarn start\n</code></pre></div>\n</div>\n\n<p>テキストボックスに苗字、名前を入力して <code>Greet</code> ボタンを押すと、挨拶が返却されます👋</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/25ce45631d4a231314337468e9284491df99d831/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3130363235392f30333866313130352d386137352d656435622d613962302d3830626539376462333438322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2F038f1105-8a75-ed5b-a9b0-80be97db3482.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=92ba519d5a883f07c7d3c8bb36e04233\" alt=\"名前を入力\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/038f1105-8a75-ed5b-a9b0-80be97db3482.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2F038f1105-8a75-ed5b-a9b0-80be97db3482.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=160b622754d616fa77b11a901ebaac13 1x\" loading=\"lazy\"></a></p>\n\n<p>リクエストとレスポンスはそれぞれこんな感じのものが送受されます</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">Request</span></div>\n<div class=\"highlight\"><pre><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"lastName\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"yuuki\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"firstName\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"takahashi\"</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">Response</span></div>\n<div class=\"highlight\"><pre><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"message\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Hello, Yuuki TAKAHASHI !\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"errors\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div>\n</div>\n\n<p>フロントエンドからのAPI呼び出しはこんな感じになります</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">呼び出しサンプル（フロントエンド）</span></div>\n<div class=\"highlight\"><pre><code><span class=\"c1\">// AppApiクラスは npmパッケージからインポートしたもの（自動生成）</span>\n<span class=\"kd\">const</span> <span class=\"nx\">api</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">AppApi</span><span class=\"p\">();</span>\n\n<span class=\"nx\">api</span><span class=\"p\">.</span><span class=\"nx\">greet</span><span class=\"p\">(</span><span class=\"nx\">greetingRequest</span><span class=\"p\">).</span><span class=\"nx\">then</span><span class=\"p\">((</span><span class=\"nx\">axiosResponse</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">dispatchResponse</span><span class=\"p\">(</span><span class=\"nx\">axiosResponse</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">);</span>\n<span class=\"p\">}).</span><span class=\"k\">catch</span><span class=\"p\">((</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">dispatch</span><span class=\"p\">({</span> <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">UPDATE_MESSAGE</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"na\">value</span><span class=\"p\">:</span> <span class=\"nb\">String</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n</div>\n\n<p>インテリセンスがちゃんと効いてます</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/0a7ffbd907f3a954d78c8472e86eaa8cf08c51b4/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3130363235392f33373936313532332d623965332d666334362d336230652d3761393666626262656566612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2F37961523-b9e3-fc46-3b0e-7a96fbbbeefa.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=3eb3c344dd9a1aa6215a211754bcc60f\" alt=\"インテリセンス\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/37961523-b9e3-fc46-3b0e-7a96fbbbeefa.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2F37961523-b9e3-fc46-3b0e-7a96fbbbeefa.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=52b16a31ec534d6cad58c1279483fb55 1x\" loading=\"lazy\"></a></p>\n\n<p>入力エラー（値が空 or 下品な言葉が入力されている）をサーバサイドで検証し、エラーの場合はフロントエンドにてメッセージを編集します</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/ada15f54c975345b758ec520b421b0a3e09c5c64/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3130363235392f62356361356334392d333261312d383238332d393061362d3838306232666363623663312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2Fb5ca5c49-32a1-8283-90a6-880b2fccb6c1.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=7b598a2840db236d0bf05128d0f64042\" alt=\"入力エラー\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/b5ca5c49-32a1-8283-90a6-880b2fccb6c1.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2Fb5ca5c49-32a1-8283-90a6-880b2fccb6c1.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=3f650f68a67cca8473e75ecb1fc2cdd8 1x\" loading=\"lazy\"></a></p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">Response</span></div>\n<div class=\"highlight\"><pre><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"message\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">null</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"errors\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n    </span><span class=\"p\">{</span><span class=\"w\">\n      </span><span class=\"nl\">\"type\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"EmptyNameError\"</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"parameter\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"LastName\"</span><span class=\"w\">\n    </span><span class=\"p\">},</span><span class=\"w\">\n    </span><span class=\"p\">{</span><span class=\"w\">\n      </span><span class=\"nl\">\"type\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"VulgarNameError\"</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"parameter\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"FirstName\"</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"vulgarWord\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"shit\"</span><span class=\"w\">\n    </span><span class=\"p\">}</span><span class=\"w\">\n  </span><span class=\"p\">]</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div>\n</div>\n\n<p>エラーメッセージ編集のサンプルは以下になります<br>\nこのコードだけではわかりづらいですが、 <code>type</code> も <code>parameter</code> も型付けされており、また <a href=\"https://typescript-jp.gitbook.io/deep-dive/type-system/typeguard\" rel=\"nofollow noopener\" target=\"_blank\">型ガード</a> の効果により <code>VulgarNameError</code> の判定文の中では <code>vulgarWord</code> が参照できています🌿</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">エラーメッセージ設定サンプル（フロントエンド）</span></div>\n<div class=\"highlight\"><pre><code><span class=\"kd\">const</span> <span class=\"nx\">dispatchResponse</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">response</span><span class=\"p\">:</span> <span class=\"nx\">GreetResponse</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// メッセージが返却された場合はそれを設定</span>\n    <span class=\"nx\">dispatch</span><span class=\"p\">({</span> <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">UPDATE_MESSAGE</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"na\">value</span><span class=\"p\">:</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">message</span> <span class=\"p\">});</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// されなかった場合は、エラーオブジェクトに合わせて設定</span>\n    <span class=\"kd\">const</span> <span class=\"na\">messages</span><span class=\"p\">:</span> <span class=\"nb\">Array</span><span class=\"o\">&lt;</span><span class=\"kr\">string</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">const</span> <span class=\"nx\">error</span> <span class=\"k\">of</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">errors</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"kd\">type</span> <span class=\"o\">===</span> <span class=\"dl\">'</span><span class=\"s1\">EmptyNameError</span><span class=\"dl\">'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">parameter</span> <span class=\"o\">===</span> <span class=\"dl\">'</span><span class=\"s1\">LastName</span><span class=\"dl\">'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"nx\">messages</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">・名前は空にできません</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">parameter</span> <span class=\"o\">===</span> <span class=\"dl\">'</span><span class=\"s1\">FirstName</span><span class=\"dl\">'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"nx\">messages</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">・苗字は空にできません</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"kd\">type</span> <span class=\"o\">===</span> <span class=\"dl\">'</span><span class=\"s1\">VulgarNameError</span><span class=\"dl\">'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">parameter</span> <span class=\"o\">===</span> <span class=\"dl\">'</span><span class=\"s1\">LastName</span><span class=\"dl\">'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"nx\">messages</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"s2\">`・名前に </span><span class=\"p\">${</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">vulgarWord</span><span class=\"p\">}</span><span class=\"s2\"> は設定できません`</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">parameter</span> <span class=\"o\">===</span> <span class=\"dl\">'</span><span class=\"s1\">FirstName</span><span class=\"dl\">'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"nx\">messages</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"s2\">`・苗字に </span><span class=\"p\">${</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">vulgarWord</span><span class=\"p\">}</span><span class=\"s2\"> は設定できません`</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">dispatch</span><span class=\"p\">({</span> <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">UPDATE_MESSAGE</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"na\">value</span><span class=\"p\">:</span> <span class=\"nx\">messages</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"dl\">''</span><span class=\"p\">)</span> <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div>\n</div>\n\n<p>一つ残念なのは、現時点でのOpenAPIv3ではパラメータ上でリテラル値を表現できないため、（<a href=\"https://swagger.io/docs/specification/describing-parameters/\" rel=\"nofollow noopener\" target=\"_blank\">こちらのConstant Parametersの項のように、単一のメンバを持つEnumとして定義する必要あり</a>）<br>\n上記の型ガードを実現するにあたり、 <code>type</code> を <code>'EmptyNameError' | 'VulgarNameError'</code> のようなstringのUnion型では定義できず、自動生成されるコードは <code>EmptyNameErrorTypeEnum | VulgarNameErrorTypeEnum</code> のような形になるため、インテリセンスを効かせることができずにいます<br>\n値の検証は正しくできるため、これでも問題はないですが...<br>\n（私の理解不足なだけで、いいやり方ができる気はものすごくします🙃）</p>\n\n<p>あと、今回は本旨から外れるため割愛していますが、項目毎のバリデーションについては<a href=\"https://docs.nestjs.com/techniques/validation#validation\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a>を使うといい感じにできるので、併せて導入をオススメします</p>\n\n<h1>\n<span id=\"まとめ\" class=\"fragment\"></span><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"><i class=\"fa fa-link\"></i></a>まとめ</h1>\n\n<p>ひとついい実装パターンが作れた気がするので、他のやり方（先ほど説明したGraphQLや、<a href=\"https://github.com/frouriojs/frourio\" rel=\"nofollow noopener\" target=\"_blank\">frourio</a>なんかもそうなんでしょうか？）についても挑戦していきたいと思います！</p>\n",
      "body": "こちらは、[TypeScript Advent Calendar 2020](https://qiita.com/advent-calendar/2020/typescript) 14日目の記事になります！\n\n# はじめに\n\n最近、個人での開発にてTypeScriptを選定することが多くなり、その中で [NestJS](https://nestjs.com/) を使ってバックエンドのAPIを構築する機会があったのですが、\nフロントエンド（[Nuxt.js](https://ja.nuxtjs.org/)で作ったSPA）との通信について、割といい感じに作れた気がしたので、備忘録として残したいと思います✍️\n\n# どんなものを作るか\n\nWebアプリのフロントエンドとバックエンド間での通信として、以下のことを実現したいという気持ちがありました\n\n- `リクエスト/レスポンスに型付け` したい💪\n    - フロント/バックエンド双方のTSで、InterfaceなりClassなりに値が詰められたDTOを扱いたい\n    - バックエンド側で定義した型をフロント側でも使いたい\n        - I/Fの更新をフロント側からいい感じに取り込みたい\n- フロントのコード上で`APIであることを意識したくない` 🪨\n    - パスとかHTTPメソッドとかは隠蔽して、TS上では関数呼び出しで使いたい\n    - ただし、Cookieによるセッション管理や環境毎にリクエスト先のドメインを分けるなど、必要があればHTTP上の挙動をカスタマイズしたい\n- `バリデーションや業務エラーを返却` したい🐟\n    - 項目毎のバリデーションをしたい\n        - フロントでもよしなにやるが、特にバックエンド側で期待しないリクエストを受けたらエラーとしたい\n    - 業務エラーをいい感じに返却したい\n        - IDに紐づくオブジェクトがDBから取れなかった...とか\n        - 1回のリクエストに対してN個の業務エラーを返したい\n            - 返された業務エラーをフロント側で識別し、処理（エラー表示、無視など）をおこないたい\n    - ネットワークエラー等は例外でコントロールしたい\n\n上記の実現にあたりNestJSの公式ドキュメントをみていくと、 [OpenAPI](https://docs.nestjs.com/openapi/introduction) の章の記述が役立ちそうですが、\nやってくれるのはOpenAPIの定義を生成してくれるところまでなので、そこからAPIクライアントの作成と、フロントエンド側からの読み込みをどのように行うか検討しました\n\nなお、本アドベントカレンダーでも型安全な通信の方法として [GraphQLを使ったパターン](https://qiita.com/mikan3rd/items/3f46b1edcb79ad63deef) を書かれている方がいますので、併せてご覧いただくと比較ができるかもしれません\n（私は、開発時にGraphQLに対する知見がなかったのと、作りたいものに対してオーバースペック気味に感じたため今回は採用を見送りました）\n\n# 作ったもの\n\nソースコードは以下になります🍔\nサンプルになりそうな部分のみ抜き出しています\nhttps://github.com/yktakaha4/nestjs-typed-client\n\n`/backend` にNestJSで作ったバックエンド、 `/frontend` にReactで作ったフロントエンドのサンプルアプリケーションを格納しています\n実際に作ったものでは別々のリポジトリにて管理していますが、今回は簡便のためひとつにまとめました\n\nクライアントの生成からフロントエンドの取り込みを図にしたものは以下になります🦑\nグレーの点線がソースコードの関連、オレンジの点線が実際の通信の関連のイメージです\n\n![archtecture.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/f67d6809-04e5-7323-3167-65d24a3787d3.png)\n\n流れはこんな感じになります\nなお、今回は 2.で生成するクライアントに `typescript-axios` を選択しましたが、 [こちら](https://github.com/OpenAPITools/openapi-generator/tree/master/docs/generators#client-generators) に記載されているものから任意に選択可能です\n\n1. NestJSにて [@nestjs/swagger](https://github.com/nestjs/swagger) にてアノテートしたDTOとエンドポイントを定義し、OpenAPIのyamlファイルを生成する\n2. [@openapitools/openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) にて、1.で作成したyamlファイルからTypeScriptのAPIクライアントを生成する\n3. GitHub Actionsを用いて、tagがpushされた（≒Releaseを作成した）時、APIクライアントをtscにてビルドし `GitHub Packages Registry` に登録する\n4. フロントエンドから `npm install @xxxxx/sample-backend-client` の形で読み込んで利用する\n\n## アノテートしたDTOとエンドポイントの定義\n\nバックエンド側で以下のようにリクエスト、レスポンスを定義します\n長くなるので一部のみ抜粋しますが、エラークラスは[こちら](https://github.com/yktakaha4/nestjs-typed-client/blob/master/backend/src/app.error.ts)のように定義しています\n\n```typescript:エラークラスの定義（バックエンド）\nexport class EmptyNameError {\n  // 空の名前を示すエラーオブジェクト\n\n  @ApiProperty({ enum: EmptyNameErrorType })\n  readonly type = EmptyNameErrorType.Value;\n\n  @ApiProperty({ enum: GreetParameter })\n  readonly parameter: GreetParameter;\n\n  constructor(parameter: GreetParameter) {\n    this.parameter = parameter;\n  }\n}\n\nexport class VulgarNameError {\n  // 下品な名前を示すエラーオブジェクト\n\n  @ApiProperty({ enum: VulgarNameErrorType })\n  readonly type = VulgarNameErrorType.Value;\n\n  @ApiProperty({ enum: GreetParameter })\n  readonly parameter: GreetParameter;\n\n  @ApiProperty()\n  readonly vulgarWord: string;\n\n  constructor(parameter: GreetParameter, vulgarWord: string) {\n    this.parameter = parameter;\n    this.vulgarWord = vulgarWord;\n  }\n}\n\nexport type GreetErrors = Array<EmptyNameError | VulgarNameError>;\n```\n\n```typescript:クラスへのアノテーション（バックエンド）\nexport class GreetRequest {\n  @ApiProperty()\n  readonly lastName: string;\n\n  @ApiProperty()\n  readonly firstName: string;\n\n  constructor(lastName: string, firstName: string) {\n    this.lastName = lastName;\n    this.firstName = firstName;\n  }\n}\n\n@ApiExtraModels(EmptyNameError, VulgarNameError)\nexport class GreetResponse {\n  @ApiProperty({ type: String, nullable: true })\n  readonly message: string | null;\n\n  @ApiProperty({\n    type: 'array',\n    items: { oneOf: greetErrorSchemaPaths },\n  })\n  readonly errors: GreetErrors;\n\n  constructor(message: string | null, errors: GreetErrors) {\n    this.message = message;\n    this.errors = errors;\n  }\n}\n```\n\nエンドポイントのサンプルです\n`@ApiOkResponse` によってアノテートしたDTOを指定します。 `@ApiOperation` でクライアントに生成されるメソッド名を指定できます\n\n```typescript:エンドポイント（バックエンド）\n@ApiTags('App')\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @ApiOkResponse({ type: GreetResponse })\n  @ApiOperation({ operationId: 'greet' })\n  @Post('greet')\n  @HttpCode(200)\n  greet(@Body() request: GreetRequest): GreetResponse {\n    // 入力チェック\n    const errors = this.appService.validateGreetRequest(request);\n\n    let message: string | null = null;\n    if (errors.length === 0) {\n      // エラーなしの場合のみメッセージを取得\n      message = this.appService.getGreetingMessage(request);\n    }\n\n    return new GreetResponse(message, errors);\n  }\n}\n```\n\nNestJSのコードからyamlファイルを生成する方法は[こちら](https://qiita.com/yktakaha4/items/97ea169ed97dbcdd25fb) でも説明しています\nコマンドは以下\n\n```terminal\n$ cd ./backend\n$ npm run openapi:export\n```\n\n## yamlファイルからクライアント生成\n\nバックエンドのコードとパッケージを分けるため、 `./backend/client` 配下にnpmパッケージ用の一式を格納しています\n\n```terminal\n$ cd ./backend/client\n$ npm ci\n$ npm run generate\n$ npm run build\n\n# run generate時に実行されるコマンド\n# オプション等は以下参照\n# https://github.com/OpenAPITools/openapi-generator/blob/master/docs/generators/typescript-axios.md\n# JAVA_OPTS=\"-Dlog.level=warn\" openapi-generator generate -i sample-backend.yml -o lib/ -g typescript-axios --api-package=api --model-package=models --additional-properties=supportsES6=true,withSeparateModelsAndApi=true\n```\n\n## npmパッケージ公開\n\nGitHub Actionsにて、 `client.*` という形式のタグが打たれたら以下ワークフローを実行するようにします\nnpm publish時に、生成したパッケージのバージョン名を一意にする必要があるので、今回は[こちら](https://github.com/yktakaha4/nestjs-typed-client/blob/master/backend/client/set-package-version.js)のスクリプトを使って実現しています\n今回は、クライアント側で読み込んでいるバージョンの一意性を保証できれば十分だったので、セマンティックバージョニングは考慮せずに、 `0.0.1-${タグ名}` の形式で公開するようにしました\n\nちなみに、トークンについては、GitHub Actionsがデフォルトで指定してくれるもので問題ありません\n（プライベートリポジトリの場合、パッケージの読み込みを行う側でパッケージの読み込み権限のあるアクセストークンの発行が必要になります）\n\n```yaml:publish-client.yml\nname: Publish client\n\non:\n  push:\n    tags:\n      - client.*\n\njobs:\n  publish:\n    name: Publish client\n    runs-on: ubuntu-18.04\n    timeout-minutes: 3\n    steps:\n      - uses: actions/checkout@v2\n\n      - uses: actions/setup-node@v1\n        with:\n          node-version: 12.x\n          registry-url: https://npm.pkg.github.com/\n          scope: \"@yktakaha4\"\n\n      - run: npm ci\n        working-directory: ./backend\n\n      - run: npm run openapi:export\n        working-directory: ./backend\n\n      - run: npm ci\n        working-directory: ./backend/client\n\n      - run: npm run version $GH_REF\n        working-directory: ./backend/client\n        env:\n          GH_REF: ${{ github.ref }}\n\n      - run: npm publish\n        working-directory: ./backend/client\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```\n\n上記に基づいて生成されたnpmパッケージは、[こちら](https://github.com/yktakaha4/nestjs-typed-client/packages/) にて公開されます\n\n# Demo\n\n以下の方法で起動できます\nバックエンドは `localhost:3100`、フロントエンドは `localhost:3000` で起動します\n\n```terminal:ターミナル\n# バックエンドを起動\n$ cd ./backend\n$ npm ci\n$ npm run start\n\n# フロントエンドを起動（別ターミナルにて）\n$ cd ./frontend\n$ yarn install\n$ yarn start\n```\n\nテキストボックスに苗字、名前を入力して `Greet` ボタンを押すと、挨拶が返却されます👋\n\n![名前を入力](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/038f1105-8a75-ed5b-a9b0-80be97db3482.png)\n\nリクエストとレスポンスはそれぞれこんな感じのものが送受されます\n\n```json:Request\n{\n  \"lastName\": \"yuuki\",\n  \"firstName\": \"takahashi\"\n}\n```\n\n```json:Response\n{\n  \"message\": \"Hello, Yuuki TAKAHASHI !\",\n  \"errors\": []\n}\n```\n\nフロントエンドからのAPI呼び出しはこんな感じになります\n\n```typescript:呼び出しサンプル（フロントエンド）\n// AppApiクラスは npmパッケージからインポートしたもの（自動生成）\nconst api = new AppApi();\n\napi.greet(greetingRequest).then((axiosResponse) => {\n  dispatchResponse(axiosResponse.data);\n}).catch((error) => {\n  dispatch({ type: 'UPDATE_MESSAGE', value: String(error) });\n});\n```\n\nインテリセンスがちゃんと効いてます\n\n![インテリセンス](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/37961523-b9e3-fc46-3b0e-7a96fbbbeefa.png)\n\n入力エラー（値が空 or 下品な言葉が入力されている）をサーバサイドで検証し、エラーの場合はフロントエンドにてメッセージを編集します\n\n![入力エラー](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/b5ca5c49-32a1-8283-90a6-880b2fccb6c1.png)\n\n```json:Response\n{\n  \"message\": null,\n  \"errors\": [\n    {\n      \"type\": \"EmptyNameError\",\n      \"parameter\": \"LastName\"\n    },\n    {\n      \"type\": \"VulgarNameError\",\n      \"parameter\": \"FirstName\",\n      \"vulgarWord\": \"shit\"\n    }\n  ]\n}\n```\n\nエラーメッセージ編集のサンプルは以下になります\nこのコードだけではわかりづらいですが、 `type` も `parameter` も型付けされており、また [型ガード](https://typescript-jp.gitbook.io/deep-dive/type-system/typeguard) の効果により `VulgarNameError` の判定文の中では `vulgarWord` が参照できています🌿\n\n```typescript:エラーメッセージ設定サンプル（フロントエンド）\nconst dispatchResponse = (response: GreetResponse) => {\n  if (response.message) {\n    // メッセージが返却された場合はそれを設定\n    dispatch({ type: 'UPDATE_MESSAGE', value: response.message });\n  } else {\n    // されなかった場合は、エラーオブジェクトに合わせて設定\n    const messages: Array<string> = [];\n    for (const error of response.errors) {\n      if (error.type === 'EmptyNameError') {\n        if (error.parameter === 'LastName') {\n          messages.push('・名前は空にできません');\n        } else if (error.parameter === 'FirstName') {\n          messages.push('・苗字は空にできません');\n        }\n      } else if (error.type === 'VulgarNameError') {\n        if (error.parameter === 'LastName') {\n          messages.push(`・名前に ${error.vulgarWord} は設定できません`);\n        } else if (error.parameter === 'FirstName') {\n          messages.push(`・苗字に ${error.vulgarWord} は設定できません`);\n        }\n      }\n    }\n\n    dispatch({ type: 'UPDATE_MESSAGE', value: messages.join('') });\n  }\n};\n```\n\n一つ残念なのは、現時点でのOpenAPIv3ではパラメータ上でリテラル値を表現できないため、（[こちらのConstant Parametersの項のように、単一のメンバを持つEnumとして定義する必要あり](https://swagger.io/docs/specification/describing-parameters/)）\n上記の型ガードを実現するにあたり、 `type` を `'EmptyNameError' | 'VulgarNameError'` のようなstringのUnion型では定義できず、自動生成されるコードは `EmptyNameErrorTypeEnum | VulgarNameErrorTypeEnum` のような形になるため、インテリセンスを効かせることができずにいます\n値の検証は正しくできるため、これでも問題はないですが...\n（私の理解不足なだけで、いいやり方ができる気はものすごくします🙃）\n\nあと、今回は本旨から外れるため割愛していますが、項目毎のバリデーションについては[こちら](https://docs.nestjs.com/techniques/validation#validation)を使うといい感じにできるので、併せて導入をオススメします\n\n# まとめ\n\nひとついい実装パターンが作れた気がするので、他のやり方（先ほど説明したGraphQLや、[frourio](https://github.com/frouriojs/frourio)なんかもそうなんでしょうか？）についても挑戦していきたいと思います！\n",
      "coediting": false,
      "comments_count": 0,
      "created_at": "2020-12-10T03:06:46+09:00",
      "group": null,
      "id": "0aecde44848d6a861bf5",
      "likes_count": 17,
      "private": false,
      "reactions_count": 0,
      "stocks_count": 11,
      "tags": [
        {
          "name": "npm",
          "versions": []
        },
        {
          "name": "TypeScript",
          "versions": []
        },
        {
          "name": "OpenAPI",
          "versions": []
        },
        {
          "name": "NestJS",
          "versions": []
        },
        {
          "name": "GitHubActions",
          "versions": []
        }
      ],
      "title": "NestJS + OpenAPI(Swagger)からAPIクライアントを生成し型安全に通信する",
      "updated_at": "2020-12-14T07:03:00+09:00",
      "url": "https://qiita.com/yktakaha4/items/0aecde44848d6a861bf5",
      "user": {
        "description": "",
        "facebook_id": "",
        "followees_count": 26,
        "followers_count": 23,
        "github_login_name": "yktakaha4",
        "id": "yktakaha4",
        "items_count": 27,
        "linkedin_id": "",
        "location": "",
        "name": "Yuuki Takahashi",
        "organization": "LAPRAS株式会社",
        "permanent_id": 106259,
        "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/profile-images/1600489516",
        "team_only": false,
        "twitter_screen_name": "yktakaha4",
        "website_url": "https://yktakaha4.github.io/"
      },
      "page_views_count": null,
      "team_membership": null,
      "organization_url_name": null,
      "slide": false
    },
    {
      "rendered_body": "<p>ひじょーにしょうもないことだが、またいつか使う気がしたのですかさずmemo✍️</p>\n\n<p>シークレットの欄をコピー</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/7b84e16cb9fec7af76f0719a3fbd33e05df4871c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3130363235392f35323962663565342d646539342d376463652d656139372d6439383032646664323839302e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2F529bf5e4-de94-7dce-ea97-d9802dfd2890.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=6625c324765becf901e5de8b97059dac\" alt=\"Secrets Manager 2020-11-08 17-48-01(1).png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/529bf5e4-de94-7dce-ea97-d9802dfd2890.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2F529bf5e4-de94-7dce-ea97-d9802dfd2890.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=74ad9e6121e69446e7db6ca7e7d083ce 1x\" loading=\"lazy\"></a></p>\n\n<p>ターミナルで以下<br>\n <code>.envrc</code> に貼り付けるなりする</p>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><code><span class=\"gp\">$</span><span class=\"w\"> </span>pbpaste | <span class=\"nb\">awk</span> <span class=\"s1\">'{print \"export \"toupper($1)\"=\"$2}'</span> | <span class=\"nb\">sort</span>\n<span class=\"go\">export XXXXXXX=abcdef\n略\n</span></code></pre></div></div>\n",
      "body": "ひじょーにしょうもないことだが、またいつか使う気がしたのですかさずmemo✍️\n\nシークレットの欄をコピー\n\n![Secrets Manager 2020-11-08 17-48-01(1).png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/529bf5e4-de94-7dce-ea97-d9802dfd2890.png)\n\nターミナルで以下\n `.envrc` に貼り付けるなりする\n\n```terminal\n$ pbpaste | awk '{print \"export \"toupper($1)\"=\"$2}' | sort\nexport XXXXXXX=abcdef\n略\n```\n\n",
      "coediting": false,
      "comments_count": 0,
      "created_at": "2020-11-08T17:56:17+09:00",
      "group": null,
      "id": "27e5e6acce55e5bcaf7f",
      "likes_count": 0,
      "private": false,
      "reactions_count": 0,
      "stocks_count": 0,
      "tags": [
        {
          "name": "AWS",
          "versions": []
        }
      ],
      "title": "Secrets Managerのシークレットを.envrcにコピーする",
      "updated_at": "2020-11-08T17:56:17+09:00",
      "url": "https://qiita.com/yktakaha4/items/27e5e6acce55e5bcaf7f",
      "user": {
        "description": "",
        "facebook_id": "",
        "followees_count": 26,
        "followers_count": 23,
        "github_login_name": "yktakaha4",
        "id": "yktakaha4",
        "items_count": 27,
        "linkedin_id": "",
        "location": "",
        "name": "Yuuki Takahashi",
        "organization": "LAPRAS株式会社",
        "permanent_id": 106259,
        "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/profile-images/1600489516",
        "team_only": false,
        "twitter_screen_name": "yktakaha4",
        "website_url": "https://yktakaha4.github.io/"
      },
      "page_views_count": null,
      "team_membership": null,
      "organization_url_name": null,
      "slide": false
    },
    {
      "rendered_body": "\n<h1>\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n\n<p>開発しているWebアプリケーションにて、<a href=\"https://stripe.com/jp/payments/elements\" rel=\"nofollow noopener\" target=\"_blank\">Stripe Elements</a>を用いたクレジットカード情報入力機能💳を実装したのですが、<br>\n<a href=\"https://github.com/cypress-io/cypress\" rel=\"nofollow noopener\" target=\"_blank\">Cypress</a>を用いてE2Eテストを作成する際に少し考慮が必要だったので、備忘として残します✍️</p>\n\n<h1>\n<span id=\"ハマりポイント\" class=\"fragment\"></span><a href=\"#%E3%83%8F%E3%83%9E%E3%82%8A%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88\"><i class=\"fa fa-link\"></i></a>ハマりポイント</h1>\n\n<p><a href=\"https://github.com/stripe/stripe-js\" rel=\"nofollow noopener\" target=\"_blank\">stripe-js</a>を用いて、こんな感じのコードからカード番号入力要素を作成しました<br>\nなお、アプリはVuetify + Nuxt.jsでできているのですが、Cypressサイドからはあまり関係のないことなのでガッツリと割愛します🍛</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">StripeElementsの実装イメージ</span></div>\n<div class=\"highlight\"><pre><code><span class=\"c1\">// 諸々を定義</span>\n<span class=\"c1\">// 本旨から逸れるので割愛</span>\n<span class=\"kd\">const</span> <span class=\"nx\">clientSecret</span> <span class=\"o\">=</span> <span class=\"dl\">'</span><span class=\"s1\">xxxxx</span><span class=\"dl\">'</span>\n<span class=\"kd\">const</span> <span class=\"nx\">stripe</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">getStripe</span><span class=\"p\">()</span>\n\n<span class=\"c1\">// カード番号を入力する要素を生成</span>\n<span class=\"kd\">const</span> <span class=\"nx\">elements</span> <span class=\"o\">=</span> <span class=\"nx\">stripe</span><span class=\"p\">.</span><span class=\"nx\">elements</span><span class=\"p\">()</span>\n<span class=\"kd\">const</span> <span class=\"nx\">card</span> <span class=\"o\">=</span> <span class=\"nx\">elements</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">card</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"na\">hidePostalCode</span><span class=\"p\">:</span> <span class=\"kc\">true</span>\n<span class=\"p\">})</span>\n\n<span class=\"c1\">// blurイベント発生時に処理実施</span>\n<span class=\"nx\">card</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">blur</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// コントロールを入力不可とする</span>\n  <span class=\"nx\">card</span><span class=\"p\">.</span><span class=\"nx\">update</span><span class=\"p\">({</span> <span class=\"na\">disabled</span><span class=\"p\">:</span> <span class=\"kc\">true</span> <span class=\"p\">})</span>\n\n  <span class=\"nx\">stripe</span><span class=\"p\">.</span><span class=\"nx\">confirmCardPayment</span><span class=\"p\">(</span><span class=\"nx\">clientSecret</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n    <span class=\"na\">payment_method</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nx\">card</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}).</span><span class=\"nx\">then</span><span class=\"p\">((</span><span class=\"nx\">confirmResult</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">confirmResult</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// エラーありの場合、入力完了を示すアラートを表示</span>\n      <span class=\"c1\">// 割愛</span>\n\n      <span class=\"c1\">// コントロールを再度入力可能とする</span>\n      <span class=\"nx\">card</span><span class=\"p\">.</span><span class=\"nx\">update</span><span class=\"p\">({</span> <span class=\"na\">disabled</span><span class=\"p\">:</span> <span class=\"kc\">false</span> <span class=\"p\">})</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// エラーなしの場合、画面項目を編集不可とする</span>\n      <span class=\"c1\">// 割愛</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}).</span><span class=\"k\">catch</span><span class=\"p\">((</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// システムエラーの場合</span>\n    <span class=\"c1\">// 割愛</span>\n  <span class=\"p\">})</span>\n<span class=\"p\">})</span>\n\n<span class=\"c1\">// IdがCardNoの要素の配下にマウント</span>\n<span class=\"nx\">card</span><span class=\"p\">.</span><span class=\"nx\">mount</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">#CardNo</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n</code></pre></div>\n</div>\n\n<p>上記のコードより、以下のようなDOMが生成されます🌲<br>\nポイントは、カード番号を入力するinput要素が、Stripeによって生成されたiframeの中にある...というところでしょうか</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/b4c7b189d52bf760b7a420dedc14aff6268bdb18/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3130363235392f30643639303161322d383132642d313335622d363266322d6338343933363062393664312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2F0d6901a2-812d-135b-62f2-c849360b96d1.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=81d6497fc0726f9327677a15c0e4d3b7\" alt=\"devtool.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/0d6901a2-812d-135b-62f2-c849360b96d1.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2F0d6901a2-812d-135b-62f2-c849360b96d1.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=030b449f71715fef6571602fbaa3964a 1x\" loading=\"lazy\"></a></p>\n\n<p>本来ならば、カード情報の入力が別ドメイン(Stripe)のiframeに隔離されていることで安全に利用できるものになりますが、<br>\n安全すぎてCypressからDOMにアクセスできず、テストカード番号の入力ができません</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>  1) トップページ -&gt; 検索 -&gt; カートに入れる -&gt; 注文情報入力 -&gt; 購入:\n     SecurityError: Blocked a frame with origin \"http://localhost\" from accessing a cross-origin frame.\n</code></pre></div></div>\n\n<p>また、Cypressから要素をいじっている影響からか、ライブラリ内？で未キャッチの例外が発生し、それに引きずられてテストケースも落ちてしまいます<br>\n理由を調べたいところではありますが、セキュリティ上の観点からStripeのクライアント実装のソースコードは公開されておらず(stripe-jsはただのラッパー&amp;型定義)、なんとも言えない感じです...</p>\n\n<p>何がしかの理由で <code>confirmCardPayment</code> が複数回呼ばれてしまっているようですが、<br>\nプロダクトコードでは非活性化等は考慮しており、自動テスト上でのみ発生する事象のため、問題なさそうなら見て見ぬフリを決め込みたいところです🙈</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>  1) トップページ -&gt; 検索 -&gt; カートに入れる -&gt; 注文情報入力 -&gt; 購入:\n     IntegrationError: The following error originated from your application code, not from Cypress.\n\n  &gt; You have an in-flight confirmCardPayment! Please be sure to disable your form submit button when confirmCardPayment is called.\n\nWhen Cypress detects uncaught errors originating from your application it will automatically fail the current test.\n\nThis behavior is configurable, and you can choose to turn this off by listening to the `uncaught:exception` event.\n\nhttps://on.cypress.io/uncaught-exception-from-application\n</code></pre></div></div>\n\n<h1>\n<span id=\"作ったもの\" class=\"fragment\"></span><a href=\"#%E4%BD%9C%E3%81%A3%E3%81%9F%E3%82%82%E3%81%AE\"><i class=\"fa fa-link\"></i></a>作ったもの</h1>\n\n<p>というところでしたが、<br>\n対処療法的な形で以下のように自動テストを修正し、無事動かせるようになりました🙄</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">テストコードのイメージ</span></div>\n<div class=\"highlight\"><pre><code><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">トップページ -&gt; 検索 -&gt; カートに入れる -&gt; 注文情報入力 -&gt; 購入</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">options</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"na\">timeout</span><span class=\"p\">:</span> <span class=\"mi\">10000</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"c1\">// 他のシナリオは割愛</span>\n\n  <span class=\"c1\">// クレジットカード情報を設定</span>\n  <span class=\"c1\">// Stripe起因で発生する特定のエラーを無視する</span>\n  <span class=\"nx\">cy</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">uncaught:exception</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"sr\">/You have an in-flight confirmCardPayment/gi</span><span class=\"p\">.</span><span class=\"nx\">test</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"kc\">false</span>\n    <span class=\"p\">}</span>\n    <span class=\"c1\">// 他のエラーは無視しない</span>\n    <span class=\"k\">return</span> <span class=\"kc\">true</span>\n  <span class=\"p\">})</span>\n\n  <span class=\"c1\">// 読み込みを確認</span>\n  <span class=\"nx\">cy</span><span class=\"p\">.</span><span class=\"nx\">frameLoaded</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">#CardNo iframe</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n\n  <span class=\"c1\">// カード番号・有効期限・セキュリティコードを入力</span>\n  <span class=\"nx\">cy</span><span class=\"p\">.</span><span class=\"nx\">iframe</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">#CardNo iframe</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n    <span class=\"c1\">// カード番号のinputを選択</span>\n    <span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">input[placeholder=\"カード番号\"]</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n    <span class=\"c1\">// 各inputに値をフル桁入力すると、自動的に次のinputにフォーカスされるのでありがたく利用する</span>\n    <span class=\"p\">.</span><span class=\"kd\">type</span><span class=\"p\">([</span><span class=\"dl\">'</span><span class=\"s1\">4242424242424242</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">01</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">50</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">123</span><span class=\"dl\">'</span><span class=\"p\">].</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"dl\">''</span><span class=\"p\">))</span>\n\n  <span class=\"c1\">// Stripeのレスポンスを確認</span>\n  <span class=\"nx\">cy</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">#CardNo</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n    <span class=\"c1\">// 他の要素を適当にクリックし、blurイベントを発火させる</span>\n    <span class=\"p\">.</span><span class=\"nx\">click</span><span class=\"p\">()</span>\n    <span class=\"c1\">// waitUntil()は `cypress-wait-until` というプラグインのものですが割愛</span>\n    <span class=\"p\">.</span><span class=\"nx\">waitUntil</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">cy</span><span class=\"p\">.</span><span class=\"nx\">contains</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">お支払い情報を確認しました</span><span class=\"dl\">'</span><span class=\"p\">),</span> <span class=\"nx\">options</span><span class=\"p\">)</span>\n\n  <span class=\"c1\">// 他のシナリオは割愛</span>\n<span class=\"p\">})</span>\n</code></pre></div>\n</div>\n\n<p>まず、iframeに対するクロスオリジンアクセスについては、 <code>cypress.json</code> に以下の設定を追加すると動作するようになりました🧐</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">cypress.json</span></div>\n<div class=\"highlight\"><pre><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"chromeWebSecurity\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div>\n</div>\n\n<p>実装としては多分<a href=\"https://github.com/cypress-io/cypress/blob/develop/packages/server/lib/browsers/chrome.ts#L359-L362\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a>で、恐らくにはそれぞれ以下の意味と思われますが、テストコードなのでこれ以上の深追いはやめました...</p>\n\n<ul>\n<li><a href=\"https://github.com/chromium/chromium/blob/master/content/public/common/content_switches.cc#L283-L284\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://github.com/chromium/chromium/blob/master/content/public/common/content_switches.cc#L283-L284</a></li>\n<li><a href=\"https://github.com/chromium/chromium/blob/master/chrome/common/chrome_switches.cc#L43-L45\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://github.com/chromium/chromium/blob/master/chrome/common/chrome_switches.cc#L43-L45</a></li>\n</ul>\n\n<p>その上で、Cypressからiframe配下のコンテンツへのアクセスを楽にしてくれる<a href=\"https://gitlab.com/kgroat/cypress-iframe\" rel=\"nofollow noopener\" target=\"_blank\">cypress-iframe</a>というプラグインを公開されている方がいたので、こちらを利用しました<br>\n<code>cy.frameLoaded()</code> で対象のiframeの読み込み確認、 <code>cy.iframe()</code> で対象のiframeの取得がおこなえます</p>\n\n<p>Stripe起因の未キャッチ例外については、<br>\n<code>cy.on()</code> を用いて例外メッセージをチェックし、今回見なかったことにしたい例外だった場合のみ無視することにしました🐞<br>\nこれ以外の例外が発生し、それが自動テスト環境に限られる場合は、無視対象を増やして対応するとよいかも🐝<br>\nもっとも、こちらの問題については、私のコードの方に原因があるような気はします...</p>\n\n<p>オマケとして、テストシナリオが元気よく実行される様子を貼っておきます🏋️‍♀️</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/1ddd70a7c97dac9c31bfdfceed02db073dddc6ea/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3130363235392f31663431626338342d313266342d623264372d363733362d3630376336393139363136662e676966\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2F1f41bc84-12f4-b2d7-6736-607c6919616f.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=bf331588e511873b75b87177802f2259\" alt=\"index.ts.gif\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/1f41bc84-12f4-b2d7-6736-607c6919616f.gif\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2F1f41bc84-12f4-b2d7-6736-607c6919616f.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=5bcff9cd4f4f6b6fb77200a923db5642 1x\" loading=\"lazy\"></a></p>\n\n<p><code>動いてるからヨシ！</code> はほどほどに😾</p>\n\n<h1>\n<span id=\"参考文献\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE\"><i class=\"fa fa-link\"></i></a>参考文献</h1>\n\n<ul>\n<li><a href=\"https://www.cypress.io/blog/2020/02/12/working-with-iframes-in-cypress/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://www.cypress.io/blog/2020/02/12/working-with-iframes-in-cypress/</a></li>\n<li><a href=\"https://github.com/cypress-io/cypress/issues/987\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://github.com/cypress-io/cypress/issues/987</a></li>\n</ul>\n",
      "body": "# はじめに\n\n開発しているWebアプリケーションにて、[Stripe Elements](https://stripe.com/jp/payments/elements)を用いたクレジットカード情報入力機能💳を実装したのですが、\n[Cypress](https://github.com/cypress-io/cypress)を用いてE2Eテストを作成する際に少し考慮が必要だったので、備忘として残します✍️\n\n# ハマりポイント\n\n[stripe-js](https://github.com/stripe/stripe-js)を用いて、こんな感じのコードからカード番号入力要素を作成しました\nなお、アプリはVuetify + Nuxt.jsでできているのですが、Cypressサイドからはあまり関係のないことなのでガッツリと割愛します🍛\n\n```typescript:StripeElementsの実装イメージ\n// 諸々を定義\n// 本旨から逸れるので割愛\nconst clientSecret = 'xxxxx'\nconst stripe = await getStripe()\n\n// カード番号を入力する要素を生成\nconst elements = stripe.elements()\nconst card = elements.create('card', {\n  hidePostalCode: true\n})\n\n// blurイベント発生時に処理実施\ncard.on('blur', () => {\n  // コントロールを入力不可とする\n  card.update({ disabled: true })\n\n  stripe.confirmCardPayment(clientSecret, {\n    payment_method: {\n      card\n    }\n  }).then((confirmResult) => {\n    if (confirmResult.error) {\n      // エラーありの場合、入力完了を示すアラートを表示\n      // 割愛\n\n      // コントロールを再度入力可能とする\n      card.update({ disabled: false })\n    } else {\n      // エラーなしの場合、画面項目を編集不可とする\n      // 割愛\n    }\n  }).catch((error) => {\n    // システムエラーの場合\n    // 割愛\n  })\n})\n\n// IdがCardNoの要素の配下にマウント\ncard.mount('#CardNo')\n```\n\n上記のコードより、以下のようなDOMが生成されます🌲\nポイントは、カード番号を入力するinput要素が、Stripeによって生成されたiframeの中にある...というところでしょうか\n\n![devtool.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/0d6901a2-812d-135b-62f2-c849360b96d1.png)\n\n本来ならば、カード情報の入力が別ドメイン(Stripe)のiframeに隔離されていることで安全に利用できるものになりますが、\n安全すぎてCypressからDOMにアクセスできず、テストカード番号の入力ができません\n\n```\n  1) トップページ -> 検索 -> カートに入れる -> 注文情報入力 -> 購入:\n     SecurityError: Blocked a frame with origin \"http://localhost\" from accessing a cross-origin frame.\n```\n\nまた、Cypressから要素をいじっている影響からか、ライブラリ内？で未キャッチの例外が発生し、それに引きずられてテストケースも落ちてしまいます\n理由を調べたいところではありますが、セキュリティ上の観点からStripeのクライアント実装のソースコードは公開されておらず(stripe-jsはただのラッパー&型定義)、なんとも言えない感じです...\n\n何がしかの理由で `confirmCardPayment` が複数回呼ばれてしまっているようですが、\nプロダクトコードでは非活性化等は考慮しており、自動テスト上でのみ発生する事象のため、問題なさそうなら見て見ぬフリを決め込みたいところです🙈\n\n```\n  1) トップページ -> 検索 -> カートに入れる -> 注文情報入力 -> 購入:\n     IntegrationError: The following error originated from your application code, not from Cypress.\n\n  > You have an in-flight confirmCardPayment! Please be sure to disable your form submit button when confirmCardPayment is called.\n\nWhen Cypress detects uncaught errors originating from your application it will automatically fail the current test.\n\nThis behavior is configurable, and you can choose to turn this off by listening to the `uncaught:exception` event.\n\nhttps://on.cypress.io/uncaught-exception-from-application\n```\n\n# 作ったもの\n\nというところでしたが、\n対処療法的な形で以下のように自動テストを修正し、無事動かせるようになりました🙄\n\n```typescript:テストコードのイメージ\nit('トップページ -> 検索 -> カートに入れる -> 注文情報入力 -> 購入', () => {\n  const options = {\n    timeout: 10000\n  }\n\n  // 他のシナリオは割愛\n\n  // クレジットカード情報を設定\n  // Stripe起因で発生する特定のエラーを無視する\n  cy.on('uncaught:exception', (error) => {\n    if (/You have an in-flight confirmCardPayment/gi.test(error.message)) {\n      return false\n    }\n    // 他のエラーは無視しない\n    return true\n  })\n\n  // 読み込みを確認\n  cy.frameLoaded('#CardNo iframe')\n\n  // カード番号・有効期限・セキュリティコードを入力\n  cy.iframe('#CardNo iframe')\n    // カード番号のinputを選択\n    .find('input[placeholder=\"カード番号\"]')\n    // 各inputに値をフル桁入力すると、自動的に次のinputにフォーカスされるのでありがたく利用する\n    .type(['4242424242424242', '01', '50', '123'].join(''))\n\n  // Stripeのレスポンスを確認\n  cy.get('#CardNo')\n    // 他の要素を適当にクリックし、blurイベントを発火させる\n    .click()\n    // waitUntil()は `cypress-wait-until` というプラグインのものですが割愛\n    .waitUntil(() => cy.contains('お支払い情報を確認しました'), options)\n\n  // 他のシナリオは割愛\n})\n```\n\nまず、iframeに対するクロスオリジンアクセスについては、 `cypress.json` に以下の設定を追加すると動作するようになりました🧐\n\n```json:cypress.json\n{\n  \"chromeWebSecurity\": false\n}\n```\n\n実装としては多分[こちら](https://github.com/cypress-io/cypress/blob/develop/packages/server/lib/browsers/chrome.ts#L359-L362)で、恐らくにはそれぞれ以下の意味と思われますが、テストコードなのでこれ以上の深追いはやめました...\n\n- https://github.com/chromium/chromium/blob/master/content/public/common/content_switches.cc#L283-L284\n- https://github.com/chromium/chromium/blob/master/chrome/common/chrome_switches.cc#L43-L45\n\nその上で、Cypressからiframe配下のコンテンツへのアクセスを楽にしてくれる[cypress-iframe](https://gitlab.com/kgroat/cypress-iframe)というプラグインを公開されている方がいたので、こちらを利用しました\n`cy.frameLoaded()` で対象のiframeの読み込み確認、 `cy.iframe()` で対象のiframeの取得がおこなえます\n\nStripe起因の未キャッチ例外については、\n`cy.on()` を用いて例外メッセージをチェックし、今回見なかったことにしたい例外だった場合のみ無視することにしました🐞\nこれ以外の例外が発生し、それが自動テスト環境に限られる場合は、無視対象を増やして対応するとよいかも🐝\nもっとも、こちらの問題については、私のコードの方に原因があるような気はします...\n\nオマケとして、テストシナリオが元気よく実行される様子を貼っておきます🏋️‍♀️\n\n![index.ts.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/1f41bc84-12f4-b2d7-6736-607c6919616f.gif)\n\n`動いてるからヨシ！` はほどほどに😾\n\n# 参考文献\n\n- https://www.cypress.io/blog/2020/02/12/working-with-iframes-in-cypress/\n- https://github.com/cypress-io/cypress/issues/987\n",
      "coediting": false,
      "comments_count": 0,
      "created_at": "2020-08-31T02:03:45+09:00",
      "group": null,
      "id": "13c3c13a0e13d0890371",
      "likes_count": 6,
      "private": false,
      "reactions_count": 0,
      "stocks_count": 1,
      "tags": [
        {
          "name": "stripe",
          "versions": []
        },
        {
          "name": "TypeScript",
          "versions": []
        },
        {
          "name": "Cypress",
          "versions": []
        }
      ],
      "title": "CypressでStripe Elementsの自動テストをおこなう",
      "updated_at": "2020-08-31T02:03:45+09:00",
      "url": "https://qiita.com/yktakaha4/items/13c3c13a0e13d0890371",
      "user": {
        "description": "",
        "facebook_id": "",
        "followees_count": 26,
        "followers_count": 23,
        "github_login_name": "yktakaha4",
        "id": "yktakaha4",
        "items_count": 27,
        "linkedin_id": "",
        "location": "",
        "name": "Yuuki Takahashi",
        "organization": "LAPRAS株式会社",
        "permanent_id": 106259,
        "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/profile-images/1600489516",
        "team_only": false,
        "twitter_screen_name": "yktakaha4",
        "website_url": "https://yktakaha4.github.io/"
      },
      "page_views_count": null,
      "team_membership": null,
      "organization_url_name": null,
      "slide": false
    },
    {
      "rendered_body": "\n<h2>\n<span id=\"問題\" class=\"fragment\"></span><a href=\"#%E5%95%8F%E9%A1%8C\"><i class=\"fa fa-link\"></i></a>問題</h2>\n\n<p><a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/acm_certificate#domain_validation_options\" rel=\"nofollow noopener\" target=\"_blank\">aws_acm_certificate.domain_validation_options</a>は、v2系のProviderでは <code>A list of attributes ~</code> とのことでリストが返却されていましたが、v3系では <code>Set of domain validation objects ~</code> の示すようにオブジェクトのセットが返却されるようになり、 <a href=\"https://qiita.com/y-ohgi/items/b823b6bd078ce8e11546\" id=\"reference-7e1f0988a7d66d02e830\">こちら</a>の記事などで紹介されているように、リストとしてそのまま走査して値を設定することができなくなった模様です</p>\n\n<p>一般的なプログラミング言語と同様、セットは順序を持たないから走査できない...的な考え方からでしょうか？</p>\n\n<div class=\"code-frame\" data-lang=\"tf\">\n<div class=\"code-lang\"><span class=\"bold\">domain_validation_optionsのイメージ</span></div>\n<div class=\"highlight\"><pre><code><span class=\"nx\">Outputs</span><span class=\"err\">:</span>\n\n<span class=\"nx\">domain_validation_options</span> <span class=\"err\">=</span> <span class=\"p\">[</span>\n  <span class=\"p\">{</span>\n    <span class=\"s2\">\"domain_name\"</span> <span class=\"p\">=</span> <span class=\"s2\">\"example.com\"</span>\n    <span class=\"s2\">\"resource_record_name\"</span> <span class=\"p\">=</span> <span class=\"s2\">\"_xxxxx.example.com.\"</span>\n    <span class=\"s2\">\"resource_record_type\"</span> <span class=\"p\">=</span> <span class=\"s2\">\"CNAME\"</span>\n    <span class=\"s2\">\"resource_record_value\"</span> <span class=\"p\">=</span> <span class=\"s2\">\"_yyyyy.zzzzz.acm-validations.aws.\"</span>\n  <span class=\"p\">},</span>\n<span class=\"p\">]</span>\n</code></pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"text\">\n<div class=\"code-lang\"><span class=\"bold\">エラーのイメージ</span></div>\n<div class=\"highlight\"><pre><code>Error: Invalid index\n\n  on ./xxx/route53-record.tf line 17, in resource \"aws_route53_record\" \"domain_validation\":\n  17:   name    = lookup(aws_acm_certificate.example.domain_validation_options[count.index], \"resource_record_name\")\n    |----------------\n    | aws_acm_certificate.example.domain_validation_options is set of object with 1 element\n    | count.index is 0\n\nThis value does not have any indices.\n</code></pre></div>\n</div>\n\n<h2>\n<span id=\"解法\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E6%B3%95\"><i class=\"fa fa-link\"></i></a>解法</h2>\n\n<p>これについて、Terraform v0.12系で利用できる<a href=\"https://www.terraform.io/docs/configuration/resources.html#for_each-multiple-resource-instances-defined-by-a-map-or-set-of-strings\" rel=\"nofollow noopener\" target=\"_blank\">for_each</a>と<a href=\"https://www.terraform.io/docs/configuration/expressions.html#for-expressions\" rel=\"nofollow noopener\" target=\"_blank\">for式</a>を使うと、いい感じできたので備忘録です✍️<br>\nfor_eachは<code>list</code>以外にも<code>map</code>を走査することができるため、forで変換してあげて渡すとエラーとならず参照できます</p>\n\n<div class=\"code-frame\" data-lang=\"tf\">\n<div class=\"code-lang\"><span class=\"bold\">route53-record.tf</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">resource</span> <span class=\"s2\">\"aws_route53_record\"</span> <span class=\"s2\">\"domain_validation\"</span> <span class=\"p\">{</span>\n  <span class=\"c1\"># domain_name をキーにしたmapに変換する</span>\n  <span class=\"nx\">for_each</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"nx\">for</span> <span class=\"nx\">el</span> <span class=\"nx\">in</span> <span class=\"nx\">aws_acm_certificate</span><span class=\"p\">.</span><span class=\"nx\">example</span><span class=\"p\">.</span><span class=\"nx\">domain_validation_options</span> <span class=\"err\">:</span> <span class=\"nx\">el</span><span class=\"p\">.</span><span class=\"nx\">domain_name</span> <span class=\"p\">=</span><span class=\"err\">&gt;</span> <span class=\"nx\">el</span> <span class=\"p\">}</span>\n\n  <span class=\"c1\"># 値はeach.valueで参照できる</span>\n  <span class=\"nx\">name</span>    <span class=\"p\">=</span> <span class=\"nx\">each</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">.</span><span class=\"nx\">resource_record_name</span>\n  <span class=\"nx\">type</span>    <span class=\"p\">=</span> <span class=\"nx\">each</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">.</span><span class=\"nx\">resource_record_type</span>\n  <span class=\"nx\">records</span> <span class=\"p\">=</span> <span class=\"p\">[</span><span class=\"nx\">each</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">.</span><span class=\"nx\">resource_record_value</span><span class=\"p\">]</span>\n\n  <span class=\"nx\">zone_id</span> <span class=\"p\">=</span> <span class=\"nx\">aws_route53_zone</span><span class=\"p\">.</span><span class=\"nx\">example</span><span class=\"p\">.</span><span class=\"nx\">zone_id</span>\n  <span class=\"nx\">ttl</span>     <span class=\"p\">=</span> <span class=\"mi\">30</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n</div>\n\n<p>従来の書き方より冗長さが減って、スマートな感じがしますね...！</p>\n\n<h2>\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h2>\n\n<p>というか以下に書いてある通りのことです...</p>\n\n<p><qiita-embed-ogp src=\"https://github.com/hashicorp/terraform/issues/23354\"></qiita-embed-ogp></p>\n",
      "body": "## 問題\n\n[aws_acm_certificate.domain_validation_options](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/acm_certificate#domain_validation_options)は、v2系のProviderでは `A list of attributes ~` とのことでリストが返却されていましたが、v3系では `Set of domain validation objects ~` の示すようにオブジェクトのセットが返却されるようになり、 [こちら](https://qiita.com/y-ohgi/items/b823b6bd078ce8e11546)の記事などで紹介されているように、リストとしてそのまま走査して値を設定することができなくなった模様です\n\n一般的なプログラミング言語と同様、セットは順序を持たないから走査できない...的な考え方からでしょうか？\n\n```tf:domain_validation_optionsのイメージ\nOutputs:\n\ndomain_validation_options = [\n  {\n    \"domain_name\" = \"example.com\"\n    \"resource_record_name\" = \"_xxxxx.example.com.\"\n    \"resource_record_type\" = \"CNAME\"\n    \"resource_record_value\" = \"_yyyyy.zzzzz.acm-validations.aws.\"\n  },\n]\n```\n\n\n```text:エラーのイメージ\nError: Invalid index\n\n  on ./xxx/route53-record.tf line 17, in resource \"aws_route53_record\" \"domain_validation\":\n  17:   name    = lookup(aws_acm_certificate.example.domain_validation_options[count.index], \"resource_record_name\")\n    |----------------\n    | aws_acm_certificate.example.domain_validation_options is set of object with 1 element\n    | count.index is 0\n\nThis value does not have any indices.\n```\n\n## 解法\n\nこれについて、Terraform v0.12系で利用できる[for_each](https://www.terraform.io/docs/configuration/resources.html#for_each-multiple-resource-instances-defined-by-a-map-or-set-of-strings)と[for式](https://www.terraform.io/docs/configuration/expressions.html#for-expressions)を使うと、いい感じできたので備忘録です✍️\nfor_eachは`list`以外にも`map`を走査することができるため、forで変換してあげて渡すとエラーとならず参照できます\n\n```tf:route53-record.tf\nresource \"aws_route53_record\" \"domain_validation\" {\n  # domain_name をキーにしたmapに変換する\n  for_each = { for el in aws_acm_certificate.example.domain_validation_options : el.domain_name => el }\n\n  # 値はeach.valueで参照できる\n  name    = each.value.resource_record_name\n  type    = each.value.resource_record_type\n  records = [each.value.resource_record_value]\n\n  zone_id = aws_route53_zone.example.zone_id\n  ttl     = 30\n}\n```\n\n従来の書き方より冗長さが減って、スマートな感じがしますね...！\n\n## 参考\n\nというか以下に書いてある通りのことです...\n\nhttps://github.com/hashicorp/terraform/issues/23354\n",
      "coediting": false,
      "comments_count": 0,
      "created_at": "2020-08-09T04:45:32+09:00",
      "group": null,
      "id": "2fa3700c660466b27175",
      "likes_count": 1,
      "private": false,
      "reactions_count": 0,
      "stocks_count": 0,
      "tags": [
        {
          "name": "Terraform",
          "versions": []
        }
      ],
      "title": "TerraformでSet of objectsをfor_eachとfor式で走査する",
      "updated_at": "2020-08-09T04:58:58+09:00",
      "url": "https://qiita.com/yktakaha4/items/2fa3700c660466b27175",
      "user": {
        "description": "",
        "facebook_id": "",
        "followees_count": 26,
        "followers_count": 23,
        "github_login_name": "yktakaha4",
        "id": "yktakaha4",
        "items_count": 27,
        "linkedin_id": "",
        "location": "",
        "name": "Yuuki Takahashi",
        "organization": "LAPRAS株式会社",
        "permanent_id": 106259,
        "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/profile-images/1600489516",
        "team_only": false,
        "twitter_screen_name": "yktakaha4",
        "website_url": "https://yktakaha4.github.io/"
      },
      "page_views_count": null,
      "team_membership": null,
      "organization_url_name": null,
      "slide": false
    },
    {
      "rendered_body": "\n<h1>\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n\n<p>先日GitHub Pagesを使って<a href=\"https://yktakaha4.github.io/\" rel=\"nofollow noopener\" target=\"_blank\">自己紹介ページ</a>を作成したのですが、<br>\n外部リンク先が404になっていたらカッコ悪いので、GitHub Actionsでリンク切れをチェックするワークフローを定期実行することにしました🚨</p>\n\n<p>リンク切れのチェック自体は<a href=\"https://github.com/tcort/markdown-link-check\" rel=\"nofollow noopener\" target=\"_blank\">markdown-link-check</a>というナイスなパッケージを使ってすぐに実現できたのですが、<br>\n出力結果をIssueとして投稿しようとした時に、以下を実現しようとして少しハマったため共有します</p>\n\n<ul>\n<li>\n<code>npm run</code>の結果をcode記法で本文に貼り付けたい\n\n<ul>\n<li>もっと言うと、Issue Templateの中に埋め込んで投稿したい</li>\n</ul>\n</li>\n<li>\n<code>npm run</code>が失敗した時だけIssueを作成したい</li>\n</ul>\n\n<h1>\n<span id=\"作ったもの\" class=\"fragment\"></span><a href=\"#%E4%BD%9C%E3%81%A3%E3%81%9F%E3%82%82%E3%81%AE\"><i class=\"fa fa-link\"></i></a>作ったもの</h1>\n\n<p><a href=\"https://github.com/yktakaha4/yktakaha4.github.io/blob/source/.github/workflows/schedule.yml\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a>で動いてる実物に、コメントをつけてご紹介します🌾<br>\nなおテンプレートは<a href=\"https://github.com/yktakaha4/yktakaha4.github.io/blob/source/.github/issue_template_link_check.md\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a>です</p>\n\n<div class=\"code-frame\" data-lang=\"yaml\">\n<div class=\"code-lang\"><span class=\"bold\">schedule.yml</span></div>\n<div class=\"highlight\"><pre><code><span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Schedule</span>\n\n<span class=\"na\">on</span><span class=\"pi\">:</span>\n  <span class=\"na\">schedule</span><span class=\"pi\">:</span>\n    <span class=\"pi\">-</span> <span class=\"na\">cron</span><span class=\"pi\">:</span> <span class=\"s\">0 0 * * </span><span class=\"m\">0</span> <span class=\"c1\"># 日本時間の毎週日曜9時に定期実行</span>\n\n<span class=\"na\">jobs</span><span class=\"pi\">:</span>\n  <span class=\"na\">schedule</span><span class=\"pi\">:</span>\n    <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Check</span>\n    <span class=\"na\">runs-on</span><span class=\"pi\">:</span> <span class=\"s\">ubuntu-18.04</span>\n    <span class=\"na\">steps</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"na\">uses</span><span class=\"pi\">:</span> <span class=\"s\">actions/checkout@v2</span>\n      <span class=\"pi\">-</span> <span class=\"na\">uses</span><span class=\"pi\">:</span> <span class=\"s\">actions/setup-node@v1</span>\n        <span class=\"na\">with</span><span class=\"pi\">:</span>\n          <span class=\"na\">node-version</span><span class=\"pi\">:</span> <span class=\"s1\">'</span><span class=\"s\">12'</span>\n      <span class=\"pi\">-</span> <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"s\">npm install</span>\n      <span class=\"pi\">-</span> <span class=\"na\">id</span><span class=\"pi\">:</span> <span class=\"s\">check_link</span> <span class=\"c1\"># idを設定して、後続のstepで参照できるようにする</span>\n        <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"s\">npm run check:link &gt; ./out/check_link_result.txt</span> <span class=\"c1\"># 実行結果をファイルに出力</span>\n        <span class=\"na\">continue-on-error</span><span class=\"pi\">:</span> <span class=\"no\">true</span> <span class=\"c1\"># このステップの終了ステータスが0以外でもエラーにせず、後続のステップを実行する</span>\n      <span class=\"pi\">-</span> <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"pi\">|</span> <span class=\"c1\"># ::set-env を使って環境変数を後続ステップに渡す際に、改行コードのエスケープが必要なので実施する</span>\n          <span class=\"s\">CHECK_LINK_RESULT=\"$(cat ./out/check_link_result.txt)\"</span>\n          <span class=\"s\">CHECK_LINK_RESULT=\"${CHECK_LINK_RESULT//'%'/'%25'}\"</span>\n          <span class=\"s\">CHECK_LINK_RESULT=\"${CHECK_LINK_RESULT//$'\\n'/'%0A'}\"</span>\n          <span class=\"s\">CHECK_LINK_RESULT=\"${CHECK_LINK_RESULT//$'\\r'/'%0D'}\"</span>\n          <span class=\"s\">echo \"::set-env name=CHECK_LINK_RESULT::$CHECK_LINK_RESULT\"</span>\n      <span class=\"pi\">-</span> <span class=\"na\">uses</span><span class=\"pi\">:</span> <span class=\"s\">JasonEtco/create-an-issue@v2</span>\n        <span class=\"na\">if</span><span class=\"pi\">:</span> <span class=\"s\">steps.check_link.outcome == 'failure'</span> <span class=\"c1\"># steps.ステップのid.outcome で、ステップ毎の実行の成否をチェックできる</span>\n        <span class=\"na\">env</span><span class=\"pi\">:</span>\n          <span class=\"na\">GITHUB_TOKEN</span><span class=\"pi\">:</span> <span class=\"s\">${{ secrets.GITHUB_TOKEN }}</span>\n          <span class=\"na\">CHECK_LINK_RESULT</span><span class=\"pi\">:</span> <span class=\"s\">${{ env.CHECK_LINK_RESULT }}</span> <span class=\"c1\"># テンプレート内で {{ env.XXX }} の形式で値を参照</span>\n        <span class=\"na\">with</span><span class=\"pi\">:</span>\n          <span class=\"na\">filename</span><span class=\"pi\">:</span> <span class=\"s\">.github/issue_template_link_check.md</span>\n      <span class=\"c1\"># Actionsとしては、 check_linkステップの成否に関わらず成功として扱われる</span>\n      <span class=\"c1\"># （それ以外のステップでエラーとなった場合は失敗となる）</span>\n</code></pre></div>\n</div>\n\n<p>エラーとなると、こんな感じでIssueを投稿してくれます💺<br>\nいい感じ...</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/890bb19266284698e2c7a638dc1970d8b8f2c0b0/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3130363235392f32323166383962322d613764342d383831332d386162662d3435636461623836333139372e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2F221f89b2-a7d4-8813-8abf-45cdab863197.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=aed4307010fa04445c195254363272b9\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/221f89b2-a7d4-8813-8abf-45cdab863197.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2F221f89b2-a7d4-8813-8abf-45cdab863197.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=8495836bbcedd516f699073f49440653 1x\" loading=\"lazy\"></a></p>\n\n<h1>\n<span id=\"参考にしたもの\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83%E3%81%AB%E3%81%97%E3%81%9F%E3%82%82%E3%81%AE\"><i class=\"fa fa-link\"></i></a>参考にしたもの</h1>\n\n<ul>\n<li><a href=\"https://docs.github.com/ja/actions/reference/context-and-expression-syntax-for-github-actions\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://docs.github.com/ja/actions/reference/context-and-expression-syntax-for-github-actions</a></li>\n<li><a href=\"https://docs.github.com/ja/actions/reference/workflow-commands-for-github-actions\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://docs.github.com/ja/actions/reference/workflow-commands-for-github-actions</a></li>\n<li><a href=\"https://github.community/t/set-output-truncates-multiline-strings/16852\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://github.community/t/set-output-truncates-multiline-strings/16852</a></li>\n</ul>\n",
      "body": "# はじめに\n\n先日GitHub Pagesを使って[自己紹介ページ](https://yktakaha4.github.io/)を作成したのですが、\n外部リンク先が404になっていたらカッコ悪いので、GitHub Actionsでリンク切れをチェックするワークフローを定期実行することにしました🚨\n\nリンク切れのチェック自体は[markdown-link-check](https://github.com/tcort/markdown-link-check)というナイスなパッケージを使ってすぐに実現できたのですが、\n出力結果をIssueとして投稿しようとした時に、以下を実現しようとして少しハマったため共有します\n\n- `npm run`の結果をcode記法で本文に貼り付けたい\n    - もっと言うと、Issue Templateの中に埋め込んで投稿したい\n- `npm run`が失敗した時だけIssueを作成したい\n\n# 作ったもの\n\n[こちら](https://github.com/yktakaha4/yktakaha4.github.io/blob/source/.github/workflows/schedule.yml)で動いてる実物に、コメントをつけてご紹介します🌾\nなおテンプレートは[こちら](https://github.com/yktakaha4/yktakaha4.github.io/blob/source/.github/issue_template_link_check.md)です\n\n```yaml:schedule.yml\nname: Schedule\n\non:\n  schedule:\n    - cron: 0 0 * * 0 # 日本時間の毎週日曜9時に定期実行\n\njobs:\n  schedule:\n    name: Check\n    runs-on: ubuntu-18.04\n    steps:\n      - uses: actions/checkout@v2\n      - uses: actions/setup-node@v1\n        with:\n          node-version: '12'\n      - run: npm install\n      - id: check_link # idを設定して、後続のstepで参照できるようにする\n        run: npm run check:link > ./out/check_link_result.txt # 実行結果をファイルに出力\n        continue-on-error: true # このステップの終了ステータスが0以外でもエラーにせず、後続のステップを実行する\n      - run: | # ::set-env を使って環境変数を後続ステップに渡す際に、改行コードのエスケープが必要なので実施する\n          CHECK_LINK_RESULT=\"$(cat ./out/check_link_result.txt)\"\n          CHECK_LINK_RESULT=\"${CHECK_LINK_RESULT//'%'/'%25'}\"\n          CHECK_LINK_RESULT=\"${CHECK_LINK_RESULT//$'\\n'/'%0A'}\"\n          CHECK_LINK_RESULT=\"${CHECK_LINK_RESULT//$'\\r'/'%0D'}\"\n          echo \"::set-env name=CHECK_LINK_RESULT::$CHECK_LINK_RESULT\"\n      - uses: JasonEtco/create-an-issue@v2\n        if: steps.check_link.outcome == 'failure' # steps.ステップのid.outcome で、ステップ毎の実行の成否をチェックできる\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          CHECK_LINK_RESULT: ${{ env.CHECK_LINK_RESULT }} # テンプレート内で {{ env.XXX }} の形式で値を参照\n        with:\n          filename: .github/issue_template_link_check.md\n      # Actionsとしては、 check_linkステップの成否に関わらず成功として扱われる\n      # （それ以外のステップでエラーとなった場合は失敗となる）\n```\n\nエラーとなると、こんな感じでIssueを投稿してくれます💺\nいい感じ...\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/221f89b2-a7d4-8813-8abf-45cdab863197.png)\n\n# 参考にしたもの\n\n- https://docs.github.com/ja/actions/reference/context-and-expression-syntax-for-github-actions\n- https://docs.github.com/ja/actions/reference/workflow-commands-for-github-actions\n- https://github.community/t/set-output-truncates-multiline-strings/16852\n",
      "coediting": false,
      "comments_count": 0,
      "created_at": "2020-07-25T01:59:38+09:00",
      "group": null,
      "id": "19877ad86b54c22420e9",
      "likes_count": 31,
      "private": false,
      "reactions_count": 0,
      "stocks_count": 20,
      "tags": [
        {
          "name": "GitHubActions",
          "versions": []
        }
      ],
      "title": "GitHub Actionsでコマンド失敗時の実行結果をIssueに貼り付けて投稿する",
      "updated_at": "2020-07-25T01:59:38+09:00",
      "url": "https://qiita.com/yktakaha4/items/19877ad86b54c22420e9",
      "user": {
        "description": "",
        "facebook_id": "",
        "followees_count": 26,
        "followers_count": 23,
        "github_login_name": "yktakaha4",
        "id": "yktakaha4",
        "items_count": 27,
        "linkedin_id": "",
        "location": "",
        "name": "Yuuki Takahashi",
        "organization": "LAPRAS株式会社",
        "permanent_id": 106259,
        "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/profile-images/1600489516",
        "team_only": false,
        "twitter_screen_name": "yktakaha4",
        "website_url": "https://yktakaha4.github.io/"
      },
      "page_views_count": null,
      "team_membership": null,
      "organization_url_name": null,
      "slide": false
    },
    {
      "rendered_body": "<p>CI環境でLocalStackを動かすにあたり検討したものの備忘です🐚</p>\n\n<p>公式に<a href=\"https://github.com/localstack/localstack#service-health-checks\" rel=\"nofollow noopener\" target=\"_blank\">ヘルスチェック</a>も提供されているようですが、<br>\n実感としてdockerのログに <code>Ready.</code> と表示された辺りから安定して動作するように思えたので、ログに吐かれるまで処理待ちすることにしました</p>\n\n<p>これだけだと無限ループの恐れがあるので、タイムアウト等が必要であれば適宜実装してください</p>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><code><span class=\"c\"># サービス名</span>\n<span class=\"nv\">service_name</span><span class=\"o\">=</span><span class=\"s2\">\"xxxxx\"</span>\n<span class=\"c\"># 起動時刻</span>\n<span class=\"nv\">start_time</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"si\">$(</span><span class=\"nb\">date</span> <span class=\"nt\">-u</span> +%FT%T<span class=\"si\">)</span><span class=\"s2\">\"</span>\n\n<span class=\"c\"># バックグラウンドで起動</span>\ndocker-compose up <span class=\"nt\">-d</span>\n\n<span class=\"c\"># 起動時刻以降に `Ready.` が出力されるまで処理待ち</span>\n<span class=\"k\">while</span> <span class=\"o\">[</span> <span class=\"s2\">\"</span><span class=\"si\">$(</span>docker-compose logs <span class=\"nt\">--no-color</span> <span class=\"nt\">--timestamp</span> | <span class=\"nb\">awk</span> <span class=\"s1\">'$1==\"'</span><span class=\"s2\">\"</span><span class=\"nv\">$service_name</span><span class=\"s2\">\"</span><span class=\"s1\">'\"&amp;&amp;$3&gt;=\"'</span><span class=\"s2\">\"</span><span class=\"nv\">$start_time</span><span class=\"s2\">\"</span><span class=\"s1\">'\"'</span> | <span class=\"nb\">grep</span> <span class=\"nt\">-c</span> <span class=\"s2\">\"Ready.\"</span><span class=\"si\">)</span><span class=\"s2\">\"</span> <span class=\"nt\">-eq</span> 0 <span class=\"o\">]</span><span class=\"p\">;</span> <span class=\"k\">do\n  </span><span class=\"nb\">echo</span> <span class=\"s2\">\"Waiting LocalStack...\"</span>\n  <span class=\"nb\">sleep </span>1\n<span class=\"k\">done\n\n</span><span class=\"nb\">echo</span> <span class=\"s2\">\"LocalStack Ready.\"</span>\n</code></pre></div></div>\n",
      "body": "CI環境でLocalStackを動かすにあたり検討したものの備忘です🐚\n\n公式に[ヘルスチェック](https://github.com/localstack/localstack#service-health-checks)も提供されているようですが、\n実感としてdockerのログに `Ready.` と表示された辺りから安定して動作するように思えたので、ログに吐かれるまで処理待ちすることにしました\n\nこれだけだと無限ループの恐れがあるので、タイムアウト等が必要であれば適宜実装してください\n\n```bash\n# サービス名\nservice_name=\"xxxxx\"\n# 起動時刻\nstart_time=\"$(date -u +%FT%T)\"\n\n# バックグラウンドで起動\ndocker-compose up -d\n\n# 起動時刻以降に `Ready.` が出力されるまで処理待ち\nwhile [ \"$(docker-compose logs --no-color --timestamp | awk '$1==\"'\"$service_name\"'\"&&$3>=\"'\"$start_time\"'\"' | grep -c \"Ready.\")\" -eq 0 ]; do\n  echo \"Waiting LocalStack...\"\n  sleep 1\ndone\n\necho \"LocalStack Ready.\"\n```\n",
      "coediting": false,
      "comments_count": 0,
      "created_at": "2020-07-01T11:44:32+09:00",
      "group": null,
      "id": "ed88dbdfc0547ea41d28",
      "likes_count": 0,
      "private": false,
      "reactions_count": 0,
      "stocks_count": 0,
      "tags": [
        {
          "name": "ShellScript",
          "versions": []
        },
        {
          "name": "docker-compose",
          "versions": []
        },
        {
          "name": "LocalStack",
          "versions": []
        }
      ],
      "title": "LocalStackの起動待ちをするシェルスクリプト",
      "updated_at": "2020-07-01T11:44:32+09:00",
      "url": "https://qiita.com/yktakaha4/items/ed88dbdfc0547ea41d28",
      "user": {
        "description": "",
        "facebook_id": "",
        "followees_count": 26,
        "followers_count": 23,
        "github_login_name": "yktakaha4",
        "id": "yktakaha4",
        "items_count": 27,
        "linkedin_id": "",
        "location": "",
        "name": "Yuuki Takahashi",
        "organization": "LAPRAS株式会社",
        "permanent_id": 106259,
        "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/profile-images/1600489516",
        "team_only": false,
        "twitter_screen_name": "yktakaha4",
        "website_url": "https://yktakaha4.github.io/"
      },
      "page_views_count": null,
      "team_membership": null,
      "organization_url_name": null,
      "slide": false
    },
    {
      "rendered_body": "<p><a href=\"https://docs.nestjs.com/recipes/swagger\" rel=\"nofollow noopener\" target=\"_blank\">公式ドキュメント</a>には起動しているサーバからJSON出力するサンプルしかなかったので調べてみました<br>\n単純に <code>OpenAPIObject</code> をYAMLなりJSONなりに出力すればよい模様</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">exportOpenAPIDocument.ts</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">import</span> <span class=\"nx\">yaml</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">js-yaml</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">fs</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">fs-extra</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">path</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">path</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">DocumentBuilder</span><span class=\"p\">,</span> <span class=\"nx\">SwaggerModule</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">@nestjs/swagger</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">AppModule</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./app.module</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">NestFactory</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">@nestjs/core</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">exportOpenAPIDocument</span> <span class=\"o\">=</span> <span class=\"k\">async</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">NestFactory</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">(</span><span class=\"nx\">AppModule</span><span class=\"p\">);</span>\n\n  <span class=\"kd\">const</span> <span class=\"nx\">documentBuilder</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">DocumentBuilder</span><span class=\"p\">()</span>\n    <span class=\"p\">.</span><span class=\"nx\">setTitle</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">xxxxx</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n    <span class=\"p\">.</span><span class=\"nx\">setDescription</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">xxxxx</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n    <span class=\"p\">.</span><span class=\"nx\">setVersion</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">1.0</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n    <span class=\"p\">.</span><span class=\"nx\">build</span><span class=\"p\">();</span>\n\n  <span class=\"kd\">const</span> <span class=\"nb\">document</span> <span class=\"o\">=</span> <span class=\"nx\">SwaggerModule</span><span class=\"p\">.</span><span class=\"nx\">createDocument</span><span class=\"p\">(</span><span class=\"nx\">app</span><span class=\"p\">,</span> <span class=\"nx\">documentBuilder</span><span class=\"p\">);</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">yamlDocument</span> <span class=\"o\">=</span> <span class=\"nx\">yaml</span><span class=\"p\">.</span><span class=\"nx\">safeDump</span><span class=\"p\">(</span><span class=\"nb\">document</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n    <span class=\"na\">skipInvalid</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n    <span class=\"na\">noRefs</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n  <span class=\"p\">});</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">yamlPath</span> <span class=\"o\">=</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">path_to</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">openapi.yml</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n  <span class=\"k\">await</span> <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">writeFile</span><span class=\"p\">(</span><span class=\"nx\">yamlPath</span><span class=\"p\">,</span> <span class=\"nx\">yamlDocument</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n\n<span class=\"p\">(</span><span class=\"k\">async</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"k\">await</span> <span class=\"nx\">exportOpenAPIDocument</span><span class=\"p\">())();</span>\n</code></pre></div>\n</div>\n\n<p><code>package.json</code> には以下の感じで書いておくと便利でしょう</p>\n\n<div class=\"code-frame\" data-lang=\"text\">\n<div class=\"code-lang\"><span class=\"bold\">package.json（抜粋）</span></div>\n<div class=\"highlight\"><pre><code>{\n  \"scripts\": {\n    \"openapi:export\": \"ts-node src/exportOpenAPIDocument.ts\"\n  }\n}\n</code></pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><code><span class=\"gp\">$</span><span class=\"w\"> </span>npm run openapi:export\n</code></pre></div></div>\n\n<p>お試しを！👳‍♂️</p>\n",
      "body": "[公式ドキュメント](https://docs.nestjs.com/recipes/swagger)には起動しているサーバからJSON出力するサンプルしかなかったので調べてみました\n単純に `OpenAPIObject` をYAMLなりJSONなりに出力すればよい模様\n\n```typescript:exportOpenAPIDocument.ts\nimport yaml from 'js-yaml';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';\nimport { AppModule } from './app.module';\nimport { NestFactory } from '@nestjs/core';\n\nconst exportOpenAPIDocument = async () => {\n  const app = await NestFactory.create(AppModule);\n\n  const documentBuilder = new DocumentBuilder()\n    .setTitle('xxxxx')\n    .setDescription('xxxxx')\n    .setVersion('1.0')\n    .build();\n\n  const document = SwaggerModule.createDocument(app, documentBuilder);\n  const yamlDocument = yaml.safeDump(document, {\n    skipInvalid: true,\n    noRefs: true,\n  });\n  const yamlPath = path.join(__dirname, 'path_to', 'openapi.yml');\n\n  await fs.writeFile(yamlPath, yamlDocument);\n};\n\n(async () => await exportOpenAPIDocument())();\n```\n\n`package.json` には以下の感じで書いておくと便利でしょう\n\n```package.json（抜粋）\n{\n  \"scripts\": {\n    \"openapi:export\": \"ts-node src/exportOpenAPIDocument.ts\"\n  }\n}\n```\n\n```terminal\n$ npm run openapi:export\n```\n\nお試しを！👳‍♂️\n",
      "coediting": false,
      "comments_count": 0,
      "created_at": "2020-03-15T20:32:52+09:00",
      "group": null,
      "id": "97ea169ed97dbcdd25fb",
      "likes_count": 7,
      "private": false,
      "reactions_count": 0,
      "stocks_count": 0,
      "tags": [
        {
          "name": "TypeScript",
          "versions": []
        },
        {
          "name": "OpenAPI",
          "versions": []
        },
        {
          "name": "NestJS",
          "versions": []
        }
      ],
      "title": "NestJSでOpenAPI(Swagger)定義をファイル出力する",
      "updated_at": "2020-03-21T00:37:26+09:00",
      "url": "https://qiita.com/yktakaha4/items/97ea169ed97dbcdd25fb",
      "user": {
        "description": "",
        "facebook_id": "",
        "followees_count": 26,
        "followers_count": 23,
        "github_login_name": "yktakaha4",
        "id": "yktakaha4",
        "items_count": 27,
        "linkedin_id": "",
        "location": "",
        "name": "Yuuki Takahashi",
        "organization": "LAPRAS株式会社",
        "permanent_id": 106259,
        "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/profile-images/1600489516",
        "team_only": false,
        "twitter_screen_name": "yktakaha4",
        "website_url": "https://yktakaha4.github.io/"
      },
      "page_views_count": null,
      "team_membership": null,
      "organization_url_name": null,
      "slide": false
    },
    {
      "rendered_body": "\n<h1>\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n\n<p>最近TypeScriptが楽しいので、実益兼ねて作ったものをご紹介します</p>\n\n<h1>\n<span id=\"どんなものを作るか\" class=\"fragment\"></span><a href=\"#%E3%81%A9%E3%82%93%E3%81%AA%E3%82%82%E3%81%AE%E3%82%92%E4%BD%9C%E3%82%8B%E3%81%8B\"><i class=\"fa fa-link\"></i></a>どんなものを作るか</h1>\n\n<p>AWS上で<a href=\"https://qiita.com/yktakaha4/items/bc26c38baea56f244c19\" id=\"reference-a44d4584b2b9e8e1bcd2\">サーバレスに構築したLP</a>を個人で開発・保守・運用しています👷‍♂️</p>\n\n<p>今まで、メトリクスの異常値（CloudFrontのリクエスト数増加、Lambdaでのエラー発生、請求金額など）については、<code>CloudWatchアラーム -&gt; SNS -&gt; Chatbot -&gt; Slack</code> という経路で適宜通知を行っていたのですが、<br>\n平常時の値についてはダッシュボードを作成したもののあまり見れておらず、Slack上でもう少し手軽&amp;こまめに確認したい...と考えていました</p>\n\n<p>AWS SDKには<a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricWidgetImage.html\" rel=\"nofollow noopener\" target=\"_blank\">GetMetricWidgetImage</a>という、メトリクスを画像出力できるというそのものズバリなやつがありますが、<br>\nCloudWatchダッシュボードをそのまま出力する機能は提供されておらず、何かしら工夫が必要となります</p>\n\n<p>ということで、TypeScriptとServerless Frameworkを用いて、CloudWatchダッシュボードを日次でSlackに通知する仕組みを開発することとしました🐔</p>\n\n<h1>\n<span id=\"どうやって作るか\" class=\"fragment\"></span><a href=\"#%E3%81%A9%E3%81%86%E3%82%84%E3%81%A3%E3%81%A6%E4%BD%9C%E3%82%8B%E3%81%8B\"><i class=\"fa fa-link\"></i></a>どうやって作るか</h1>\n\n<p>この上なく簡単な構成図がこちらです</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/ee799917910c6bf1b560d9d5ce95ed2175fbc320/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3130363235392f38343866316335382d373065322d353439382d373663302d6333333334303430303964622e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2F848f1c58-70e2-5498-76c0-c333404009db.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=e43961b92269c6222efc57d283c1af1f\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/848f1c58-70e2-5498-76c0-c333404009db.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2F848f1c58-70e2-5498-76c0-c333404009db.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=dd77228297e89e9800e4c8e9e3a802c4 1x\" loading=\"lazy\"></a></p>\n\n<p>ダッシュボードはコンソールで手ポチで作成した上で、JSONエクスポートしたものをソースコードから読み込み利用します<br>\nLambda上でダッシュボードの定義ファイルを読み込み、メトリクス毎に画像出力します</p>\n\n<p>そのまま画像毎にSlackに投稿しても悪くはないですが、好みとしてはその時のメトリクスの断面を残しておきたかったので、<a href=\"https://github.com/lukechilds/merge-images\" rel=\"nofollow noopener\" target=\"_blank\">merge-images</a>というライブラリを用いて各メトリクス画像を1枚の画像にまとめることとします</p>\n\n<p>本ライブラリの動作には<a href=\"https://github.com/Automattic/node-canvas\" rel=\"nofollow noopener\" target=\"_blank\">node-canvas</a>が必要になりますが、例によってLambda上では動かず困っていたところ、<br>\n渡りに船⛴とばかりに<a href=\"https://github.com/jwerre/node-canvas-lambda\" rel=\"nofollow noopener\" target=\"_blank\">node-canvas-lambda</a>なるLambda Layerを作っている方がいたので、こちらをありがたく読み込んで使います</p>\n\n<h1>\n<span id=\"作ったもの\" class=\"fragment\"></span><a href=\"#%E4%BD%9C%E3%81%A3%E3%81%9F%E3%82%82%E3%81%AE\"><i class=\"fa fa-link\"></i></a>作ったもの</h1>\n\n<p>コードは以下になります<img alt=\":octocat:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/octocat.png\" title=\":octocat:\" width=\"20\" loading=\"lazy\"></p>\n\n<p><qiita-embed-ogp src=\"https://github.com/yktakaha4/cw-metrics-notifier\"></qiita-embed-ogp></p>\n\n<h2>\n<span id=\"構築方法\" class=\"fragment\"></span><a href=\"#%E6%A7%8B%E7%AF%89%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>構築方法</h2>\n\n<p>ダッシュボードを作成した上で、 <code>アクション -&gt; ソースの表示/編集</code> で表示されるJSON定義をコピーし、<code>widgets/sample.json</code> を上書きしてください</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/f3aec8e1e3e19ca1a070aaa6b7cc13f1a3516cb2/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3130363235392f39663232333238392d313639612d646233362d373231332d3266316137373262316535342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2F9f223289-169a-db36-7213-2f1a772b1e54.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=7cfb1cdb31d489cfe448dd9d84f0641c\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/9f223289-169a-db36-7213-2f1a772b1e54.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2F9f223289-169a-db36-7213-2f1a772b1e54.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=7c4e6a055c637ef6dea7af0a538c9e2f 1x\" loading=\"lazy\"></a></p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">widgets/sample.json</span></div>\n<div class=\"highlight\"><pre><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"comment\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"replace me!\"</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div>\n</div>\n\n<p><code>serverless.yml</code>の <code>deploymentBucket</code>や <code>schedule</code>、関数の<code>environment</code>などを適宜変更してください</p>\n\n<div class=\"code-frame\" data-lang=\"yml\">\n<div class=\"code-lang\"><span class=\"bold\">serverless.yml</span></div>\n<div class=\"highlight\"><pre><code><span class=\"s\">service:service:</span>\n  <span class=\"s\">name</span><span class=\"pi\">:</span> <span class=\"s\">cw-metrics-notifier</span>\n\n<span class=\"na\">provider</span><span class=\"pi\">:</span>\n  <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">aws</span>\n  <span class=\"na\">runtime</span><span class=\"pi\">:</span> <span class=\"s\">nodejs12.x</span>\n  <span class=\"na\">region</span><span class=\"pi\">:</span> <span class=\"s\">ap-northeast-1</span>\n  <span class=\"na\">stage</span><span class=\"pi\">:</span> <span class=\"s\">prod</span>\n  <span class=\"na\">deploymentBucket</span><span class=\"pi\">:</span> <span class=\"s\">xxxxxxx</span>\n  <span class=\"na\">memorySize</span><span class=\"pi\">:</span> <span class=\"m\">256</span>\n  <span class=\"na\">timeout</span><span class=\"pi\">:</span> <span class=\"m\">60</span>\n  <span class=\"na\">environment</span><span class=\"pi\">:</span>\n    <span class=\"na\">SLACK_TOKEN</span><span class=\"pi\">:</span> <span class=\"s\">${env:SLACK_TOKEN}</span>\n    <span class=\"na\">SLACK_METRICS_CHANNEL_ID</span><span class=\"pi\">:</span> <span class=\"s\">${env:SLACK_METRICS_CHANNEL_ID}</span>\n  <span class=\"na\">iamRoleStatements</span><span class=\"pi\">:</span>\n    <span class=\"pi\">-</span> <span class=\"na\">Effect</span><span class=\"pi\">:</span> <span class=\"s\">Allow</span>\n      <span class=\"na\">Action</span><span class=\"pi\">:</span>\n        <span class=\"pi\">-</span> <span class=\"s\">cloudwatch:GetMetricWidgetImage</span>\n      <span class=\"na\">Resource</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">*\"</span>\n\n<span class=\"na\">functions</span><span class=\"pi\">:</span>\n  <span class=\"na\">widgets</span><span class=\"pi\">:</span>\n    <span class=\"na\">handler</span><span class=\"pi\">:</span> <span class=\"s\">src/widgets.scheduledHandler</span>\n    <span class=\"na\">environment</span><span class=\"pi\">:</span>\n      <span class=\"c1\"># widgets/ 配下のファイル名（カンマ区切り可）</span>\n      <span class=\"na\">WIDGETS_NAMES</span><span class=\"pi\">:</span> <span class=\"s\">sample</span>\n      <span class=\"c1\"># マージ画像でx方向にいくつまでメトリクスを並べるか</span>\n      <span class=\"na\">METRICS_X_COUNT</span><span class=\"pi\">:</span> <span class=\"m\">2</span>\n      <span class=\"c1\"># 何日前までを表示対象にするか</span>\n      <span class=\"na\">METRICS_DAYS_AGO</span><span class=\"pi\">:</span> <span class=\"m\">7</span>\n    <span class=\"na\">events</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"na\">schedule</span><span class=\"pi\">:</span>\n          <span class=\"na\">rate</span><span class=\"pi\">:</span> <span class=\"s\">cron(0 0 * * ? *)</span>\n          <span class=\"na\">enabled</span><span class=\"pi\">:</span> <span class=\"no\">true</span>\n    <span class=\"na\">layers</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"pi\">{</span> <span class=\"nv\">Ref</span><span class=\"pi\">:</span> <span class=\"nv\">NodeCanvasLambdaLayer</span> <span class=\"pi\">}</span>\n      <span class=\"pi\">-</span> <span class=\"pi\">{</span> <span class=\"nv\">Ref</span><span class=\"pi\">:</span> <span class=\"nv\">CanvasLib64LambdaLayer</span> <span class=\"pi\">}</span>\n\n<span class=\"na\">layers</span><span class=\"pi\">:</span>\n  <span class=\"na\">nodeCanvas</span><span class=\"pi\">:</span>\n    <span class=\"na\">package</span><span class=\"pi\">:</span>\n      <span class=\"na\">artifact</span><span class=\"pi\">:</span> <span class=\"s\">vendor/node-canvas-lambda/node12_canvas_layer.zip</span>\n  <span class=\"na\">canvasLib64</span><span class=\"pi\">:</span>\n    <span class=\"na\">package</span><span class=\"pi\">:</span>\n      <span class=\"na\">artifact</span><span class=\"pi\">:</span> <span class=\"s\">vendor/node-canvas-lambda/canvas-lib64-layer.zip</span>\n\n<span class=\"na\">package</span><span class=\"pi\">:</span>\n  <span class=\"na\">include</span><span class=\"pi\">:</span>\n    <span class=\"pi\">-</span> <span class=\"s\">widgets/</span>\n\n<span class=\"na\">plugins</span><span class=\"pi\">:</span>\n  <span class=\"pi\">-</span> <span class=\"s\">serverless-plugin-typescript</span>\n  <span class=\"pi\">-</span> <span class=\"s\">serverless-plugin-optimize</span>\n\n<span class=\"na\">custom</span><span class=\"pi\">:</span>\n  <span class=\"na\">optimize</span><span class=\"pi\">:</span>\n    <span class=\"na\">exclude</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"s\">canvas</span>\n    <span class=\"na\">includePaths</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"s\">widgets/</span>\n</code></pre></div>\n</div>\n\n<p>node-canvas-lambdaの取得については、npm scriptsに書いてあるので気にしなくてもokです</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">package.json（抜粋）</span></div>\n<div class=\"highlight\"><pre><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"scripts\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nl\">\"predeploy\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"rm -rf .build; [[ -d vendor/node-canvas-lambda ]] || (cd vendor &amp;&amp; git clone https://github.com/jwerre/node-canvas-lambda.git)\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"deploy\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"dotenv -- sls deploy -v\"</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div>\n</div>\n\n<p>直してみてよさそうだったらデプロイ</p>\n\n<div class=\"code-frame\" data-lang=\"shell-session\">\n<div class=\"code-lang\"><span class=\"bold\">ターミナル</span></div>\n<div class=\"highlight\"><pre><code><span class=\"gp\">#</span><span class=\"w\"> </span>インストール\n<span class=\"gp\">$</span><span class=\"w\"> </span>npm ci\n<span class=\"go\">\n</span><span class=\"gp\">#</span><span class=\"w\"> </span>環境変数情報を追加\n<span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">cp</span> <span class=\"nt\">-p</span> .env.sample .env\n<span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">cat</span> .env\n<span class=\"go\">AWS_ACCESS_KEY_ID=xxxxx\nAWS_SECRET_ACCESS_KEY=xxxxx\n\nSLACK_TOKEN=xoxp-xxxxx\nSLACK_METRICS_CHANNEL_ID=Cxxxxx\n\n</span><span class=\"gp\">#</span><span class=\"w\"> </span>デプロイ\n<span class=\"gp\">$</span><span class=\"w\"> </span>npm run deploy\n</code></pre></div>\n</div>\n\n<p>スケジュールした時間が来ると、Slackの所定のチャンネルにダッシュボードっぽい画像が投稿されます🍨</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/34ff6d0252d67699b573ad51e4e639247fac0a26/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3130363235392f31333762343636642d323532622d376131302d346239652d3163636666633836656433632e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2F137b466d-252b-7a10-4b9e-1ccffc86ed3c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=ccbd99bec03a065c0805cb2536eafc40\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/137b466d-252b-7a10-4b9e-1ccffc86ed3c.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2F137b466d-252b-7a10-4b9e-1ccffc86ed3c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=5e79efc6ca78c6c15f4dfa515232f7bf 1x\" loading=\"lazy\"></a></p>\n\n<p>実際のコードはGitHubを見て頂くのがよいですが、肝となるメトリクスの画像出力とマージのコードを貼っておきます<br>\n<code>MetricWidget</code>に何が渡せるかは<a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Metric-Widget-Structure.html\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a>を見るといい感じに書いてあります</p>\n\n<p>あと、これはちゃんと調査できてないのですが、<code>timeSeries</code>タイプ以外のメトリクスはいい感じに描画されない感じがしたので、取得対象外としています<br>\nそしてグラフのキャプションに日本語などマルチバイト文字を入れると文字化けします...</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">widgets.ts（抜粋）</span></div>\n<div class=\"highlight\"><pre><code>  <span class=\"c1\">// ウィジェット毎にpng画像を生成し、マージ用元データを作成する</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">imageSources</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">all</span><span class=\"p\">(</span>\n    <span class=\"nx\">widgets</span>\n      <span class=\"p\">.</span><span class=\"nx\">filter</span><span class=\"p\">(</span><span class=\"nx\">widgetPart</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">widgetPart</span><span class=\"p\">?.</span><span class=\"nx\">properties</span><span class=\"p\">?.</span><span class=\"nx\">view</span> <span class=\"o\">===</span> <span class=\"dl\">'</span><span class=\"s1\">timeSeries</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n      <span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"k\">async</span> <span class=\"p\">(</span><span class=\"nx\">widgetPart</span><span class=\"p\">,</span> <span class=\"nx\">index</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">properties</span> <span class=\"o\">=</span> <span class=\"nx\">widgetPart</span><span class=\"p\">.</span><span class=\"nx\">properties</span><span class=\"p\">;</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">imagePath</span> <span class=\"o\">=</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"nx\">imagesDir</span><span class=\"p\">,</span> <span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"nx\">index</span><span class=\"p\">}</span><span class=\"s2\">.png`</span><span class=\"p\">);</span>\n\n        <span class=\"c1\">// +0000 形式</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">timezone</span> <span class=\"o\">=</span> <span class=\"nx\">moment</span><span class=\"p\">()</span>\n          <span class=\"p\">.</span><span class=\"nx\">format</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Z</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n          <span class=\"p\">.</span><span class=\"nx\">replace</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">:</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">''</span><span class=\"p\">);</span>\n\n        <span class=\"kd\">const</span> <span class=\"nx\">cw</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">CloudWatch</span><span class=\"p\">({</span>\n          <span class=\"na\">region</span><span class=\"p\">:</span> <span class=\"nx\">properties</span><span class=\"p\">.</span><span class=\"nx\">region</span><span class=\"p\">,</span>\n        <span class=\"p\">});</span>\n\n        <span class=\"c1\">// AWSにリクエストし、結果をファイル保存</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">output</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">cw</span>\n          <span class=\"p\">.</span><span class=\"nx\">getMetricWidgetImage</span><span class=\"p\">({</span>\n            <span class=\"na\">MetricWidget</span><span class=\"p\">:</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">({</span>\n              <span class=\"p\">...</span><span class=\"nx\">properties</span><span class=\"p\">,</span>\n              <span class=\"na\">start</span><span class=\"p\">:</span> <span class=\"s2\">`-PT</span><span class=\"p\">${</span><span class=\"nx\">metricsDaysAgo</span> <span class=\"o\">*</span> <span class=\"mi\">24</span><span class=\"p\">}</span><span class=\"s2\">H`</span><span class=\"p\">,</span>\n              <span class=\"na\">end</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">PT0H</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n              <span class=\"nx\">timezone</span><span class=\"p\">,</span>\n              <span class=\"na\">width</span><span class=\"p\">:</span> <span class=\"nx\">imageWidth</span><span class=\"p\">,</span>\n              <span class=\"na\">height</span><span class=\"p\">:</span> <span class=\"nx\">imageHeight</span><span class=\"p\">,</span>\n            <span class=\"p\">}),</span>\n          <span class=\"p\">})</span>\n          <span class=\"p\">.</span><span class=\"nx\">promise</span><span class=\"p\">();</span>\n\n        <span class=\"k\">await</span> <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">writeFile</span><span class=\"p\">(</span><span class=\"nx\">imagePath</span><span class=\"p\">,</span> <span class=\"nx\">output</span><span class=\"p\">.</span><span class=\"nx\">MetricWidgetImage</span><span class=\"p\">);</span>\n\n        <span class=\"c1\">// マージ用元データを作成し返却</span>\n        <span class=\"c1\">// 描画位置の指定をおこない、画像を metricsXCount ずつ横に並べる</span>\n        <span class=\"kd\">const</span> <span class=\"na\">source</span><span class=\"p\">:</span> <span class=\"nx\">ImageSource</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n          <span class=\"na\">src</span><span class=\"p\">:</span> <span class=\"nx\">imagePath</span><span class=\"p\">,</span>\n          <span class=\"na\">x</span><span class=\"p\">:</span> <span class=\"nx\">imageWidth</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"nx\">index</span> <span class=\"o\">%</span> <span class=\"nx\">metricsXCount</span><span class=\"p\">),</span>\n          <span class=\"na\">y</span><span class=\"p\">:</span> <span class=\"nx\">imageHeight</span> <span class=\"o\">*</span> <span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">floor</span><span class=\"p\">(</span><span class=\"nx\">index</span> <span class=\"o\">/</span> <span class=\"nx\">metricsXCount</span><span class=\"p\">),</span>\n        <span class=\"p\">};</span>\n\n        <span class=\"k\">return</span> <span class=\"nx\">source</span><span class=\"p\">;</span>\n      <span class=\"p\">}),</span>\n  <span class=\"p\">);</span>\n\n  <span class=\"c1\">// 画像のマージ</span>\n  <span class=\"c1\">// ライブラリ都合で Canvas.Image が存在しないとエラーとなったため以下指定</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">canvas</span><span class=\"p\">:</span> <span class=\"kr\">any</span> <span class=\"o\">=</span> <span class=\"nx\">Canvas</span><span class=\"p\">;</span>\n  <span class=\"nx\">canvas</span><span class=\"p\">.</span><span class=\"nx\">Image</span> <span class=\"o\">=</span> <span class=\"nx\">Image</span><span class=\"p\">;</span>\n\n  <span class=\"kd\">const</span> <span class=\"nx\">mergedImageBase64</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">mergeImages</span><span class=\"p\">(</span><span class=\"nx\">imageSources</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n    <span class=\"na\">Canvas</span><span class=\"p\">:</span> <span class=\"nx\">canvas</span><span class=\"p\">,</span>\n    <span class=\"na\">width</span><span class=\"p\">:</span> <span class=\"nx\">imageWidth</span> <span class=\"o\">*</span> <span class=\"nx\">metricsXCount</span><span class=\"p\">,</span>\n    <span class=\"na\">height</span><span class=\"p\">:</span> <span class=\"nx\">imageHeight</span> <span class=\"o\">*</span> <span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">ceil</span><span class=\"p\">(</span><span class=\"nx\">imageSources</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">/</span> <span class=\"nx\">metricsXCount</span><span class=\"p\">),</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"c1\">// Base64形式からファイルに変換</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">metricsData</span> <span class=\"o\">=</span> <span class=\"nx\">mergedImageBase64</span><span class=\"p\">.</span><span class=\"nx\">replace</span><span class=\"p\">(</span><span class=\"sr\">/^data:image</span><span class=\"se\">\\/</span><span class=\"sr\">png;base64,/</span><span class=\"p\">,</span> <span class=\"dl\">''</span><span class=\"p\">);</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">metricsPath</span> <span class=\"o\">=</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"nx\">imagesDir</span><span class=\"p\">,</span> <span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"nx\">widgetsName</span><span class=\"p\">}</span><span class=\"s2\">.png`</span><span class=\"p\">);</span>\n  <span class=\"k\">await</span> <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">writeFile</span><span class=\"p\">(</span><span class=\"nx\">metricsPath</span><span class=\"p\">,</span> <span class=\"nx\">metricsData</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">base64</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n</code></pre></div>\n</div>\n\n<p>今回は主旨から逸れるので触れませんが、<code>.github/workflows/</code> 配下にGitHub Actionsでデプロイする用のワークフローも入れていますので、必要あらばご利用ください</p>\n\n<h1>\n<span id=\"まとめ\" class=\"fragment\"></span><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"><i class=\"fa fa-link\"></i></a>まとめ</h1>\n\n<p>TypeScriptは、静的型付けのメリットを手軽に享受しつつ、Node製の各種ライブラリを活用できつつ、Lambdaはじめサーバレスとの親和性も高く、フロントも書けるんだからだいぶ最高感ありますね...！<br>\nどんどん使っていきたいと思います🍚</p>\n",
      "body": "# はじめに\n\n最近TypeScriptが楽しいので、実益兼ねて作ったものをご紹介します\n\n# どんなものを作るか\n\nAWS上で[サーバレスに構築したLP](https://qiita.com/yktakaha4/items/bc26c38baea56f244c19)を個人で開発・保守・運用しています👷‍♂️\n\n今まで、メトリクスの異常値（CloudFrontのリクエスト数増加、Lambdaでのエラー発生、請求金額など）については、`CloudWatchアラーム -> SNS -> Chatbot -> Slack` という経路で適宜通知を行っていたのですが、\n平常時の値についてはダッシュボードを作成したもののあまり見れておらず、Slack上でもう少し手軽&こまめに確認したい...と考えていました\n\nAWS SDKには[GetMetricWidgetImage](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricWidgetImage.html)という、メトリクスを画像出力できるというそのものズバリなやつがありますが、\nCloudWatchダッシュボードをそのまま出力する機能は提供されておらず、何かしら工夫が必要となります\n\nということで、TypeScriptとServerless Frameworkを用いて、CloudWatchダッシュボードを日次でSlackに通知する仕組みを開発することとしました🐔\n\n# どうやって作るか\n\nこの上なく簡単な構成図がこちらです\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/848f1c58-70e2-5498-76c0-c333404009db.png)\n\nダッシュボードはコンソールで手ポチで作成した上で、JSONエクスポートしたものをソースコードから読み込み利用します\nLambda上でダッシュボードの定義ファイルを読み込み、メトリクス毎に画像出力します\n\nそのまま画像毎にSlackに投稿しても悪くはないですが、好みとしてはその時のメトリクスの断面を残しておきたかったので、[merge-images](https://github.com/lukechilds/merge-images)というライブラリを用いて各メトリクス画像を1枚の画像にまとめることとします\n\n本ライブラリの動作には[node-canvas](https://github.com/Automattic/node-canvas)が必要になりますが、例によってLambda上では動かず困っていたところ、\n渡りに船⛴とばかりに[node-canvas-lambda](https://github.com/jwerre/node-canvas-lambda)なるLambda Layerを作っている方がいたので、こちらをありがたく読み込んで使います\n\n# 作ったもの\n\nコードは以下になります:octocat:\n\nhttps://github.com/yktakaha4/cw-metrics-notifier\n\n## 構築方法\n\nダッシュボードを作成した上で、 `アクション -> ソースの表示/編集` で表示されるJSON定義をコピーし、`widgets/sample.json` を上書きしてください\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/9f223289-169a-db36-7213-2f1a772b1e54.png)\n\n```json:widgets/sample.json\n{\n  \"comment\": \"replace me!\"\n}\n```\n\n`serverless.yml`の `deploymentBucket`や `schedule`、関数の`environment`などを適宜変更してください\n\n```yml:serverless.yml\nservice:service:\n  name: cw-metrics-notifier\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  region: ap-northeast-1\n  stage: prod\n  deploymentBucket: xxxxxxx\n  memorySize: 256\n  timeout: 60\n  environment:\n    SLACK_TOKEN: ${env:SLACK_TOKEN}\n    SLACK_METRICS_CHANNEL_ID: ${env:SLACK_METRICS_CHANNEL_ID}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - cloudwatch:GetMetricWidgetImage\n      Resource: \"*\"\n\nfunctions:\n  widgets:\n    handler: src/widgets.scheduledHandler\n    environment:\n      # widgets/ 配下のファイル名（カンマ区切り可）\n      WIDGETS_NAMES: sample\n      # マージ画像でx方向にいくつまでメトリクスを並べるか\n      METRICS_X_COUNT: 2\n      # 何日前までを表示対象にするか\n      METRICS_DAYS_AGO: 7\n    events:\n      - schedule:\n          rate: cron(0 0 * * ? *)\n          enabled: true\n    layers:\n      - { Ref: NodeCanvasLambdaLayer }\n      - { Ref: CanvasLib64LambdaLayer }\n\nlayers:\n  nodeCanvas:\n    package:\n      artifact: vendor/node-canvas-lambda/node12_canvas_layer.zip\n  canvasLib64:\n    package:\n      artifact: vendor/node-canvas-lambda/canvas-lib64-layer.zip\n\npackage:\n  include:\n    - widgets/\n\nplugins:\n  - serverless-plugin-typescript\n  - serverless-plugin-optimize\n\ncustom:\n  optimize:\n    exclude:\n      - canvas\n    includePaths:\n      - widgets/\n```\n\nnode-canvas-lambdaの取得については、npm scriptsに書いてあるので気にしなくてもokです\n\n```json:package.json（抜粋）\n{\n  \"scripts\": {\n    \"predeploy\": \"rm -rf .build; [[ -d vendor/node-canvas-lambda ]] || (cd vendor && git clone https://github.com/jwerre/node-canvas-lambda.git)\",\n    \"deploy\": \"dotenv -- sls deploy -v\"\n  }\n}\n```\n\n直してみてよさそうだったらデプロイ\n\n```shell-session:ターミナル\n# インストール\n$ npm ci\n\n# 環境変数情報を追加\n$ cp -p .env.sample .env\n$ cat .env\nAWS_ACCESS_KEY_ID=xxxxx\nAWS_SECRET_ACCESS_KEY=xxxxx\n\nSLACK_TOKEN=xoxp-xxxxx\nSLACK_METRICS_CHANNEL_ID=Cxxxxx\n\n# デプロイ\n$ npm run deploy\n```\n\nスケジュールした時間が来ると、Slackの所定のチャンネルにダッシュボードっぽい画像が投稿されます🍨\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/137b466d-252b-7a10-4b9e-1ccffc86ed3c.png)\n\n実際のコードはGitHubを見て頂くのがよいですが、肝となるメトリクスの画像出力とマージのコードを貼っておきます\n`MetricWidget`に何が渡せるかは[こちら](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Metric-Widget-Structure.html)を見るといい感じに書いてあります\n\nあと、これはちゃんと調査できてないのですが、`timeSeries`タイプ以外のメトリクスはいい感じに描画されない感じがしたので、取得対象外としています\nそしてグラフのキャプションに日本語などマルチバイト文字を入れると文字化けします...\n\n```typescript:widgets.ts（抜粋）\n  // ウィジェット毎にpng画像を生成し、マージ用元データを作成する\n  const imageSources = await Promise.all(\n    widgets\n      .filter(widgetPart => widgetPart?.properties?.view === 'timeSeries')\n      .map(async (widgetPart, index) => {\n        const properties = widgetPart.properties;\n        const imagePath = path.join(imagesDir, `${index}.png`);\n\n        // +0000 形式\n        const timezone = moment()\n          .format('Z')\n          .replace(':', '');\n\n        const cw = new CloudWatch({\n          region: properties.region,\n        });\n\n        // AWSにリクエストし、結果をファイル保存\n        const output = await cw\n          .getMetricWidgetImage({\n            MetricWidget: JSON.stringify({\n              ...properties,\n              start: `-PT${metricsDaysAgo * 24}H`,\n              end: 'PT0H',\n              timezone,\n              width: imageWidth,\n              height: imageHeight,\n            }),\n          })\n          .promise();\n\n        await fs.writeFile(imagePath, output.MetricWidgetImage);\n\n        // マージ用元データを作成し返却\n        // 描画位置の指定をおこない、画像を metricsXCount ずつ横に並べる\n        const source: ImageSource = {\n          src: imagePath,\n          x: imageWidth * (index % metricsXCount),\n          y: imageHeight * Math.floor(index / metricsXCount),\n        };\n\n        return source;\n      }),\n  );\n\n  // 画像のマージ\n  // ライブラリ都合で Canvas.Image が存在しないとエラーとなったため以下指定\n  const canvas: any = Canvas;\n  canvas.Image = Image;\n\n  const mergedImageBase64 = await mergeImages(imageSources, {\n    Canvas: canvas,\n    width: imageWidth * metricsXCount,\n    height: imageHeight * Math.ceil(imageSources.length / metricsXCount),\n  });\n\n  // Base64形式からファイルに変換\n  const metricsData = mergedImageBase64.replace(/^data:image\\/png;base64,/, '');\n  const metricsPath = path.join(imagesDir, `${widgetsName}.png`);\n  await fs.writeFile(metricsPath, metricsData, 'base64');\n```\n\n今回は主旨から逸れるので触れませんが、`.github/workflows/` 配下にGitHub Actionsでデプロイする用のワークフローも入れていますので、必要あらばご利用ください\n\n# まとめ\n\nTypeScriptは、静的型付けのメリットを手軽に享受しつつ、Node製の各種ライブラリを活用できつつ、Lambdaはじめサーバレスとの親和性も高く、フロントも書けるんだからだいぶ最高感ありますね...！\nどんどん使っていきたいと思います🍚\n",
      "coediting": false,
      "comments_count": 0,
      "created_at": "2020-03-14T16:57:27+09:00",
      "group": null,
      "id": "3df6947c77599a722762",
      "likes_count": 8,
      "private": false,
      "reactions_count": 0,
      "stocks_count": 0,
      "tags": [
        {
          "name": "AWS",
          "versions": []
        },
        {
          "name": "TypeScript",
          "versions": []
        },
        {
          "name": "CloudWatch",
          "versions": []
        },
        {
          "name": "Slack",
          "versions": []
        },
        {
          "name": "ServerlessFramework",
          "versions": []
        }
      ],
      "title": "CloudWatch ダッシュボードを定期的にSlack通知する（ソース付き）",
      "updated_at": "2020-03-14T16:57:27+09:00",
      "url": "https://qiita.com/yktakaha4/items/3df6947c77599a722762",
      "user": {
        "description": "",
        "facebook_id": "",
        "followees_count": 26,
        "followers_count": 23,
        "github_login_name": "yktakaha4",
        "id": "yktakaha4",
        "items_count": 27,
        "linkedin_id": "",
        "location": "",
        "name": "Yuuki Takahashi",
        "organization": "LAPRAS株式会社",
        "permanent_id": 106259,
        "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/profile-images/1600489516",
        "team_only": false,
        "twitter_screen_name": "yktakaha4",
        "website_url": "https://yktakaha4.github.io/"
      },
      "page_views_count": null,
      "team_membership": null,
      "organization_url_name": null,
      "slide": false
    },
    {
      "rendered_body": "<p>調査やリカバリなどで手元に↓のようなcsvっぽい文字列があって、テンポラリテーブル作るのが億劫な時に、</p>\n\n<div class=\"code-frame\" data-lang=\"text\">\n<div class=\"code-lang\"><span class=\"bold\">sample.csv</span></div>\n<div class=\"highlight\"><pre><code>1,taro,hello\n2,jiro,konnnichiha\n</code></pre></div>\n</div>\n\n<p>こうすると手軽に表が作れます<br>\n<code>,</code>を<code>\\t</code>にすればTSVもできるでしょう</p>\n\n<div class=\"code-frame\" data-lang=\"sql\">\n<div class=\"code-lang\"><span class=\"bold\">awful.sql</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">select</span>\n  <span class=\"n\">cols</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"k\">as</span> <span class=\"n\">id</span><span class=\"p\">,</span>\n  <span class=\"n\">cols</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"k\">as</span> <span class=\"n\">name</span><span class=\"p\">,</span>\n  <span class=\"n\">cols</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"k\">as</span> <span class=\"n\">msg</span>\n<span class=\"k\">from</span> <span class=\"p\">(</span>\n  <span class=\"k\">select</span> \n    <span class=\"n\">regexp_split_to_array</span><span class=\"p\">(</span>\n      <span class=\"n\">regexp_split_to_table</span><span class=\"p\">(</span>\n        <span class=\"s1\">'1,taro,hello</span><span class=\"se\">\\n</span><span class=\"s1\">2,jiro,konnichiha'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'</span><span class=\"se\">\\\\</span><span class=\"s1\">n'</span><span class=\"p\">),</span>\n      <span class=\"s1\">','</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">cols</span>\n  <span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">awful</span>\n<span class=\"k\">order</span> <span class=\"k\">by</span>\n  <span class=\"n\">id</span>\n<span class=\"p\">;</span>\n</code></pre></div>\n</div>\n\n<p><a href=\"https://camo.qiitausercontent.com/1c4fbe8e65bc18f306386a315730c7fe453601b7/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3130363235392f65383333643136312d333931352d376434652d336433322d3438363866343534663734652e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2Fe833d161-3915-7d4e-3d32-4868f454f74e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=a2d7d852bd2b7dbf9566099ff02bc1dc\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/e833d161-3915-7d4e-3d32-4868f454f74e.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2Fe833d161-3915-7d4e-3d32-4868f454f74e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=af89519d5cb5a3aad16aad00253f125e 1x\" loading=\"lazy\"></a></p>\n\n<p>本番のコードで使っちゃだめぞ🙅‍♂️</p>\n",
      "body": "調査やリカバリなどで手元に↓のようなcsvっぽい文字列があって、テンポラリテーブル作るのが億劫な時に、\n\n```text:sample.csv\n1,taro,hello\n2,jiro,konnnichiha\n```\n\nこうすると手軽に表が作れます\n`,`を`\\t`にすればTSVもできるでしょう\n\n```sql:awful.sql\nselect\n  cols[1] as id,\n  cols[2] as name,\n  cols[3] as msg\nfrom (\n  select \n    regexp_split_to_array(\n      regexp_split_to_table(\n        '1,taro,hello\\n2,jiro,konnichiha',\n        '\\\\n'),\n      ',') as cols\n  ) as awful\norder by\n  id\n;\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/e833d161-3915-7d4e-3d32-4868f454f74e.png)\n\n本番のコードで使っちゃだめぞ🙅‍♂️\n",
      "coediting": false,
      "comments_count": 0,
      "created_at": "2020-02-24T12:23:34+09:00",
      "group": null,
      "id": "cf0d990e5394dfe03231",
      "likes_count": 0,
      "private": false,
      "reactions_count": 0,
      "stocks_count": 0,
      "tags": [
        {
          "name": "SQL",
          "versions": []
        },
        {
          "name": "PostgreSQL",
          "versions": []
        }
      ],
      "title": "PostgreSQLでCSV文字列から表を作る",
      "updated_at": "2020-02-24T12:25:03+09:00",
      "url": "https://qiita.com/yktakaha4/items/cf0d990e5394dfe03231",
      "user": {
        "description": "",
        "facebook_id": "",
        "followees_count": 26,
        "followers_count": 23,
        "github_login_name": "yktakaha4",
        "id": "yktakaha4",
        "items_count": 27,
        "linkedin_id": "",
        "location": "",
        "name": "Yuuki Takahashi",
        "organization": "LAPRAS株式会社",
        "permanent_id": 106259,
        "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/profile-images/1600489516",
        "team_only": false,
        "twitter_screen_name": "yktakaha4",
        "website_url": "https://yktakaha4.github.io/"
      },
      "page_views_count": null,
      "team_membership": null,
      "organization_url_name": null,
      "slide": false
    },
    {
      "rendered_body": "<p>VPN接続などで社内ネットワーク（というかインスタンスのプライベートIPにアクセスできるネットワーク）に接続しているPCから、パブリックIPを付与したPackerのEC2インスタンスをビルドしたいときは <code>ssh_interface</code> に <code>private</code> を指定するといい感じに動きます</p>\n\n<p><a href=\"https://www.packer.io/docs/builders/amazon-ebs.html#ssh_interface\" rel=\"nofollow noopener\" target=\"_blank\">ドキュメント</a>を見るとなんとも言えない感じですが、<a href=\"https://github.com/hashicorp/packer/blob/f0461da1a1a6234c934ecacf1c16a7458d1a088b/website/source/partials/helper/communicator/_SSHInterface-not-required.html.md\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a>など見るとちゃんと記載があります</p>\n\n<blockquote>\n<p>One of public_ip, private_ip, public_dns, or private_dns.</p>\n</blockquote>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">抜粋</span></div>\n<div class=\"highlight\"><pre><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"builders\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n    </span><span class=\"p\">{</span><span class=\"w\">\n      </span><span class=\"nl\">\"type\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"amazon-ebs\"</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"associate_public_ip_address\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"ssh_interface\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"private_ip\"</span><span class=\"w\">\n    </span><span class=\"p\">}</span><span class=\"w\">\n  </span><span class=\"p\">]</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div>\n</div>\n\n<p>自分は指摘してもらって分かったことだったのですが、<br>\n作業してて詰まったときはリポジトリそのものを調べるのも大事ですね...！</p>\n",
      "body": "VPN接続などで社内ネットワーク（というかインスタンスのプライベートIPにアクセスできるネットワーク）に接続しているPCから、パブリックIPを付与したPackerのEC2インスタンスをビルドしたいときは `ssh_interface` に `private` を指定するといい感じに動きます\n\n[ドキュメント](https://www.packer.io/docs/builders/amazon-ebs.html#ssh_interface)を見るとなんとも言えない感じですが、[こちら](https://github.com/hashicorp/packer/blob/f0461da1a1a6234c934ecacf1c16a7458d1a088b/website/source/partials/helper/communicator/_SSHInterface-not-required.html.md)など見るとちゃんと記載があります\n\n>  One of public_ip, private_ip, public_dns, or private_dns.\n\n```json:抜粋\n{\n  \"builders\": [\n    {\n      \"type\": \"amazon-ebs\",\n      \"associate_public_ip_address\": true,\n      \"ssh_interface\": \"private_ip\"\n    }\n  ]\n}\n```\n\n自分は指摘してもらって分かったことだったのですが、\n作業してて詰まったときはリポジトリそのものを調べるのも大事ですね...！\n",
      "coediting": false,
      "comments_count": 0,
      "created_at": "2020-02-01T13:03:22+09:00",
      "group": null,
      "id": "e842f5be06f84ab15b10",
      "likes_count": 1,
      "private": false,
      "reactions_count": 0,
      "stocks_count": 0,
      "tags": [
        {
          "name": "AWS",
          "versions": []
        },
        {
          "name": "packer",
          "versions": []
        }
      ],
      "title": "社内ネットワークからパブリックIP付きのインスタンスでPacker buildする",
      "updated_at": "2020-02-01T13:03:22+09:00",
      "url": "https://qiita.com/yktakaha4/items/e842f5be06f84ab15b10",
      "user": {
        "description": "",
        "facebook_id": "",
        "followees_count": 26,
        "followers_count": 23,
        "github_login_name": "yktakaha4",
        "id": "yktakaha4",
        "items_count": 27,
        "linkedin_id": "",
        "location": "",
        "name": "Yuuki Takahashi",
        "organization": "LAPRAS株式会社",
        "permanent_id": 106259,
        "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/profile-images/1600489516",
        "team_only": false,
        "twitter_screen_name": "yktakaha4",
        "website_url": "https://yktakaha4.github.io/"
      },
      "page_views_count": null,
      "team_membership": null,
      "organization_url_name": null,
      "slide": false
    },
    {
      "rendered_body": "\n<h1>\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n\n<p>個人開発のネタとして所有しているMP3ファイルのタグ情報を抽出したくなったので調べてみました🪕</p>\n\n<h1>\n<span id=\"方法\" class=\"fragment\"></span><a href=\"#%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>方法</h1>\n\n<p><code>ffmpeg</code>にくっついてくる<code>ffprobe</code>というコマンドを使うため、<a href=\"https://brew.sh/index_ja\" rel=\"nofollow noopener\" target=\"_blank\">Homebrew</a>を使って入れます</p>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><code><span class=\"gp\">$</span><span class=\"w\"> </span>brew <span class=\"nb\">install </span>ffmpeg\n</code></pre></div></div>\n\n<p>以下ようなシェルスクリプトを任意のディレクトリに作成して...</p>\n\n<div class=\"code-frame\" data-lang=\"shell\">\n<div class=\"code-lang\"><span class=\"bold\">tag2json.bash</span></div>\n<div class=\"highlight\"><pre><code><span class=\"c\">#!/bin/bash -eu</span>\n\n<span class=\"nv\">input_dir</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"si\">$(</span><span class=\"nb\">cd</span> <span class=\"s2\">\"</span><span class=\"nv\">$1</span><span class=\"s2\">\"</span><span class=\"p\">;</span> <span class=\"nb\">pwd</span><span class=\"si\">)</span><span class=\"s2\">\"</span>\n<span class=\"nv\">output_dir</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"si\">$(</span><span class=\"nb\">cd</span> <span class=\"s2\">\"</span><span class=\"nv\">$2</span><span class=\"s2\">\"</span><span class=\"p\">;</span> <span class=\"nb\">pwd</span><span class=\"si\">)</span><span class=\"s2\">\"</span>\n\n<span class=\"o\">(</span>\n  <span class=\"nb\">cd</span> <span class=\"s2\">\"</span><span class=\"nv\">$input_dir</span><span class=\"s2\">\"</span>\n  find <span class=\"nb\">.</span> <span class=\"nt\">-name</span> <span class=\"s2\">\"*.mp3\"</span> |\n  <span class=\"nb\">sort</span> |\n  <span class=\"k\">while </span><span class=\"nb\">read </span>target_path<span class=\"p\">;</span> <span class=\"k\">do\n    </span><span class=\"nb\">echo</span> <span class=\"s2\">\"exporing: </span><span class=\"nv\">$target_path</span><span class=\"s2\">\"</span>\n    <span class=\"nv\">output_path</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"si\">$(</span><span class=\"nb\">dirname</span> <span class=\"s2\">\"</span><span class=\"nv\">$output_dir</span><span class=\"s2\">/</span><span class=\"nv\">$target_path</span><span class=\"s2\">\"</span><span class=\"si\">)</span><span class=\"s2\">/</span><span class=\"si\">$(</span><span class=\"nb\">basename</span> <span class=\"s2\">\"</span><span class=\"nv\">$target_path</span><span class=\"s2\">\"</span> .mp3<span class=\"si\">)</span><span class=\"s2\">.json\"</span>\n\n    <span class=\"nb\">mkdir</span> <span class=\"nt\">-p</span> <span class=\"s2\">\"</span><span class=\"si\">$(</span><span class=\"nb\">dirname</span> <span class=\"s2\">\"</span><span class=\"nv\">$output_path</span><span class=\"s2\">\"</span><span class=\"si\">)</span><span class=\"s2\">\"</span>\n    ffprobe <span class=\"nt\">-v</span> error <span class=\"nt\">-show_entries</span> format <span class=\"nt\">-of</span> json <span class=\"s2\">\"</span><span class=\"nv\">$target_path</span><span class=\"s2\">\"</span> <span class=\"o\">&gt;</span> <span class=\"s2\">\"</span><span class=\"nv\">$output_path</span><span class=\"s2\">\"</span>\n  <span class=\"k\">done</span>\n<span class=\"o\">)</span>\n</code></pre></div>\n</div>\n\n<p>実行します</p>\n\n<div class=\"code-frame\" data-lang=\"console\">\n<div class=\"code-lang\"><span class=\"bold\">ターミナル</span></div>\n<div class=\"highlight\"><pre><code><span class=\"gp\">#</span><span class=\"w\"> </span>mp3がこんな感じであったとして\n<span class=\"gp\">$</span><span class=\"w\"> </span>ll ~/data/music/japanese/さよならポニーテール/ROM/ | <span class=\"nb\">head</span> <span class=\"nt\">-5</span>\n<span class=\"go\">total 545624\n-rw-r--r--@ 1 tkhs  staff   6.8M 11 14 23:34 1-01 新世界交響楽.mp3\n-rw-r--r--@ 1 tkhs  staff   6.9M 11 14 23:34 1-02 ナタリー.mp3\n-rw-r--r--@ 1 tkhs  staff   7.1M 11 14 23:34 1-03 光る街へ.mp3\n-rw-r--r--@ 1 tkhs  staff   7.2M 11 14 23:34 1-04 遠い日の花火.mp3\n\n</span><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">mkdir </span>out\n<span class=\"gp\">$</span><span class=\"w\"> </span>./tag2json.bash ~/data/music/japanese/さよならポニーテール/ROM/ out/\n<span class=\"go\">exporing: ./1-01 新世界交響楽.mp3\nexporing: ./1-02 ナタリー.mp3\nexporing: ./1-03 光る街へ.mp3\nexporing: ./1-04 遠い日の花火.mp3\n（略）\n\n</span><span class=\"gp\">#</span><span class=\"w\"> </span>こんな感じでできあがる\n<span class=\"gp\">$</span><span class=\"w\"> </span>ll out/ | <span class=\"nb\">head</span> <span class=\"nt\">-5</span>\n<span class=\"go\">total 288\n-rw-r--r--  1 tkhs  staff   1.3K  1  5 22:59 1-01 新世界交響楽.json\n-rw-r--r--  1 tkhs  staff   1.3K  1  5 22:59 1-02 ナタリー.json\n-rw-r--r--  1 tkhs  staff   1.3K  1  5 22:59 1-03 光る街へ.json\n-rw-r--r--  1 tkhs  staff   1.3K  1  5 22:59 1-04 遠い日の花火.json\n</span></code></pre></div>\n</div>\n\n<p>MP3タグだけでなく、ファイルサイズや曲の長さなども取得できます🤗</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">出力サンプル</span></div>\n<div class=\"highlight\"><pre><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"format\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nl\">\"filename\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"./1-01 新世界交響楽.mp3\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"nb_streams\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"nb_programs\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"format_name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"mp3\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"format_long_name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"MP2/3 (MPEG audio layer 2/3)\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"start_time\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"0.000000\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"duration\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"282.775544\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"size\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"7086331\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"bit_rate\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"200479\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"probe_score\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">51</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"tags\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n      </span><span class=\"nl\">\"title\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"新世界交響楽\"</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"artist\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"さよならポニーテール\"</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"TCM\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"ふっくん\"</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"album\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"ROM\"</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"track\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"1/12\"</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"TPA\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"1/3\"</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"TS2\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"サヨナラポニーテール\"</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"genre\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Pop\"</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"iTunPGAP\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"0\"</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"encoded_by\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"ミュージック 12.10.1.37\"</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"iTunNORM\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\" 000023F4 ...\"</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"iTunSMPB\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\" 00000000 00000210 ...\"</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"iTunes_CDDB_1\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"AE0DCD0C+265143+12...\"</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"iTunes_CDDB_TrackNumber\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"1\"</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"album_artist\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"さよならポニーテール\"</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"TSP\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"サヨナラポニーテール\"</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"date\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"2019\"</span><span class=\"w\">\n    </span><span class=\"p\">}</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div>\n</div>\n\n<h1>\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n\n<p><a href=\"https://qiita.com/PianoScoreJP/items/dcb875757a703c8f3322\" class=\"autolink\" id=\"reference-b901a14127bdb6447872\">https://qiita.com/PianoScoreJP/items/dcb875757a703c8f3322</a><br>\n<a href=\"https://nico-lab.net/how_to_use_ffprobe/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://nico-lab.net/how_to_use_ffprobe/</a></p>\n",
      "body": "# はじめに\n\n個人開発のネタとして所有しているMP3ファイルのタグ情報を抽出したくなったので調べてみました🪕\n\n# 方法\n\n`ffmpeg`にくっついてくる`ffprobe`というコマンドを使うため、[Homebrew](https://brew.sh/index_ja)を使って入れます\n\n```terminal\n$ brew install ffmpeg\n```\n\n以下ようなシェルスクリプトを任意のディレクトリに作成して...\n\n```tag2json.bash\n#!/bin/bash -eu\n\ninput_dir=\"$(cd \"$1\"; pwd)\"\noutput_dir=\"$(cd \"$2\"; pwd)\"\n\n(\n  cd \"$input_dir\"\n  find . -name \"*.mp3\" |\n  sort |\n  while read target_path; do\n    echo \"exporing: $target_path\"\n    output_path=\"$(dirname \"$output_dir/$target_path\")/$(basename \"$target_path\" .mp3).json\"\n\n    mkdir -p \"$(dirname \"$output_path\")\"\n    ffprobe -v error -show_entries format -of json \"$target_path\" > \"$output_path\"\n  done\n)\n```\n\n実行します\n\n```console:ターミナル\n# mp3がこんな感じであったとして\n$ ll ~/data/music/japanese/さよならポニーテール/ROM/ | head -5\ntotal 545624\n-rw-r--r--@ 1 tkhs  staff   6.8M 11 14 23:34 1-01 新世界交響楽.mp3\n-rw-r--r--@ 1 tkhs  staff   6.9M 11 14 23:34 1-02 ナタリー.mp3\n-rw-r--r--@ 1 tkhs  staff   7.1M 11 14 23:34 1-03 光る街へ.mp3\n-rw-r--r--@ 1 tkhs  staff   7.2M 11 14 23:34 1-04 遠い日の花火.mp3\n\n$ mkdir out\n$ ./tag2json.bash ~/data/music/japanese/さよならポニーテール/ROM/ out/\nexporing: ./1-01 新世界交響楽.mp3\nexporing: ./1-02 ナタリー.mp3\nexporing: ./1-03 光る街へ.mp3\nexporing: ./1-04 遠い日の花火.mp3\n（略）\n\n# こんな感じでできあがる\n$ ll out/ | head -5\ntotal 288\n-rw-r--r--  1 tkhs  staff   1.3K  1  5 22:59 1-01 新世界交響楽.json\n-rw-r--r--  1 tkhs  staff   1.3K  1  5 22:59 1-02 ナタリー.json\n-rw-r--r--  1 tkhs  staff   1.3K  1  5 22:59 1-03 光る街へ.json\n-rw-r--r--  1 tkhs  staff   1.3K  1  5 22:59 1-04 遠い日の花火.json\n```\n\nMP3タグだけでなく、ファイルサイズや曲の長さなども取得できます🤗\n\n```json:出力サンプル\n{\n  \"format\": {\n    \"filename\": \"./1-01 新世界交響楽.mp3\",\n    \"nb_streams\": 2,\n    \"nb_programs\": 0,\n    \"format_name\": \"mp3\",\n    \"format_long_name\": \"MP2/3 (MPEG audio layer 2/3)\",\n    \"start_time\": \"0.000000\",\n    \"duration\": \"282.775544\",\n    \"size\": \"7086331\",\n    \"bit_rate\": \"200479\",\n    \"probe_score\": 51,\n    \"tags\": {\n      \"title\": \"新世界交響楽\",\n      \"artist\": \"さよならポニーテール\",\n      \"TCM\": \"ふっくん\",\n      \"album\": \"ROM\",\n      \"track\": \"1/12\",\n      \"TPA\": \"1/3\",\n      \"TS2\": \"サヨナラポニーテール\",\n      \"genre\": \"Pop\",\n      \"iTunPGAP\": \"0\",\n      \"encoded_by\": \"ミュージック 12.10.1.37\",\n      \"iTunNORM\": \" 000023F4 ...\",\n      \"iTunSMPB\": \" 00000000 00000210 ...\",\n      \"iTunes_CDDB_1\": \"AE0DCD0C+265143+12...\",\n      \"iTunes_CDDB_TrackNumber\": \"1\",\n      \"album_artist\": \"さよならポニーテール\",\n      \"TSP\": \"サヨナラポニーテール\",\n      \"date\": \"2019\"\n    }\n  }\n}\n```\n\n# 参考\n\nhttps://qiita.com/PianoScoreJP/items/dcb875757a703c8f3322\nhttps://nico-lab.net/how_to_use_ffprobe/\n",
      "coediting": false,
      "comments_count": 0,
      "created_at": "2020-01-05T23:28:40+09:00",
      "group": null,
      "id": "e4414714827db213e279",
      "likes_count": 1,
      "private": false,
      "reactions_count": 0,
      "stocks_count": 0,
      "tags": [
        {
          "name": "ShellScript",
          "versions": []
        },
        {
          "name": "ffmpeg",
          "versions": []
        },
        {
          "name": "MP3",
          "versions": []
        }
      ],
      "title": "MP3のタグ情報をJSON形式で一括出力する",
      "updated_at": "2020-01-05T23:28:40+09:00",
      "url": "https://qiita.com/yktakaha4/items/e4414714827db213e279",
      "user": {
        "description": "",
        "facebook_id": "",
        "followees_count": 26,
        "followers_count": 23,
        "github_login_name": "yktakaha4",
        "id": "yktakaha4",
        "items_count": 27,
        "linkedin_id": "",
        "location": "",
        "name": "Yuuki Takahashi",
        "organization": "LAPRAS株式会社",
        "permanent_id": 106259,
        "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/profile-images/1600489516",
        "team_only": false,
        "twitter_screen_name": "yktakaha4",
        "website_url": "https://yktakaha4.github.io/"
      },
      "page_views_count": null,
      "team_membership": null,
      "organization_url_name": null,
      "slide": false
    },
    {
      "rendered_body": "<p>こちらは、<a href=\"https://qiita.com/advent-calendar/2019/github-actions\">GitHub Actions Advent Calendar 2019</a> 11日目の記事になります！</p>\n\n<h1>\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n\n<p><a href=\"https://www.hands-lab.com/\" rel=\"nofollow noopener\" target=\"_blank\">ハンズラボ株式会社</a>の<a href=\"https://twitter.com/yktakaha4\" rel=\"nofollow noopener\" target=\"_blank\">yktakaha4</a>です🍲<br>\n普段は、<a href=\"https://qiita.com/homines22/items/7c309cdb093eee3240af\" id=\"reference-8443c87a5fac4fce2cd2\">7日目に投稿しているhomines22さん</a>らと、某小売のポイントシステムや、ECサイトの開発・運用に携わっています<br>\n当初<a href=\"https://qiita.com/advent-calendar/2019/handslab\">弊社のアドベントカレンダー</a>に2枠投稿するつもりで記事を書いていたのですが、参加者が増えて枠を譲ることとしたため、こちらに引っ越しました</p>\n\n<hr>\n\n<p>今年ももうすぐ終わりですね...🎅<br>\n色々ありましたが、業務で大変だったのはやはり消費増税対応（もとい軽減税率対応）でした</p>\n\n<p>機能変更がないため普段見ないフリ🙈をしているあのレガシーコードから、注文や商品といった業務の根幹に関わる大事なこのテーブルまで、あちらこちらに<code>軽減税率区分</code>や<code>税率別合計金額</code>といった項目を追加する...という対応で、<br>\n修正自体は軽微なのに対して業務影響度合いが大きく、小売に関わるシステムをご担当の諸氏にも頭を抱えた方がいらっしゃったものと思います</p>\n\n<p>私個人としても、外部ECサイトとのデータ連携や、注文締め、出荷、お客様へのメール送信などといった様々な箇所に対して改修を行いましたが、<br>\n複数システム・機能間のフロント、API、バッチからデータベースのカラムまで横断的に影響調査を行うのは、中々骨の折れる作業でした</p>\n\n<p>最初はVSCodeやGitHubの検索機能、grepなどで状況に応じて適当に調べていましたが、<br>\n作業の途中からローカル環境に<a href=\"https://github.com/livegrep/livegrep\" rel=\"nofollow noopener\" target=\"_blank\">Livegrep</a>を導入したところ、調査の効率がだいぶ上がり、特に想定外のリポジトリやコードに影響が及んでいた...というケースに事前に気づくことができるようになりました</p>\n\n<p>Livegrepはとてもいいツールでしたが、検索対象のリポジトリやインデクシングを自分で管理する必要があったり、アカウントによるアクセス制御などの機能がついておらず複数人で利用するには不便な部分があったので、<br>\n税対応が完了して最近やっと人心地ついたところで、改めてチームで全文検索の仕組みを手軽に共用できるよう整備することとしました</p>\n\n<h1>\n<span id=\"どんなものを作るか\" class=\"fragment\"></span><a href=\"#%E3%81%A9%E3%82%93%E3%81%AA%E3%82%82%E3%81%AE%E3%82%92%E4%BD%9C%E3%82%8B%E3%81%8B\"><i class=\"fa fa-link\"></i></a>どんなものを作るか</h1>\n\n<p>今回は、アカウント管理やリポジトリの自動クローリングといった機能がついた全文検索システムである<a href=\"https://github.com/sourcegraph/sourcegraph\" rel=\"nofollow noopener\" target=\"_blank\">Sourcegraph</a>のOSS版を使うことにしました<br>\n<a href=\"https://knowledge.sakura.ad.jp/21833/\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a>の記事に非常によくまとまっていますが、runするだけで即座に利用できる便利な<a href=\"https://hub.docker.com/r/sourcegraph/server/\" rel=\"nofollow noopener\" target=\"_blank\">Dockerイメージが公開されている</a>ので、こちらをAWSで運用します🐳</p>\n\n<p>社内向けの用途でスケーリングも必要なく、かつインスタンス停止時にデータを残したかったので、<br>\nDockerがインストールされたEC2をCloudFormationで作成しようと思います<br>\nまた、弊社の標準的な勤務時間は10時から19時なので、それ以外の時間帯はインスタンスを停止させ、なるべく低コストに運用できると良さそうです</p>\n\n<p>ということで、アーキテクチャは以下のような形になりました🍠</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/fe715982189ba5a9465b5a05b4e0429a2ba38e8e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3130363235392f61643731616433342d623539662d653462332d643737332d6238346130363137653232322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2Fad71ad34-b59f-e4b3-d773-b84a0617e222.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=062e642052969529349b7d30acc1caef\" alt=\"アーキテクチャ.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/ad71ad34-b59f-e4b3-d773-b84a0617e222.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2Fad71ad34-b59f-e4b3-d773-b84a0617e222.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=b48fe5c6e894303fbf31d5ed27d94a84 1x\" loading=\"lazy\"></a></p>\n\n<p>CloudFormationのデプロイとEC2インスタンスの起動および停止はGitHub Actionsを用いて行います<br>\n本記事の執筆時点で、指定時間にインスタンスを立ち上げるにはCloudWatch EventsからLambdaを実行する必要があるようですが、<br>\nGitHub Actionsには<a href=\"https://help.github.com/ja/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions#onschedule\" rel=\"nofollow noopener\" target=\"_blank\">所定のワークフローを定期実行する機能</a>があるので、こいつでAWS CLIを呼び出すようにすれば手軽にインスタンスの起動・停止が実現できそうです</p>\n\n<h1>\n<span id=\"できたもの\" class=\"fragment\"></span><a href=\"#%E3%81%A7%E3%81%8D%E3%81%9F%E3%82%82%E3%81%AE\"><i class=\"fa fa-link\"></i></a>できたもの</h1>\n\n<p>会社で実際に使っているものは社内ネットワークでの利用を前提とした構成になっているので、<br>\nインターネットアクセスが可能な形に修正したものを以下リポジトリに公開しました<img alt=\":octocat:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/octocat.png\" title=\":octocat:\" width=\"20\" loading=\"lazy\"></p>\n\n<p><qiita-embed-ogp src=\"https://github.com/yktakaha4/sourcegraph-ec2\"></qiita-embed-ogp></p>\n\n<h2>\n<span id=\"構築手順\" class=\"fragment\"></span><a href=\"#%E6%A7%8B%E7%AF%89%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>構築手順</h2>\n\n<p>まず、リポジトリをフォークします🍴</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/726b7dd98f4381d262a66ff24fb45407eaf6a9ba/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3130363235392f63356133363138302d613561392d316339382d636631352d3263376461643238316636362e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2Fc5a36180-a5a9-1c98-cf15-2c7dad281f66.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=6434939eaf2d75f58376fe1b80155906\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/c5a36180-a5a9-1c98-cf15-2c7dad281f66.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2Fc5a36180-a5a9-1c98-cf15-2c7dad281f66.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=f8f424d47a7f57fcfcd7aeced3627751 1x\" loading=\"lazy\"></a></p>\n\n<p>フォーク直後だとGitHub Actionsが有効にならないようなので、<code>Actions</code>タブから有効化しておきます（スクショ撮り忘れた...）</p>\n\n<p><code>Settings -&gt; Secrets -&gt; Add a new secret</code> で、以下の値を設定します</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/44f8a20cc284afb34164c43199e0e80326506e2e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3130363235392f32303038323062372d323439372d333533382d343432322d6533366164323139383866392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2F200820b7-2497-3538-4422-e36ad21988f9.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=715250c0bd39c9fd00a91fd3975e0858\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/200820b7-2497-3538-4422-e36ad21988f9.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2F200820b7-2497-3538-4422-e36ad21988f9.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=fc51ec42e20372f44290a0808875cb69 1x\" loading=\"lazy\"></a></p>\n\n<table>\n<thead>\n<tr>\n<th>キー</th>\n<th>説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>AWS_ACCESS_KEY_ID</td>\n<td>AWSのアクセスキーID</td>\n</tr>\n<tr>\n<td>AWS_SECRET_ACCESS_KEY</td>\n<td>AWSのアクセスキー</td>\n</tr>\n<tr>\n<td>AWS_DEFAULT_REGION</td>\n<td>デプロイ先のリージョン<br><code>ap-northeast-1</code>など</td>\n</tr>\n<tr>\n<td>RESOURCE_NAME</td>\n<td>AWS上でのリソース名<br><code>sourcegraph-ec2</code>など</td>\n</tr>\n<tr>\n<td>AVAILABILITY_ZONE</td>\n<td>デプロイ先のアベイラビリティゾーン<br><code>ap-northeast-1c</code>など</td>\n</tr>\n<tr>\n<td>SUBNET_ID</td>\n<td>デプロイ先のサブネットID<br><code>AVAILABILITY_ZONE</code>配下のサブネットを指定すること</td>\n</tr>\n<tr>\n<td>SECURITY_GROUP_ID_LIST</td>\n<td>セキュリティグループID（複数指定時はカンマ区切り）<br>TCP443と2633ポートを開放したものを指定</td>\n</tr>\n</tbody>\n</table>\n\n<p>シークレットが指定できたら、なんでもよいので<code>master</code>ブランチにプッシュします<br>\nとりあえずなのでREADME.mdをいじります</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/333859b4fcad21b00616dbc63e2d11b5efbb31db/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3130363235392f37383365366632392d343135372d316633642d653438372d6130366639636636303633632e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2F783e6f29-4157-1f3d-e487-a06f9cf6063c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=06f4e31df25fe73d6b13c7e78a2da0a8\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/783e6f29-4157-1f3d-e487-a06f9cf6063c.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2F783e6f29-4157-1f3d-e487-a06f9cf6063c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=b467ee4b82d54cf30b3f17e4f1611b50 1x\" loading=\"lazy\"></a></p>\n\n<p>適当に文面を編集の上、コミットします</p>\n\n<p>この記事を書いていて思い至ったのですが、これだと横展開がしづらいので、タグ打ったらデプロイ...みたいな感じにした方がよいですね<br>\nあるいはワークフローの手動実行ができるとよいのですが...</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/1b0e3f97a30ba76d2e02e70e1324910b6492ff64/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3130363235392f30613863333861622d363030612d343233632d373230352d3633336430653738316633302e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2F0a8c38ab-600a-423c-7205-633d0e781f30.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=d175221433cd65cf8af0aa72b0aee858\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/0a8c38ab-600a-423c-7205-633d0e781f30.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2F0a8c38ab-600a-423c-7205-633d0e781f30.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=d14f0ce3d06373719777b691d8721356 1x\" loading=\"lazy\"></a></p>\n\n<p><code>master</code>ブランチが更新されると、CloudFormation上に<code>RESOURCE_NAME</code> で指定したスタックが生成されます</p>\n\n<div class=\"code-frame\" data-lang=\"yaml\">\n<div class=\"code-lang\"><span class=\"bold\">deploy.yml</span></div>\n<div class=\"highlight\"><pre><code><span class=\"na\">on</span><span class=\"pi\">:</span>\n  <span class=\"na\">push</span><span class=\"pi\">:</span>\n    <span class=\"na\">branches</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"s\">master</span>\n\n<span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Deploy</span>\n\n<span class=\"na\">jobs</span><span class=\"pi\">:</span>\n  <span class=\"na\">deploy</span><span class=\"pi\">:</span>\n    <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Deploy to AWS</span>\n    <span class=\"na\">runs-on</span><span class=\"pi\">:</span> <span class=\"s\">ubuntu-18.04</span>\n    <span class=\"na\">steps</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"na\">uses</span><span class=\"pi\">:</span> <span class=\"s\">actions/checkout@v1</span>\n\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Setup Python </span><span class=\"m\">3.7</span>\n        <span class=\"na\">uses</span><span class=\"pi\">:</span> <span class=\"s\">actions/setup-python@v1</span>\n        <span class=\"na\">with</span><span class=\"pi\">:</span>\n          <span class=\"na\">python-version</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">3.7\"</span>\n          <span class=\"na\">architecture</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">x64\"</span>\n\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Install awscli</span>\n        <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"s\">pip install --upgrade pip awscli</span>\n\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Deploy CloudFormation Stack</span>\n        <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"s\">./scripts/deploy.bash</span>\n        <span class=\"na\">env</span><span class=\"pi\">:</span>\n          <span class=\"na\">AWS_ACCESS_KEY_ID</span><span class=\"pi\">:</span> <span class=\"s\">${{ secrets.AWS_ACCESS_KEY_ID }}</span>\n          <span class=\"na\">AWS_SECRET_ACCESS_KEY</span><span class=\"pi\">:</span> <span class=\"s\">${{ secrets.AWS_SECRET_ACCESS_KEY }}</span>\n          <span class=\"na\">AWS_DEFAULT_REGION</span><span class=\"pi\">:</span> <span class=\"s\">${{ secrets.AWS_DEFAULT_REGION }}</span>\n          <span class=\"na\">RESOURCE_NAME</span><span class=\"pi\">:</span> <span class=\"s\">${{ secrets.RESOURCE_NAME }}</span>\n          <span class=\"na\">AVAILABILITY_ZONE</span><span class=\"pi\">:</span> <span class=\"s\">${{ secrets.AVAILABILITY_ZONE }}</span>\n          <span class=\"na\">SUBNET_ID</span><span class=\"pi\">:</span> <span class=\"s\">${{ secrets.SUBNET_ID }}</span>\n          <span class=\"na\">SECURITY_GROUP_ID_LIST</span><span class=\"pi\">:</span> <span class=\"s\">${{ secrets.SECURITY_GROUP_ID_LIST }}</span>\n</code></pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"bash\">\n<div class=\"code-lang\"><span class=\"bold\">deploy.bash</span></div>\n<div class=\"highlight\"><pre><code><span class=\"c\">#!/bin/bash -eu</span>\n\n<span class=\"nv\">base_dir</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"si\">$(</span><span class=\"nb\">cd</span> <span class=\"s2\">\"</span><span class=\"si\">$(</span><span class=\"nb\">dirname</span> <span class=\"nv\">$0</span><span class=\"si\">)</span><span class=\"s2\">/..\"</span><span class=\"p\">;</span> <span class=\"nb\">pwd</span><span class=\"si\">)</span><span class=\"s2\">\"</span>\n\naws cloudformation deploy <span class=\"se\">\\</span>\n    <span class=\"nt\">--stack-name</span> <span class=\"s2\">\"</span><span class=\"nv\">$RESOURCE_NAME</span><span class=\"s2\">\"</span> <span class=\"se\">\\</span>\n    <span class=\"nt\">--template-file</span> <span class=\"s2\">\"</span><span class=\"nv\">$base_dir</span><span class=\"s2\">/aws/cfn.yml\"</span> <span class=\"se\">\\</span>\n    <span class=\"nt\">--capabilities</span> CAPABILITY_NAMED_IAM <span class=\"se\">\\</span>\n    <span class=\"nt\">--no-fail-on-empty-changeset</span> <span class=\"se\">\\</span>\n    <span class=\"nt\">--parameter-overrides</span> <span class=\"se\">\\</span>\n        <span class=\"nv\">ResourceName</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"nv\">$RESOURCE_NAME</span><span class=\"s2\">\"</span> <span class=\"se\">\\</span>\n        <span class=\"nv\">AvailabilityZoneName</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"nv\">$AVAILABILITY_ZONE</span><span class=\"s2\">\"</span> <span class=\"se\">\\</span>\n        <span class=\"nv\">SubnetId</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"nv\">$SUBNET_ID</span><span class=\"s2\">\"</span> <span class=\"se\">\\</span>\n        <span class=\"nv\">SecurityGroupIdList</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"nv\">$SECURITY_GROUP_ID_LIST</span><span class=\"s2\">\"</span>\n</code></pre></div>\n</div>\n\n<p><a href=\"https://camo.qiitausercontent.com/a29906efe269489289c0f780ba5aa84af441c85e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3130363235392f36346466313438352d316532632d643231342d363037322d6364363962303831636239392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2F64df1485-1e2c-d214-6072-cd69b081cb99.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=c8c1a14ab481e3af7fb1b5a0a315b017\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/64df1485-1e2c-d214-6072-cd69b081cb99.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2F64df1485-1e2c-d214-6072-cd69b081cb99.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=f71896851d9acc767c2b9ad62c32d495 1x\" loading=\"lazy\"></a></p>\n\n<p><a href=\"https://camo.qiitausercontent.com/715af9792e765539354d49f9ad0773d34daebe95/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3130363235392f38363765323237312d303161302d646365302d333133312d3631646338663764646633642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2F867e2271-01a0-dce0-3131-61dc8f7ddf3d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=1d0143852623fa529e8cd0917d733131\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/867e2271-01a0-dce0-3131-61dc8f7ddf3d.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2F867e2271-01a0-dce0-3131-61dc8f7ddf3d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=812eeb2aab71a072386d551231c9951a 1x\" loading=\"lazy\"></a></p>\n\n<p>インスタンスができたら、パブリックIPを確認し、接続してみます</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/9cf7287b33452e84258608d778784a4b72cccde9/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3130363235392f65383532333530332d663632392d356439362d653565362d3866623162393236303865322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2Fe8523503-f629-5d96-e5e6-8fb1b92608e2.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=5e077de6fe703ff8d71fac2485ac4d32\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/e8523503-f629-5d96-e5e6-8fb1b92608e2.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2Fe8523503-f629-5d96-e5e6-8fb1b92608e2.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=df158c54d40e28ad7e63ad20834ed14c 1x\" loading=\"lazy\"></a></p>\n\n<p>Sourcegraphはソースコード検索用途のため、httpでは運用したくありません<br>\n幸いなことに、デフォルトで管理画面向けに自己署名のSSL証明書を発行する仕様となっているため、こいつを使ってhttps通信をおこなうこととします</p>\n\n<p><code>https://インスタンスのパブリックIP/</code>に接続すると、以下メッセージが表示されます<br>\n接続できない場合は、セキュリティグループでTCP443ポートと2633ポートが空いていることを確認してください</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/757605a95c3108778028e6bfc946a831f7c89af7/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3130363235392f34383731643231332d323163662d626633612d336139382d6365333031626136623365652e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2F4871d213-21cf-bf3a-3a98-ce301ba6b3ee.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=df7f2a19bb18ebbe793358304337a814\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/4871d213-21cf-bf3a-3a98-ce301ba6b3ee.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2F4871d213-21cf-bf3a-3a98-ce301ba6b3ee.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=8d4527acbbecc5358c0e4d61aa34c185 1x\" loading=\"lazy\"></a></p>\n\n<p>https通信にあたり、証明書が不審のため接続を渋られている状況です<br>\nGoogle Chromeであれば<code>保護されていない通信 -&gt; 証明書（無効） <br>\n -&gt; 詳細な情報</code>と開いていくと、<code>指紋</code>の項にフィンガープリントが表示されています</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/3b2f839ac776ea388b950d092b0c09e580fd56c1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3130363235392f37306436366538642d353464622d396439312d663537632d3064366430363462346530622e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2F70d66e8d-54db-9d91-f57c-0d6d064b4e0b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=80485afe1bdc7d2e286b442aa1101210\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/70d66e8d-54db-9d91-f57c-0d6d064b4e0b.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2F70d66e8d-54db-9d91-f57c-0d6d064b4e0b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=a92edf8e977321ef8722562c12c78660 1x\" loading=\"lazy\"></a></p>\n\n<p>要はこの証明書が信頼できるものか判断できればいい...ということですが、<br>\n本リポジトリでは、インスタンス構築時に生成した証明書のフィンガープリントをCloudwatchLogsに吐き出すようにしています</p>\n\n<p><code>Cloudwatch -&gt; ロググループ -&gt; /var/log/messages -&gt; インスタンスID</code>を開いたのち、<code>cert</code>でログをフィルタすると表示されますので、<br>\n値が一致することを確認し、問題なければ証明書の信頼設定を行います</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/2c77ef000da7f871208dde35a40a99242a2af8ac/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3130363235392f65343434343431332d633934392d333064642d306532322d3135636230663636343737332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2Fe4444413-c949-30dd-0e22-15cb0f664773.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=626968fd06eeb489690cdabb96266e81\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/e4444413-c949-30dd-0e22-15cb0f664773.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2Fe4444413-c949-30dd-0e22-15cb0f664773.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=8bc153f7734091da05cdbbd5ba550535 1x\" loading=\"lazy\"></a></p>\n\n<p>Google Chrome上で表示されている証明書アイコンをデスクトップにドロップしてダウンロードの後、<br>\nダブルクリックするとキーチェーンアクセスが表示されます</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/399223bb3ac42eb2b2e425b8163ad0b4c76f082e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3130363235392f64613236616238362d323230312d363537622d363733632d3039383537363966653761642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2Fda26ab86-2201-657b-673c-0985769fe7ad.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=5d181dfa98d7c20dad9df32b5d01e509\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/da26ab86-2201-657b-673c-0985769fe7ad.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2Fda26ab86-2201-657b-673c-0985769fe7ad.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=4dcba1baf748acdcdd478ec0f49cbc82 1x\" loading=\"lazy\"></a></p>\n\n<p><code>今回追加した証明書を右クリック -&gt; 情報を見る -&gt; 信頼 -&gt; この証明書を使用するとき</code>で<code>常に信頼</code>を選び、<br>\nウィンドウを閉じる際にログインユーザのパスワードを入力すると、証明書が信頼されているものとして指定されます</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/4db37ad257c39c76b36c1ea942083eb9a47bf9a2/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3130363235392f34633835313165612d343561342d616361622d313336302d6364353830393830346232642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2F4c8511ea-45a4-acab-1360-cd5809804b2d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=9930d39fd83313f5026ade2a34b04633\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/4c8511ea-45a4-acab-1360-cd5809804b2d.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2F4c8511ea-45a4-acab-1360-cd5809804b2d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=54b74f00a1384db08edfb6c1944ec943 1x\" loading=\"lazy\"></a></p>\n\n<p>再度先ほどのURLにアクセスすると、<code>詳細設定を表示</code>を押した後の画面で、接続先へのアクセスが可能になっています</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/833ff67beb006f86e433c26efba24906f2d6ca27/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3130363235392f66666230383463322d333864342d323831352d626539662d3430386561353236643966342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2Fffb084c2-38d4-2815-be9f-408ea526d9f4.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=e28f33b23fe12dc52e0ed853e48670cb\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/ffb084c2-38d4-2815-be9f-408ea526d9f4.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2Fffb084c2-38d4-2815-be9f-408ea526d9f4.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=be185d496e9dae4c7cc16405584e29a5 1x\" loading=\"lazy\"></a></p>\n\n<p>いい感じですね！</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/3e3ce40d8b98314d8a527dfa8250ddb2bf425b2a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3130363235392f30373934643836662d616265392d373663642d633939312d6630303762633062356466652e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2F0794d86f-abe9-76cd-c991-f007bc0b5dfe.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=46323c0cb189c81bf59f72c26ec9d900\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/0794d86f-abe9-76cd-c991-f007bc0b5dfe.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2F0794d86f-abe9-76cd-c991-f007bc0b5dfe.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=90bd2ec243793880f0aa6431f1152622 1x\" loading=\"lazy\"></a></p>\n\n<p>これ以降の設定は、先ほどの<a href=\"https://knowledge.sakura.ad.jp/21833/\" rel=\"nofollow noopener\" target=\"_blank\">さくらのナレッジ様の構築手順</a>の<code>Sourcegraphの初期設定</code>の項を参考に行ってください！</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">管理画面の設定サンプル（ご参考）</span></div>\n<div class=\"highlight\"><pre><code><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">The</span><span class=\"w\"> </span><span class=\"err\">externally</span><span class=\"w\"> </span><span class=\"err\">accessible</span><span class=\"w\"> </span><span class=\"err\">URL</span><span class=\"w\"> </span><span class=\"err\">for</span><span class=\"w\"> </span><span class=\"err\">Sourcegraph</span><span class=\"w\"> </span><span class=\"err\">(i.e.</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">what</span><span class=\"w\"> </span><span class=\"err\">you</span><span class=\"w\"> </span><span class=\"err\">type</span><span class=\"w\"> </span><span class=\"err\">into</span><span class=\"w\"> </span><span class=\"err\">your</span><span class=\"w\"> </span><span class=\"err\">browser)</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">This</span><span class=\"w\"> </span><span class=\"err\">is</span><span class=\"w\"> </span><span class=\"err\">required</span><span class=\"w\"> </span><span class=\"err\">to</span><span class=\"w\"> </span><span class=\"err\">be</span><span class=\"w\"> </span><span class=\"err\">configured</span><span class=\"w\"> </span><span class=\"err\">for</span><span class=\"w\"> </span><span class=\"err\">Sourcegraph</span><span class=\"w\"> </span><span class=\"err\">to</span><span class=\"w\"> </span><span class=\"err\">work</span><span class=\"w\"> </span><span class=\"err\">correctly.</span><span class=\"w\">\n    </span><span class=\"nl\">\"externalURL\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"https://ec2-52-194-175-117.ap-northeast-1.compute.amazonaws.com\"</span><span class=\"p\">,</span><span class=\"w\">\n\n    </span><span class=\"nl\">\"auth.providers\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n        </span><span class=\"p\">{</span><span class=\"w\">\n            </span><span class=\"nl\">\"type\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"builtin\"</span><span class=\"p\">,</span><span class=\"w\">\n            </span><span class=\"nl\">\"allowSignup\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\">\n        </span><span class=\"p\">}</span><span class=\"w\">\n    </span><span class=\"p\">]</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div>\n</div>\n\n<h2>\n<span id=\"運用\" class=\"fragment\"></span><a href=\"#%E9%81%8B%E7%94%A8\"><i class=\"fa fa-link\"></i></a>運用</h2>\n\n<p>平日の8:30にインスタンスの自動起動と、毎日19:30にインスタンスの自動停止がおこなわれます🍜</p>\n\n<div class=\"code-frame\" data-lang=\"yaml\">\n<div class=\"code-lang\"><span class=\"bold\">start_instance.yml</span></div>\n<div class=\"highlight\"><pre><code><span class=\"na\">on</span><span class=\"pi\">:</span>\n  <span class=\"na\">schedule</span><span class=\"pi\">:</span>\n    <span class=\"c1\"># 日本時間で月〜金の毎日9時30分に実行</span>\n    <span class=\"pi\">-</span> <span class=\"na\">cron</span><span class=\"pi\">:</span> <span class=\"s\">30 0 * * SUN-THU</span>\n\n<span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Start Instance</span>\n\n<span class=\"na\">jobs</span><span class=\"pi\">:</span>\n  <span class=\"na\">start</span><span class=\"pi\">:</span>\n    <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Start Instance</span>\n    <span class=\"na\">runs-on</span><span class=\"pi\">:</span> <span class=\"s\">ubuntu-18.04</span>\n    <span class=\"na\">steps</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"na\">uses</span><span class=\"pi\">:</span> <span class=\"s\">actions/checkout@v1</span>\n\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Setup Python </span><span class=\"m\">3.7</span>\n        <span class=\"na\">uses</span><span class=\"pi\">:</span> <span class=\"s\">actions/setup-python@v1</span>\n        <span class=\"na\">with</span><span class=\"pi\">:</span>\n          <span class=\"na\">python-version</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">3.7\"</span>\n          <span class=\"na\">architecture</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">x64\"</span>\n\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Install awscli</span>\n        <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"s\">pip install --upgrade pip awscli</span>\n\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Start Instance</span>\n        <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"s\">./scripts/instance.bash start</span>\n        <span class=\"na\">env</span><span class=\"pi\">:</span>\n          <span class=\"na\">AWS_ACCESS_KEY_ID</span><span class=\"pi\">:</span> <span class=\"s\">${{ secrets.AWS_ACCESS_KEY_ID }}</span>\n          <span class=\"na\">AWS_SECRET_ACCESS_KEY</span><span class=\"pi\">:</span> <span class=\"s\">${{ secrets.AWS_SECRET_ACCESS_KEY }}</span>\n          <span class=\"na\">AWS_DEFAULT_REGION</span><span class=\"pi\">:</span> <span class=\"s\">${{ secrets.AWS_DEFAULT_REGION }}</span>\n          <span class=\"na\">RESOURCE_NAME</span><span class=\"pi\">:</span> <span class=\"s\">${{ secrets.RESOURCE_NAME }}</span>\n</code></pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"bash\">\n<div class=\"code-lang\"><span class=\"bold\">instance.bash</span></div>\n<div class=\"highlight\"><pre><code><span class=\"c\">#!/bin/bash -eu</span>\n\n<span class=\"nv\">cmd</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"nv\">$1</span><span class=\"s2\">\"</span>\n\n<span class=\"k\">case</span> <span class=\"s2\">\"</span><span class=\"nv\">$cmd</span><span class=\"s2\">\"</span> <span class=\"k\">in</span>\n  <span class=\"s2\">\"start\"</span><span class=\"p\">)</span>\n    <span class=\"nv\">instance_state</span><span class=\"o\">=</span><span class=\"s2\">\"stopped\"</span>\n    <span class=\"nv\">instance_operation</span><span class=\"o\">=</span><span class=\"s2\">\"start-instances\"</span>\n    <span class=\"p\">;;</span>\n  <span class=\"s2\">\"stop\"</span><span class=\"p\">)</span>\n    <span class=\"nv\">instance_state</span><span class=\"o\">=</span><span class=\"s2\">\"running\"</span>\n    <span class=\"nv\">instance_operation</span><span class=\"o\">=</span><span class=\"s2\">\"stop-instances\"</span>\n    <span class=\"p\">;;</span>\n  <span class=\"k\">*</span> <span class=\"p\">)</span>\n    <span class=\"nb\">echo</span> <span class=\"s2\">\"invalid command: </span><span class=\"nv\">$cmd</span><span class=\"s2\">\"</span>\n    <span class=\"nb\">exit </span>1\n    <span class=\"p\">;;</span>\n<span class=\"k\">esac</span>\n\n<span class=\"nv\">instance_id</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"si\">$(</span>\n  aws ec2 describe-instances <span class=\"nt\">--filters</span> <span class=\"s2\">\"Name=tag:Name,Values=</span><span class=\"nv\">$RESOURCE_NAME</span><span class=\"s2\">\"</span> <span class=\"s2\">\"Name=tag:AutoStart,Values=enabled\"</span> |\n  jq <span class=\"nt\">-r</span> <span class=\"s2\">\".Reservations[].Instances[] | [.InstanceId, .State.Name] | select(.[1]==</span><span class=\"se\">\\\"</span><span class=\"nv\">$instance_state</span><span class=\"se\">\\\"</span><span class=\"s2\">)[0]\"</span> |\n  <span class=\"nb\">head</span> <span class=\"nt\">-1</span>\n<span class=\"si\">)</span><span class=\"s2\">\"</span>\n\n<span class=\"k\">if</span> <span class=\"o\">[</span> <span class=\"nt\">-n</span> <span class=\"s2\">\"</span><span class=\"nv\">$instance_id</span><span class=\"s2\">\"</span> <span class=\"o\">]</span>\n<span class=\"k\">then\n  </span>aws ec2 <span class=\"nv\">$instance_operation</span> <span class=\"nt\">--instance-ids</span> <span class=\"s2\">\"</span><span class=\"nv\">$instance_id</span><span class=\"s2\">\"</span> <span class=\"o\">&gt;</span> /dev/null\n  <span class=\"nb\">echo</span> <span class=\"s2\">\"succeed: resource-name=</span><span class=\"nv\">$RESOURCE_NAME</span><span class=\"s2\">, command=</span><span class=\"nv\">$cmd</span><span class=\"s2\">\"</span>\n\n<span class=\"k\">else\n  </span><span class=\"nb\">echo</span> <span class=\"s2\">\"unfound: resource-name=</span><span class=\"nv\">$RESOURCE_NAME</span><span class=\"s2\">, state=</span><span class=\"nv\">$instance_state</span><span class=\"s2\">\"</span>\n\n<span class=\"k\">fi</span>\n</code></pre></div>\n</div>\n\n<p>自動起動・停止を止めたい場合は、EC2のコンソールからインスタンスのタグ設定を開き、<code>AutoStart</code>キーの値を<code>disabled</code>など任意のものに変更してください</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/703b50b8ff8e4eb4522585b4498e70a4f3f93f84/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3130363235392f32333466363731382d633466642d633665342d316531312d3461323361633032353937322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2F234f6718-c4fd-c6e4-1e11-4a23ac025972.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=d0cfc0392d8e3fd36a1519b72cfb0ec1\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/234f6718-c4fd-c6e4-1e11-4a23ac025972.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2F234f6718-c4fd-c6e4-1e11-4a23ac025972.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=96212eaa7acd8a1fadd5c96cb2b8488d 1x\" loading=\"lazy\"></a></p>\n\n<h2>\n<span id=\"削除\" class=\"fragment\"></span><a href=\"#%E5%89%8A%E9%99%A4\"><i class=\"fa fa-link\"></i></a>削除</h2>\n\n<p>デフォルトだとEC2インスタンスに<code>t2.medium</code> を指定しているため、放っておくと課金されてしまいます<br>\nSourcegraphを削除したい場合は、CloudFormationからスタックの削除を行ってください👋</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/c131bc25de043504d52924988611747ee1d7eb1c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3130363235392f64666332643032342d323062612d623662342d623835622d3532323761656363376632652e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2Fdfc2d024-20ba-b6b4-b85b-5227aecc7f2e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=ef796f12cad296d38ea1ba81e750dfeb\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/dfc2d024-20ba-b6b4-b85b-5227aecc7f2e.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2Fdfc2d024-20ba-b6b4-b85b-5227aecc7f2e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=85f1912d041ec3f05b21faa8df1b6511 1x\" loading=\"lazy\"></a></p>\n\n<h1>\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n\n<p>個人的にはスケジュールタスクはだいぶ強力な機能に感じます...<br>\nDockerコンテナを任意の時刻に実行できる訳ですから、AWSをはじめとした各種クラウドサービスに対してちょっとしたバッチ処理をやりたい時にはうってつけの機能だなと思いました</p>\n\n<p>ちなみに、GitHub Actionsよりも、<a href=\"https://github.com/yktakaha4/sourcegraph-ec2/blob/master/aws/cfn.yml#L115-L181\" rel=\"nofollow noopener\" target=\"_blank\">EC2起動時のUserDataの設定</a>が本記事の中で一番大変だったのですが、本旨から逸れるため割愛します💔</p>\n",
      "body": "こちらは、[GitHub Actions Advent Calendar 2019](https://qiita.com/advent-calendar/2019/github-actions) 11日目の記事になります！\n\n# はじめに\n\n[ハンズラボ株式会社](https://www.hands-lab.com/)の[yktakaha4](https://twitter.com/yktakaha4)です🍲\n普段は、[7日目に投稿しているhomines22さん](https://qiita.com/homines22/items/7c309cdb093eee3240af)らと、某小売のポイントシステムや、ECサイトの開発・運用に携わっています\n当初[弊社のアドベントカレンダー](https://qiita.com/advent-calendar/2019/handslab)に2枠投稿するつもりで記事を書いていたのですが、参加者が増えて枠を譲ることとしたため、こちらに引っ越しました\n\n-----\n\n今年ももうすぐ終わりですね...🎅\n色々ありましたが、業務で大変だったのはやはり消費増税対応（もとい軽減税率対応）でした\n\n機能変更がないため普段見ないフリ🙈をしているあのレガシーコードから、注文や商品といった業務の根幹に関わる大事なこのテーブルまで、あちらこちらに`軽減税率区分`や`税率別合計金額`といった項目を追加する...という対応で、\n修正自体は軽微なのに対して業務影響度合いが大きく、小売に関わるシステムをご担当の諸氏にも頭を抱えた方がいらっしゃったものと思います\n\n私個人としても、外部ECサイトとのデータ連携や、注文締め、出荷、お客様へのメール送信などといった様々な箇所に対して改修を行いましたが、\n複数システム・機能間のフロント、API、バッチからデータベースのカラムまで横断的に影響調査を行うのは、中々骨の折れる作業でした\n\n最初はVSCodeやGitHubの検索機能、grepなどで状況に応じて適当に調べていましたが、\n作業の途中からローカル環境に[Livegrep](https://github.com/livegrep/livegrep)を導入したところ、調査の効率がだいぶ上がり、特に想定外のリポジトリやコードに影響が及んでいた...というケースに事前に気づくことができるようになりました\n\nLivegrepはとてもいいツールでしたが、検索対象のリポジトリやインデクシングを自分で管理する必要があったり、アカウントによるアクセス制御などの機能がついておらず複数人で利用するには不便な部分があったので、\n税対応が完了して最近やっと人心地ついたところで、改めてチームで全文検索の仕組みを手軽に共用できるよう整備することとしました\n\n# どんなものを作るか\n\n今回は、アカウント管理やリポジトリの自動クローリングといった機能がついた全文検索システムである[Sourcegraph](https://github.com/sourcegraph/sourcegraph)のOSS版を使うことにしました\n[こちら](https://knowledge.sakura.ad.jp/21833/)の記事に非常によくまとまっていますが、runするだけで即座に利用できる便利な[Dockerイメージが公開されている](https://hub.docker.com/r/sourcegraph/server/)ので、こちらをAWSで運用します🐳\n\n社内向けの用途でスケーリングも必要なく、かつインスタンス停止時にデータを残したかったので、\nDockerがインストールされたEC2をCloudFormationで作成しようと思います\nまた、弊社の標準的な勤務時間は10時から19時なので、それ以外の時間帯はインスタンスを停止させ、なるべく低コストに運用できると良さそうです\n\nということで、アーキテクチャは以下のような形になりました🍠\n\n![アーキテクチャ.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/ad71ad34-b59f-e4b3-d773-b84a0617e222.png)\n\nCloudFormationのデプロイとEC2インスタンスの起動および停止はGitHub Actionsを用いて行います\n本記事の執筆時点で、指定時間にインスタンスを立ち上げるにはCloudWatch EventsからLambdaを実行する必要があるようですが、\nGitHub Actionsには[所定のワークフローを定期実行する機能](https://help.github.com/ja/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions#onschedule)があるので、こいつでAWS CLIを呼び出すようにすれば手軽にインスタンスの起動・停止が実現できそうです\n\n# できたもの\n\n会社で実際に使っているものは社内ネットワークでの利用を前提とした構成になっているので、\nインターネットアクセスが可能な形に修正したものを以下リポジトリに公開しました:octocat:\n\nhttps://github.com/yktakaha4/sourcegraph-ec2\n\n## 構築手順\n\nまず、リポジトリをフォークします🍴\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/c5a36180-a5a9-1c98-cf15-2c7dad281f66.png)\n\nフォーク直後だとGitHub Actionsが有効にならないようなので、`Actions`タブから有効化しておきます（スクショ撮り忘れた...）\n\n`Settings -> Secrets -> Add a new secret` で、以下の値を設定します\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/200820b7-2497-3538-4422-e36ad21988f9.png)\n\n|キー|説明|\n|---|---|\n|AWS_ACCESS_KEY_ID|AWSのアクセスキーID|\n|AWS_SECRET_ACCESS_KEY|AWSのアクセスキー|\n|AWS_DEFAULT_REGION|デプロイ先のリージョン<br>`ap-northeast-1`など|\n|RESOURCE_NAME|AWS上でのリソース名<br>`sourcegraph-ec2`など|\n|AVAILABILITY_ZONE|デプロイ先のアベイラビリティゾーン<br>`ap-northeast-1c`など|\n|SUBNET_ID|デプロイ先のサブネットID<br>`AVAILABILITY_ZONE`配下のサブネットを指定すること|\n|SECURITY_GROUP_ID_LIST|セキュリティグループID（複数指定時はカンマ区切り）<br>TCP443と2633ポートを開放したものを指定|\n\nシークレットが指定できたら、なんでもよいので`master`ブランチにプッシュします\nとりあえずなのでREADME.mdをいじります\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/783e6f29-4157-1f3d-e487-a06f9cf6063c.png)\n\n適当に文面を編集の上、コミットします\n\nこの記事を書いていて思い至ったのですが、これだと横展開がしづらいので、タグ打ったらデプロイ...みたいな感じにした方がよいですね\nあるいはワークフローの手動実行ができるとよいのですが...\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/0a8c38ab-600a-423c-7205-633d0e781f30.png)\n\n`master`ブランチが更新されると、CloudFormation上に`RESOURCE_NAME` で指定したスタックが生成されます\n\n```yaml:deploy.yml\non:\n  push:\n    branches:\n      - master\n\nname: Deploy\n\njobs:\n  deploy:\n    name: Deploy to AWS\n    runs-on: ubuntu-18.04\n    steps:\n      - uses: actions/checkout@v1\n\n      - name: Setup Python 3.7\n        uses: actions/setup-python@v1\n        with:\n          python-version: \"3.7\"\n          architecture: \"x64\"\n\n      - name: Install awscli\n        run: pip install --upgrade pip awscli\n\n      - name: Deploy CloudFormation Stack\n        run: ./scripts/deploy.bash\n        env:\n          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}\n          RESOURCE_NAME: ${{ secrets.RESOURCE_NAME }}\n          AVAILABILITY_ZONE: ${{ secrets.AVAILABILITY_ZONE }}\n          SUBNET_ID: ${{ secrets.SUBNET_ID }}\n          SECURITY_GROUP_ID_LIST: ${{ secrets.SECURITY_GROUP_ID_LIST }}\n```\n\n```bash:deploy.bash\n#!/bin/bash -eu\n\nbase_dir=\"$(cd \"$(dirname $0)/..\"; pwd)\"\n\naws cloudformation deploy \\\n    --stack-name \"$RESOURCE_NAME\" \\\n    --template-file \"$base_dir/aws/cfn.yml\" \\\n    --capabilities CAPABILITY_NAMED_IAM \\\n    --no-fail-on-empty-changeset \\\n    --parameter-overrides \\\n        ResourceName=\"$RESOURCE_NAME\" \\\n        AvailabilityZoneName=\"$AVAILABILITY_ZONE\" \\\n        SubnetId=\"$SUBNET_ID\" \\\n        SecurityGroupIdList=\"$SECURITY_GROUP_ID_LIST\"\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/64df1485-1e2c-d214-6072-cd69b081cb99.png)\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/867e2271-01a0-dce0-3131-61dc8f7ddf3d.png)\n\nインスタンスができたら、パブリックIPを確認し、接続してみます\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/e8523503-f629-5d96-e5e6-8fb1b92608e2.png)\n\nSourcegraphはソースコード検索用途のため、httpでは運用したくありません\n幸いなことに、デフォルトで管理画面向けに自己署名のSSL証明書を発行する仕様となっているため、こいつを使ってhttps通信をおこなうこととします\n\n`https://インスタンスのパブリックIP/`に接続すると、以下メッセージが表示されます\n接続できない場合は、セキュリティグループでTCP443ポートと2633ポートが空いていることを確認してください\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/4871d213-21cf-bf3a-3a98-ce301ba6b3ee.png)\n\nhttps通信にあたり、証明書が不審のため接続を渋られている状況です\nGoogle Chromeであれば`保護されていない通信 -> 証明書（無効） \n -> 詳細な情報`と開いていくと、`指紋`の項にフィンガープリントが表示されています\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/70d66e8d-54db-9d91-f57c-0d6d064b4e0b.png)\n\n要はこの証明書が信頼できるものか判断できればいい...ということですが、\n本リポジトリでは、インスタンス構築時に生成した証明書のフィンガープリントをCloudwatchLogsに吐き出すようにしています\n\n`Cloudwatch -> ロググループ -> /var/log/messages -> インスタンスID`を開いたのち、`cert`でログをフィルタすると表示されますので、\n値が一致することを確認し、問題なければ証明書の信頼設定を行います\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/e4444413-c949-30dd-0e22-15cb0f664773.png)\n\nGoogle Chrome上で表示されている証明書アイコンをデスクトップにドロップしてダウンロードの後、\nダブルクリックするとキーチェーンアクセスが表示されます\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/da26ab86-2201-657b-673c-0985769fe7ad.png)\n\n`今回追加した証明書を右クリック -> 情報を見る -> 信頼 -> この証明書を使用するとき`で`常に信頼`を選び、\nウィンドウを閉じる際にログインユーザのパスワードを入力すると、証明書が信頼されているものとして指定されます\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/4c8511ea-45a4-acab-1360-cd5809804b2d.png)\n\n再度先ほどのURLにアクセスすると、`詳細設定を表示`を押した後の画面で、接続先へのアクセスが可能になっています\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/ffb084c2-38d4-2815-be9f-408ea526d9f4.png)\n\nいい感じですね！\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/0794d86f-abe9-76cd-c991-f007bc0b5dfe.png)\n\nこれ以降の設定は、先ほどの[さくらのナレッジ様の構築手順](https://knowledge.sakura.ad.jp/21833/)の`Sourcegraphの初期設定`の項を参考に行ってください！\n\n```json:管理画面の設定サンプル（ご参考）\n{\n\t// The externally accessible URL for Sourcegraph (i.e., what you type into your browser)\n\t// This is required to be configured for Sourcegraph to work correctly.\n\t\"externalURL\": \"https://ec2-52-194-175-117.ap-northeast-1.compute.amazonaws.com\",\n\n\t\"auth.providers\": [\n\t\t{\n\t\t\t\"type\": \"builtin\",\n\t\t\t\"allowSignup\": false\n\t\t}\n\t]\n}\n```\n\n## 運用\n\n平日の8:30にインスタンスの自動起動と、毎日19:30にインスタンスの自動停止がおこなわれます🍜\n\n```yaml:start_instance.yml\non:\n  schedule:\n    # 日本時間で月〜金の毎日9時30分に実行\n    - cron: 30 0 * * SUN-THU\n\nname: Start Instance\n\njobs:\n  start:\n    name: Start Instance\n    runs-on: ubuntu-18.04\n    steps:\n      - uses: actions/checkout@v1\n\n      - name: Setup Python 3.7\n        uses: actions/setup-python@v1\n        with:\n          python-version: \"3.7\"\n          architecture: \"x64\"\n\n      - name: Install awscli\n        run: pip install --upgrade pip awscli\n\n      - name: Start Instance\n        run: ./scripts/instance.bash start\n        env:\n          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}\n          RESOURCE_NAME: ${{ secrets.RESOURCE_NAME }}\n```\n\n```bash:instance.bash\n#!/bin/bash -eu\n\ncmd=\"$1\"\n\ncase \"$cmd\" in\n  \"start\")\n    instance_state=\"stopped\"\n    instance_operation=\"start-instances\"\n    ;;\n  \"stop\")\n    instance_state=\"running\"\n    instance_operation=\"stop-instances\"\n    ;;\n  * )\n    echo \"invalid command: $cmd\"\n    exit 1\n    ;;\nesac\n\ninstance_id=\"$(\n  aws ec2 describe-instances --filters \"Name=tag:Name,Values=$RESOURCE_NAME\" \"Name=tag:AutoStart,Values=enabled\" |\n  jq -r \".Reservations[].Instances[] | [.InstanceId, .State.Name] | select(.[1]==\\\"$instance_state\\\")[0]\" |\n  head -1\n)\"\n\nif [ -n \"$instance_id\" ]\nthen\n  aws ec2 $instance_operation --instance-ids \"$instance_id\" > /dev/null\n  echo \"succeed: resource-name=$RESOURCE_NAME, command=$cmd\"\n\nelse\n  echo \"unfound: resource-name=$RESOURCE_NAME, state=$instance_state\"\n\nfi\n```\n\n自動起動・停止を止めたい場合は、EC2のコンソールからインスタンスのタグ設定を開き、`AutoStart`キーの値を`disabled`など任意のものに変更してください\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/234f6718-c4fd-c6e4-1e11-4a23ac025972.png)\n\n## 削除\n\nデフォルトだとEC2インスタンスに`t2.medium` を指定しているため、放っておくと課金されてしまいます\nSourcegraphを削除したい場合は、CloudFormationからスタックの削除を行ってください👋\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/dfc2d024-20ba-b6b4-b85b-5227aecc7f2e.png)\n\n# おわりに\n\n個人的にはスケジュールタスクはだいぶ強力な機能に感じます...\nDockerコンテナを任意の時刻に実行できる訳ですから、AWSをはじめとした各種クラウドサービスに対してちょっとしたバッチ処理をやりたい時にはうってつけの機能だなと思いました\n\nちなみに、GitHub Actionsよりも、[EC2起動時のUserDataの設定](https://github.com/yktakaha4/sourcegraph-ec2/blob/master/aws/cfn.yml#L115-L181)が本記事の中で一番大変だったのですが、本旨から逸れるため割愛します💔\n",
      "coediting": false,
      "comments_count": 0,
      "created_at": "2019-11-17T03:51:10+09:00",
      "group": null,
      "id": "336c85d5a3c4e04b9226",
      "likes_count": 6,
      "private": false,
      "reactions_count": 0,
      "stocks_count": 2,
      "tags": [
        {
          "name": "AWS",
          "versions": []
        },
        {
          "name": "CloudFormation",
          "versions": []
        },
        {
          "name": "GitHubActions",
          "versions": []
        }
      ],
      "title": "SourcegraphをGitHub Actions+CloudFormationで構築・管理する",
      "updated_at": "2019-12-11T07:03:13+09:00",
      "url": "https://qiita.com/yktakaha4/items/336c85d5a3c4e04b9226",
      "user": {
        "description": "",
        "facebook_id": "",
        "followees_count": 26,
        "followers_count": 23,
        "github_login_name": "yktakaha4",
        "id": "yktakaha4",
        "items_count": 27,
        "linkedin_id": "",
        "location": "",
        "name": "Yuuki Takahashi",
        "organization": "LAPRAS株式会社",
        "permanent_id": 106259,
        "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/profile-images/1600489516",
        "team_only": false,
        "twitter_screen_name": "yktakaha4",
        "website_url": "https://yktakaha4.github.io/"
      },
      "page_views_count": null,
      "team_membership": null,
      "organization_url_name": null,
      "slide": false
    },
    {
      "rendered_body": "<p>こちらは、<a href=\"https://qiita.com/advent-calendar/2019/handslab\">ハンズラボ Advent Calendar 2019</a> 4日目の記事になります！</p>\n\n<h1>\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n\n<p>最近うまいもの食べすぎで太ってきた<a href=\"https://twitter.com/yktakaha4\" rel=\"nofollow noopener\" target=\"_blank\">yktakaha4</a>です...🐖</p>\n\n<p><a href=\"https://aws.amazon.com/jp/amazon-linux-2/faqs/#Support_for_Amazon_Linux_2_LTS_Candidates_and_Amazon_Linux_AMI\" rel=\"nofollow noopener\" target=\"_blank\">Amazon Linuxのセキュリティサポート終了まであと半年</a>となりましたが、みなさま対応は進んでいますでしょうか？<br>\n私の所属するCRMチームでは、主にバッチサーバとしての用途でAmazon LinuxのEC2がいくつか稼働しています<br>\n以前から<a href=\"https://www.hands-lab.com/tech/entry/4674.html\" rel=\"nofollow noopener\" target=\"_blank\">バッチ処理のPython化&amp;ECSタスク化</a>も進められていますが、全てのコードを置き換えるには時間がかかるので、並行してAL2のEC2へのプログラム移行に着手しています</p>\n\n<p>弊社は<a href=\"https://ja.wikipedia.org/wiki/%E3%83%A6%E3%83%8B%E3%82%B1%E3%83%BC%E3%82%B8%E9%96%8B%E7%99%BA%E6%89%8B%E6%B3%95\" rel=\"nofollow noopener\" target=\"_blank\">ユニケージ開発手法</a>という、シェルスクリプトでシステム開発をおこなう手法を広く採用していた経緯があり、<br>\nCRMチームでも、特にバッチ領域についてはbashで書かれた業務ロジックがまだまだ残っています<br>\nユニケージを使用しているサーバには、<code>self</code>や<code>join1</code>といった独自コマンドがいろいろインストールされているのに加え、<br>\n<code>nkf</code>をはじめとした標準で入ってないコマンドも適宜追加されており、移行の障壁となりそうです...</p>\n\n<p>構築当初（何年も前のことです...）のドキュメントを漁ったり、<code>yum</code>から追うのもよいですが、<br>\n実際に使われるコマンドは大抵限られており、また移行の過程で使わなくなったものもあるはずなので、<br>\nインストール&amp;動作検証対象を減らすためにも、ソースコード上で利用されているコマンド一覧（とできれば件数）が分かると良さそうです</p>\n\n<h1>\n<span id=\"結論\" class=\"fragment\"></span><a href=\"#%E7%B5%90%E8%AB%96\"><i class=\"fa fa-link\"></i></a>結論</h1>\n\n<p>なんかできました👹</p>\n\n<div class=\"code-frame\" data-lang=\"terminal\">\n<div class=\"code-lang\"><span class=\"bold\">ターミナル（Macの場合）</span></div>\n<div class=\"highlight\"><pre><code><span class=\"gp\">$</span><span class=\"w\"> </span>find <span class=\"nb\">.</span> <span class=\"nt\">-name</span> <span class=\"s2\">\"*.bash\"</span> | xargs ggrep <span class=\"nt\">-oP</span> <span class=\"s1\">'(^|(?&lt;=;)|(?&lt;=do )|(?&lt;=then )|(?&lt;=`)|(?&lt;=&amp;&amp;)|(?&lt;=\\|\\|)|(?&lt;=\\|)|(?&lt;=\\$\\())(\\s*\\w+=\\w+\\s)?\\s*\\w+(?=$|[^=])'</span> | <span class=\"nb\">awk</span> <span class=\"nt\">-F</span>: <span class=\"s1\">'{print $NF}'</span> | <span class=\"nb\">awk</span> <span class=\"s1\">'{print $NF}'</span> | <span class=\"nb\">sort</span> | <span class=\"nb\">uniq</span> <span class=\"nt\">-c</span> | <span class=\"nb\">sort</span> <span class=\"nt\">-nrk1</span> | <span class=\"nb\">head</span> <span class=\"nt\">-5</span>\n<span class=\"go\"> 500 error_exit &lt;- ※こいつはfunction。引っかかってしまうがしゃーなし\n 400 source\n 300 cat\n 200 basename\n 100 plus &lt;- ※こいつはユニケージコマンド\n</span></code></pre></div>\n</div>\n\n<p>上述の通り、functionなども拾ってしまうため目検は必要ですが、<br>\n今回だと <code>1 lha</code> <a href=\"http://www.k-tanaka.net/unix/lha.php\" rel=\"nofollow noopener\" target=\"_blank\">（こいつ）</a>みたいな結果も得られたのでそれなりに満足です</p>\n\n<p>目で見るのが面倒な方は、移行元のAmazon Linuxでコマンド（っぽい文字列たち）を<code>whereis</code>にかけるとよいでしょう<br>\n更にその結果から抽出したコマンドを移行先のAmazon Linux2で<code>whereis</code>して、出てこなかったものが要インストール...という考え方でもよいかもしれません</p>\n\n<div class=\"code-frame\" data-lang=\"terminal\">\n<div class=\"code-lang\"><span class=\"bold\">ターミナル</span></div>\n<div class=\"highlight\"><pre><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">cat </span>commands.txt | <span class=\"nb\">head</span> <span class=\"nt\">-5</span>\n<span class=\"go\">000\nawk\nbasename\ncat\ncd\n\n</span><span class=\"gp\">$</span><span class=\"w\"> </span>whereis <span class=\"si\">$(</span><span class=\"nb\">cat </span>commands.txt<span class=\"si\">)</span> | <span class=\"nb\">head</span> <span class=\"nt\">-5</span>\n<span class=\"go\">/usr/bin/awk\n/usr/bin/basename\n/bin/cat\n/usr/bin/cd\n/bin/cp\n</span></code></pre></div>\n</div>\n\n<h1>\n<span id=\"解説\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E8%AA%AC\"><i class=\"fa fa-link\"></i></a>解説</h1>\n\n<p>ワンライナーだと見づらいので、改行&amp;コメントをつけてみました</p>\n\n<div class=\"code-frame\" data-lang=\"bash\">\n<div class=\"code-lang\"><span class=\"bold\">整理する</span></div>\n<div class=\"highlight\"><pre><code><span class=\"c\"># 現在ディレクトリ配下のbashファイルを抽出</span>\nfind <span class=\"nb\">.</span> <span class=\"nt\">-name</span> <span class=\"s2\">\"*.bash\"</span> |\n<span class=\"c\"># ファイルごとに、正規表現にてコマンドっぽい文字列を抽出（後述）</span>\nxargs ggrep <span class=\"nt\">-oP</span> <span class=\"s1\">'(^|(?&lt;=;)|(?&lt;=do )|(?&lt;=then )|(?&lt;=`)|(?&lt;=&amp;&amp;)|(?&lt;=\\|\\|)|(?&lt;=\\|)|(?&lt;=\\$\\())(\\s*\\w+=\\w+\\s)?\\s*\\w+(?=$|\\W)'</span> |\n<span class=\"c\"># ファイルパス:コマンドっぽい文字列 の形式で出力されるので、コロン区切りで最終フィールドを抽出</span>\n<span class=\"nb\">awk</span> <span class=\"nt\">-F</span>: <span class=\"s1\">'{print $NF}'</span> |\n<span class=\"c\"># スペース区切りで最終フィールドを抽出（理由は後述）</span>\n<span class=\"nb\">awk</span> <span class=\"s1\">'{print $NF}'</span> |\n<span class=\"c\"># カウントのために並び替え</span>\n<span class=\"nb\">sort</span> |\n<span class=\"c\"># 件数カウント</span>\n<span class=\"nb\">uniq</span> <span class=\"nt\">-c</span> |\n<span class=\"c\"># 件数順に並び替え</span>\n<span class=\"nb\">sort</span> <span class=\"nt\">-nrk1</span> |\n<span class=\"c\"># 上位5件を表示</span>\n<span class=\"nb\">head</span> <span class=\"nt\">-5</span>\n</code></pre></div>\n</div>\n\n<p>途中、<code>ggrep</code>という馴染みのないコマンドがありますが、こちらはMac環境で上記ワンライナーを実行する際に必要になるものです<br>\n今回grepコマンドの正規表現にて<a href=\"https://qiita.com/tohta/items/2ba7ecde5636b38ef1f6\" id=\"reference-8cfaac2c8c106183eebe\">肯定先読みと肯定後読み</a>を使用していますが、こちらを利用するために必要な<code>-P</code>オプション（<a href=\"https://ja.wikipedia.org/wiki/Perl_Compatible_Regular_Expressions\" rel=\"nofollow noopener\" target=\"_blank\">PCRE</a>準拠の正規表現を使用）が、Macにデフォルトで入っているBSD版のgrepコマンドだと使えないため、追加でインストールしています<br>\nAmazon Linux上で実行する場合は、単純に<code>grep</code>に変更すれば動作するはずです</p>\n\n<div class=\"code-frame\" data-lang=\"terminal\">\n<div class=\"code-lang\"><span class=\"bold\">ターミナル</span></div>\n<div class=\"highlight\"><pre><code><span class=\"gp\">#</span><span class=\"w\"> </span>インストール\n<span class=\"gp\">$</span><span class=\"w\"> </span>brew <span class=\"nb\">install grep</span>\n<span class=\"go\">\n</span><span class=\"gp\">#</span><span class=\"w\"> </span>BSD grepはだめ　Macにはデフォルトではこちらが入っている\n<span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">grep</span> <span class=\"nt\">-V</span> | <span class=\"nb\">head</span> <span class=\"nt\">-1</span>\n<span class=\"go\">grep (BSD grep) 2.5.1-FreeBSD\n\n</span><span class=\"gp\">#</span><span class=\"w\"> </span>GNU grepなら🙆‍♀️\n<span class=\"gp\">$</span><span class=\"w\"> </span>ggrep <span class=\"nt\">-V</span> | <span class=\"nb\">head</span> <span class=\"nt\">-1</span>\n<span class=\"go\">ggrep (GNU grep) 3.3\n</span></code></pre></div>\n</div>\n\n<p>本記事のキモとなる正規表現の部分ですが、<a href=\"https://www.debuggex.com/r/mrXJEWqDGZJ0HTBW\" rel=\"nofollow noopener\" target=\"_blank\">Debuggex</a>というサイトで可視化してみました</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/7d819f4dcfdef94061a31a2eceda28cbc9b14af1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3130363235392f64326461623930392d313432372d343933322d393266382d6330613562336434366333392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2Fd2dab909-1427-4932-92f8-c0a5b3d46c39.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=8a3e1dfffa99beac1b76cd21f9fbe899\" alt=\"regex.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/d2dab909-1427-4932-92f8-c0a5b3d46c39.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2Fd2dab909-1427-4932-92f8-c0a5b3d46c39.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=ed3e28f187dcd360671171474db96d89 1x\" loading=\"lazy\"></a></p>\n\n<p>仕様としては、大体以下のような感じになるはずです<br>\n<a href=\"https://linuxjm.osdn.jp/html/GNU_bash/man1/bash.1.html\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a>なども参照しつつ、思いつく限りのコマンド実行のパターンを列挙したつもりですが、抜けやバグがあるかも...<br>\nただ、主だったパターンを抽出できれば十分なので、とりあえず納得して使っています</p>\n\n<table>\n<thead>\n<tr>\n<th>検出</th>\n<th>内容</th>\n<th>例</th>\n<th>備考</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>◯</td>\n<td>普通のやつ</td>\n<td>cat example.txt</td>\n<td></td>\n</tr>\n<tr>\n<td>◯</td>\n<td>1行に複数コマンド</td>\n<td>cat example.txt; echo $?</td>\n<td></td>\n</tr>\n<tr>\n<td>◯</td>\n<td>パイプして複数コマンド</td>\n<td>cat example.txt | grep -c \"hoge\"</td>\n<td></td>\n</tr>\n<tr>\n<td>◯</td>\n<td>制御構文</td>\n<td>for f in *; do echo $f; done <br> if [ -f example.txt ]; then echo \"found!\"; fi</td>\n<td></td>\n</tr>\n<tr>\n<td>◯</td>\n<td>制御演算子</td>\n<td>[ -f example.txt ] &amp;&amp; echo \"found!\" <br> [ -f example.txt ] || echo \"not found...\"</td>\n<td></td>\n</tr>\n<tr>\n<td>◯</td>\n<td>コマンド置換</td>\n<td>echo \"時刻は `date` です\" <br>echo \"時刻は $(date) です\"</td>\n<td></td>\n</tr>\n<tr>\n<td>◯</td>\n<td>変数定義&amp;コマンド</td>\n<td>LANG=C sort -u</td>\n<td>ユニケージで頻出。意味は<a href=\"https://qiita.com/bass_ikeda/items/e62f8514330baa35d843\" id=\"reference-320d983e8efaab51dd07\">こちら</a>\n</td>\n</tr>\n<tr>\n<td>×</td>\n<td>コマンドの引数にコマンド</td>\n<td>timeout 10 ping<br>eval 'echo \"hello\"'</td>\n<td>\n<code>timeout</code> <code>eval</code>しか検出できない</td>\n</tr>\n<tr>\n<td>×</td>\n<td>変数展開された結果コマンド</td>\n<td>cmd=\"whoami\"; $cmd</td>\n<td>🤗</td>\n</tr>\n</tbody>\n</table>\n\n<p>なお、上記とは別に<code>ヒアドキュメントや複数行中の文字列</code>や<code>function</code>、<code>alias</code>などについても誤検出されます</p>\n\n<h1>\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n\n<p>現在は、コマンド調査の結果を元に作成したAL2のDockerイメージ上でスクリプトを実行し、ディレクトリの権限やユーザなどの設定のうち必須そうなものを洗い出しています<br>\nECSになるかDocker on EC2になるかEC2になるかはまだ決めかねていますが、年度末に控えたRI購入イベントまでに決着するよう頑張りたいと思います...！</p>\n\n<p><a href=\"https://qiita.com/advent-calendar/2019/handslab\">ハンズラボ Advent Calendar 2019</a> 明日は、<a href=\"https://twitter.com/yuka_jyotei\" rel=\"nofollow noopener\" target=\"_blank\">yuka_jyotei</a>さんです！</p>\n",
      "body": "こちらは、[ハンズラボ Advent Calendar 2019](https://qiita.com/advent-calendar/2019/handslab) 4日目の記事になります！\n\n# はじめに\n\n最近うまいもの食べすぎで太ってきた[yktakaha4](https://twitter.com/yktakaha4)です...🐖\n\n[Amazon Linuxのセキュリティサポート終了まであと半年](https://aws.amazon.com/jp/amazon-linux-2/faqs/#Support_for_Amazon_Linux_2_LTS_Candidates_and_Amazon_Linux_AMI)となりましたが、みなさま対応は進んでいますでしょうか？\n私の所属するCRMチームでは、主にバッチサーバとしての用途でAmazon LinuxのEC2がいくつか稼働しています\n以前から[バッチ処理のPython化&ECSタスク化](https://www.hands-lab.com/tech/entry/4674.html)も進められていますが、全てのコードを置き換えるには時間がかかるので、並行してAL2のEC2へのプログラム移行に着手しています\n\n弊社は[ユニケージ開発手法](https://ja.wikipedia.org/wiki/%E3%83%A6%E3%83%8B%E3%82%B1%E3%83%BC%E3%82%B8%E9%96%8B%E7%99%BA%E6%89%8B%E6%B3%95)という、シェルスクリプトでシステム開発をおこなう手法を広く採用していた経緯があり、\nCRMチームでも、特にバッチ領域についてはbashで書かれた業務ロジックがまだまだ残っています\nユニケージを使用しているサーバには、`self`や`join1`といった独自コマンドがいろいろインストールされているのに加え、\n`nkf`をはじめとした標準で入ってないコマンドも適宜追加されており、移行の障壁となりそうです...\n\n構築当初（何年も前のことです...）のドキュメントを漁ったり、`yum`から追うのもよいですが、\n実際に使われるコマンドは大抵限られており、また移行の過程で使わなくなったものもあるはずなので、\nインストール&動作検証対象を減らすためにも、ソースコード上で利用されているコマンド一覧（とできれば件数）が分かると良さそうです\n\n# 結論\n\nなんかできました👹\n\n```terminal:ターミナル（Macの場合）\n$ find . -name \"*.bash\" | xargs ggrep -oP '(^|(?<=;)|(?<=do )|(?<=then )|(?<=`)|(?<=&&)|(?<=\\|\\|)|(?<=\\|)|(?<=\\$\\())(\\s*\\w+=\\w+\\s)?\\s*\\w+(?=$|[^=])' | awk -F: '{print $NF}' | awk '{print $NF}' | sort | uniq -c | sort -nrk1 | head -5\n 500 error_exit <- ※こいつはfunction。引っかかってしまうがしゃーなし\n 400 source\n 300 cat\n 200 basename\n 100 plus <- ※こいつはユニケージコマンド\n```\n\n上述の通り、functionなども拾ってしまうため目検は必要ですが、\n今回だと `1 lha` [（こいつ）](http://www.k-tanaka.net/unix/lha.php)みたいな結果も得られたのでそれなりに満足です\n\n目で見るのが面倒な方は、移行元のAmazon Linuxでコマンド（っぽい文字列たち）を`whereis`にかけるとよいでしょう\n更にその結果から抽出したコマンドを移行先のAmazon Linux2で`whereis`して、出てこなかったものが要インストール...という考え方でもよいかもしれません\n\n```terminal:ターミナル\n$ cat commands.txt | head -5\n000\nawk\nbasename\ncat\ncd\n\n$ whereis $(cat commands.txt) | head -5\n/usr/bin/awk\n/usr/bin/basename\n/bin/cat\n/usr/bin/cd\n/bin/cp\n```\n\n# 解説\n\nワンライナーだと見づらいので、改行&コメントをつけてみました\n\n```bash:整理する\n# 現在ディレクトリ配下のbashファイルを抽出\nfind . -name \"*.bash\" |\n# ファイルごとに、正規表現にてコマンドっぽい文字列を抽出（後述）\nxargs ggrep -oP '(^|(?<=;)|(?<=do )|(?<=then )|(?<=`)|(?<=&&)|(?<=\\|\\|)|(?<=\\|)|(?<=\\$\\())(\\s*\\w+=\\w+\\s)?\\s*\\w+(?=$|\\W)' |\n# ファイルパス:コマンドっぽい文字列 の形式で出力されるので、コロン区切りで最終フィールドを抽出\nawk -F: '{print $NF}' |\n# スペース区切りで最終フィールドを抽出（理由は後述）\nawk '{print $NF}' |\n# カウントのために並び替え\nsort |\n# 件数カウント\nuniq -c |\n# 件数順に並び替え\nsort -nrk1 |\n# 上位5件を表示\nhead -5\n```\n\n途中、`ggrep`という馴染みのないコマンドがありますが、こちらはMac環境で上記ワンライナーを実行する際に必要になるものです\n今回grepコマンドの正規表現にて[肯定先読みと肯定後読み](https://qiita.com/tohta/items/2ba7ecde5636b38ef1f6)を使用していますが、こちらを利用するために必要な`-P`オプション（[PCRE](https://ja.wikipedia.org/wiki/Perl_Compatible_Regular_Expressions)準拠の正規表現を使用）が、Macにデフォルトで入っているBSD版のgrepコマンドだと使えないため、追加でインストールしています\nAmazon Linux上で実行する場合は、単純に`grep`に変更すれば動作するはずです\n\n```terminal:ターミナル\n# インストール\n$ brew install grep\n\n# BSD grepはだめ　Macにはデフォルトではこちらが入っている\n$ grep -V | head -1\ngrep (BSD grep) 2.5.1-FreeBSD\n\n# GNU grepなら🙆‍♀️\n$ ggrep -V | head -1\nggrep (GNU grep) 3.3\n```\n\n本記事のキモとなる正規表現の部分ですが、[Debuggex](https://www.debuggex.com/r/mrXJEWqDGZJ0HTBW\n)というサイトで可視化してみました\n\n![regex.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/d2dab909-1427-4932-92f8-c0a5b3d46c39.png)\n\n仕様としては、大体以下のような感じになるはずです\n[こちら](https://linuxjm.osdn.jp/html/GNU_bash/man1/bash.1.html)なども参照しつつ、思いつく限りのコマンド実行のパターンを列挙したつもりですが、抜けやバグがあるかも...\nただ、主だったパターンを抽出できれば十分なので、とりあえず納得して使っています\n\n|検出|内容|例|備考|\n|---|---|---|---|\n|◯|普通のやつ| cat example.txt |\n|◯|1行に複数コマンド| cat example.txt; echo $? |\n|◯|パイプして複数コマンド| cat example.txt &#124; grep -c \"hoge\" |\n|◯|制御構文| for f in *; do echo $f; done <br> if [ -f example.txt ]; then echo \"found!\"; fi |\n|◯|制御演算子| [ -f example.txt ] && echo \"found!\" <br> [ -f example.txt ] &#124;&#124; echo \"not found...\" |\n|◯|コマンド置換| echo \"時刻は \\`date` です\" <br>echo \"時刻は $(date) です\"|\n|◯|変数定義&コマンド| LANG=C sort -u |ユニケージで頻出。意味は[こちら](https://qiita.com/bass_ikeda/items/e62f8514330baa35d843)|\n|×|コマンドの引数にコマンド|timeout 10 ping<br>eval 'echo \"hello\"'|`timeout` `eval`しか検出できない|\n|×|変数展開された結果コマンド|cmd=\"whoami\"; $cmd|🤗|\n\nなお、上記とは別に`ヒアドキュメントや複数行中の文字列`や`function`、`alias`などについても誤検出されます\n\n# おわりに\n\n現在は、コマンド調査の結果を元に作成したAL2のDockerイメージ上でスクリプトを実行し、ディレクトリの権限やユーザなどの設定のうち必須そうなものを洗い出しています\nECSになるかDocker on EC2になるかEC2になるかはまだ決めかねていますが、年度末に控えたRI購入イベントまでに決着するよう頑張りたいと思います...！\n\n[ハンズラボ Advent Calendar 2019](https://qiita.com/advent-calendar/2019/handslab) 明日は、[yuka_jyotei](https://twitter.com/yuka_jyotei)さんです！\n",
      "coediting": false,
      "comments_count": 0,
      "created_at": "2019-11-17T02:02:46+09:00",
      "group": null,
      "id": "a11c7bc6245c37a6d428",
      "likes_count": 14,
      "private": false,
      "reactions_count": 0,
      "stocks_count": 1,
      "tags": [
        {
          "name": "ShellScript",
          "versions": []
        },
        {
          "name": "正規表現",
          "versions": []
        },
        {
          "name": "ワンライナー",
          "versions": []
        }
      ],
      "title": "シェルスクリプトからコマンド実行（っぽいもの）を抜き出すワンライナー",
      "updated_at": "2019-12-25T14:08:25+09:00",
      "url": "https://qiita.com/yktakaha4/items/a11c7bc6245c37a6d428",
      "user": {
        "description": "",
        "facebook_id": "",
        "followees_count": 26,
        "followers_count": 23,
        "github_login_name": "yktakaha4",
        "id": "yktakaha4",
        "items_count": 27,
        "linkedin_id": "",
        "location": "",
        "name": "Yuuki Takahashi",
        "organization": "LAPRAS株式会社",
        "permanent_id": 106259,
        "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/profile-images/1600489516",
        "team_only": false,
        "twitter_screen_name": "yktakaha4",
        "website_url": "https://yktakaha4.github.io/"
      },
      "page_views_count": null,
      "team_membership": null,
      "organization_url_name": null,
      "slide": false
    },
    {
      "rendered_body": "<p>お試しで作ったものの備忘メモ</p>\n\n<ul>\n<li>以下のリソースが作成されます\n\n<ul>\n<li>ECS\n\n<ul>\n<li>クラスタ</li>\n<li>タスク定義\n\n<ul>\n<li>Fargateタイプ</li>\n<li>ネットワークモードはawsvpc</li>\n</ul>\n</li>\n<li>タスクスケジュール（CloudWatch Events）\n\n<ul>\n<li>毎日12時に動く</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>ECR\n\n<ul>\n<li>直近2イメージのみ保持</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>以下が前提になります\n\n<ul>\n<li>プライベートサブネット、セキュリティグループが作成済</li>\n<li>\n<a href=\"https://docs.aws.amazon.com/ja_jp/AmazonECS/latest/developerguide/task_execution_IAM_role.html\" rel=\"nofollow noopener\" target=\"_blank\">ecsTaskExecutionRole</a>が作成済</li>\n<li>SSMのパラメーターストアにて<code>your_secrets_value</code>という名前のシークレットが作成済\n\n<ul>\n<li>必要なければ<code>Secrets</code>を消せばOK</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>本日時点で、<a href=\"https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-properties-events-rule-ecsparameters.html\" rel=\"nofollow noopener\" target=\"_blank\">AWS::Events::Rule EcsParametersの日本語記事</a>を読むと<code>NetworkConfiguration</code>などの指定ができないように思えますが、<a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-events-rule-ecsparameters.html\" rel=\"nofollow noopener\" target=\"_blank\">英語版</a>には普通に書いてある...ということを伝えたくて書きました\n\n<ul>\n<li>フィードバックは送り済みなのでそのうち直るかも</li>\n</ul>\n</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"yaml\">\n<div class=\"code-lang\"><span class=\"bold\">sample.yml</span></div>\n<div class=\"highlight\"><pre><code><span class=\"na\">AWSTemplateFormatVersion</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">2010-09-09\"</span>\n\n<span class=\"na\">Parameters</span><span class=\"pi\">:</span>\n  <span class=\"na\">ResourceName</span><span class=\"pi\">:</span>\n    <span class=\"na\">Type</span><span class=\"pi\">:</span> <span class=\"s\">String</span>\n    <span class=\"na\">Description</span><span class=\"pi\">:</span> <span class=\"s\">Resource Name</span>\n  <span class=\"na\">RepositoryName</span><span class=\"pi\">:</span>\n    <span class=\"na\">Type</span><span class=\"pi\">:</span> <span class=\"s\">String</span>\n    <span class=\"na\">Description</span><span class=\"pi\">:</span> <span class=\"s\">Repository Name</span>\n  <span class=\"na\">ImageTagName</span><span class=\"pi\">:</span>\n    <span class=\"na\">Type</span><span class=\"pi\">:</span> <span class=\"s\">String</span>\n    <span class=\"na\">Description</span><span class=\"pi\">:</span> <span class=\"s\">Image Tag Name</span>\n  <span class=\"na\">TaskDefinitionCpu</span><span class=\"pi\">:</span>\n    <span class=\"na\">Type</span><span class=\"pi\">:</span> <span class=\"s\">Number</span>\n    <span class=\"na\">Description</span><span class=\"pi\">:</span> <span class=\"s\">TaskDefinition Cpu</span>\n  <span class=\"na\">TaskDefinitionMemory</span><span class=\"pi\">:</span>\n    <span class=\"na\">Type</span><span class=\"pi\">:</span> <span class=\"s\">Number</span>\n    <span class=\"na\">Description</span><span class=\"pi\">:</span> <span class=\"s\">TaskDefinition Memory</span>\n  <span class=\"na\">TaskExecutionSecurityGroups</span><span class=\"pi\">:</span>\n    <span class=\"na\">Type</span><span class=\"pi\">:</span> <span class=\"s\">List&lt;AWS::EC2::SecurityGroup::Id&gt;</span>\n    <span class=\"na\">Description</span><span class=\"pi\">:</span> <span class=\"s\">Service SecurityGroups</span>\n  <span class=\"na\">TaskExecutionSubnets</span><span class=\"pi\">:</span>\n    <span class=\"na\">Type</span><span class=\"pi\">:</span> <span class=\"s\">List&lt;AWS::EC2::Subnet::Id&gt;</span>\n    <span class=\"na\">Description</span><span class=\"pi\">:</span> <span class=\"s\">Service Subnets</span>\n\n<span class=\"na\">Resources</span><span class=\"pi\">:</span>\n  <span class=\"na\">Cluster</span><span class=\"pi\">:</span>\n    <span class=\"na\">Type</span><span class=\"pi\">:</span> <span class=\"s\">AWS::ECS::Cluster</span>\n    <span class=\"na\">Properties</span><span class=\"pi\">:</span>\n      <span class=\"na\">ClusterName</span><span class=\"pi\">:</span>\n        <span class=\"na\">Ref</span><span class=\"pi\">:</span> <span class=\"s\">ResourceName</span>\n\n  <span class=\"na\">Repository</span><span class=\"pi\">:</span>\n    <span class=\"na\">Type</span><span class=\"pi\">:</span> <span class=\"s\">AWS::ECR::Repository</span>\n    <span class=\"na\">Properties</span><span class=\"pi\">:</span>\n      <span class=\"na\">RepositoryName</span><span class=\"pi\">:</span>\n        <span class=\"na\">Ref</span><span class=\"pi\">:</span> <span class=\"s\">RepositoryName</span>\n      <span class=\"na\">LifecyclePolicy</span><span class=\"pi\">:</span>\n        <span class=\"c1\"># https://dev.classmethod.jp/cloud/aws/cfn-for-ecr-lifecyclepolicy/</span>\n        <span class=\"na\">LifecyclePolicyText</span><span class=\"pi\">:</span> <span class=\"pi\">|</span>\n          <span class=\"s\">{</span>\n            <span class=\"s\">\"rules\" : [</span>\n              <span class=\"s\">{</span>\n                <span class=\"s\">\"rulePriority\" : 1,</span>\n                <span class=\"s\">\"description\" : \"Delete more than 2 images\",</span>\n                <span class=\"s\">\"selection\" : {\"countType\" : \"imageCountMoreThan\", \"countNumber\" : 2, \"tagStatus\" : \"any\"},</span>\n                <span class=\"s\">\"action\" : {\"type\" : \"expire\"}</span>\n              <span class=\"s\">}</span>\n            <span class=\"s\">]</span>\n          <span class=\"s\">}</span>\n\n  <span class=\"na\">TaskDefinition</span><span class=\"pi\">:</span>\n    <span class=\"na\">Type</span><span class=\"pi\">:</span> <span class=\"s\">AWS::ECS::TaskDefinition</span>\n    <span class=\"na\">Properties</span><span class=\"pi\">:</span>\n      <span class=\"na\">Family</span><span class=\"pi\">:</span>\n        <span class=\"na\">Ref</span><span class=\"pi\">:</span> <span class=\"s\">ResourceName</span>\n      <span class=\"na\">Cpu</span><span class=\"pi\">:</span>\n        <span class=\"na\">Ref</span><span class=\"pi\">:</span> <span class=\"s\">TaskDefinitionCpu</span>\n      <span class=\"na\">Memory</span><span class=\"pi\">:</span>\n        <span class=\"na\">Ref</span><span class=\"pi\">:</span> <span class=\"s\">TaskDefinitionMemory</span>\n      <span class=\"na\">NetworkMode</span><span class=\"pi\">:</span> <span class=\"s\">awsvpc</span>\n      <span class=\"na\">ExecutionRoleArn</span><span class=\"pi\">:</span>\n        <span class=\"s\">Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/ecsTaskExecutionRole</span>\n      <span class=\"na\">RequiresCompatibilities</span><span class=\"pi\">:</span>\n        <span class=\"pi\">-</span> <span class=\"s\">FARGATE</span>\n      <span class=\"na\">ContainerDefinitions</span><span class=\"pi\">:</span>\n        <span class=\"pi\">-</span> <span class=\"na\">Name</span><span class=\"pi\">:</span>\n            <span class=\"na\">Ref</span><span class=\"pi\">:</span> <span class=\"s\">ResourceName</span>\n          <span class=\"na\">Image</span><span class=\"pi\">:</span>\n            <span class=\"s\">Fn::Sub: ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${RepositoryName}:${ImageTagName}</span>\n          <span class=\"na\">Secrets</span><span class=\"pi\">:</span>\n            <span class=\"c1\"># https://dev.classmethod.jp/cloud/aws/ecs-secrets/</span>\n            <span class=\"pi\">-</span> <span class=\"na\">Name</span><span class=\"pi\">:</span> <span class=\"s\">YOUR_SECRETS_VALUE</span>\n              <span class=\"na\">ValueFrom</span><span class=\"pi\">:</span> <span class=\"s\">your_secrets_value</span>\n          <span class=\"na\">LogConfiguration</span><span class=\"pi\">:</span>\n            <span class=\"na\">LogDriver</span><span class=\"pi\">:</span> <span class=\"s\">awslogs</span>\n            <span class=\"na\">Options</span><span class=\"pi\">:</span>\n              <span class=\"s2\">\"</span><span class=\"s\">awslogs-region\"</span><span class=\"pi\">:</span>\n                <span class=\"na\">Ref</span><span class=\"pi\">:</span> <span class=\"s\">AWS::Region</span>\n              <span class=\"s2\">\"</span><span class=\"s\">awslogs-stream-prefix\"</span><span class=\"pi\">:</span> <span class=\"s\">ecs</span>\n              <span class=\"s2\">\"</span><span class=\"s\">awslogs-group\"</span><span class=\"pi\">:</span>\n                <span class=\"s\">Fn::Sub: /aws/ecs/${ResourceName}</span>\n\n  <span class=\"na\">TaskSchedule</span><span class=\"pi\">:</span>\n    <span class=\"na\">Type</span><span class=\"pi\">:</span> <span class=\"s\">AWS::Events::Rule</span>\n    <span class=\"na\">Properties</span><span class=\"pi\">:</span>\n      <span class=\"na\">Name</span><span class=\"pi\">:</span> <span class=\"s\">sample_task</span>\n      <span class=\"na\">State</span><span class=\"pi\">:</span> <span class=\"s\">ENABLED</span>\n      <span class=\"na\">ScheduleExpression</span><span class=\"pi\">:</span> <span class=\"s\">cron(0 3 * * ? *)</span>\n      <span class=\"na\">Targets</span><span class=\"pi\">:</span>\n        <span class=\"pi\">-</span> <span class=\"na\">Id</span><span class=\"pi\">:</span> <span class=\"s\">sample_task</span>\n          <span class=\"na\">Arn</span><span class=\"pi\">:</span>\n            <span class=\"s\">Fn::GetAtt: [Cluster, Arn]</span>\n          <span class=\"na\">RoleArn</span><span class=\"pi\">:</span>\n            <span class=\"s\">Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/ecsEventsRole</span>\n          <span class=\"na\">EcsParameters</span><span class=\"pi\">:</span>\n            <span class=\"c1\"># https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-events-rule-ecsparameters.html</span>\n            <span class=\"na\">TaskDefinitionArn</span><span class=\"pi\">:</span>\n              <span class=\"na\">Ref</span><span class=\"pi\">:</span> <span class=\"s\">TaskDefinition</span>\n            <span class=\"na\">LaunchType</span><span class=\"pi\">:</span> <span class=\"s\">FARGATE</span>\n            <span class=\"na\">PlatformVersion</span><span class=\"pi\">:</span> <span class=\"s\">LATEST</span>\n            <span class=\"na\">NetworkConfiguration</span><span class=\"pi\">:</span>\n              <span class=\"na\">AwsVpcConfiguration</span><span class=\"pi\">:</span>\n                <span class=\"na\">AssignPublicIp</span><span class=\"pi\">:</span> <span class=\"s\">DISABLED</span>\n                <span class=\"na\">Subnets</span><span class=\"pi\">:</span>\n                  <span class=\"na\">Ref</span><span class=\"pi\">:</span> <span class=\"s\">TaskExecutionSubnets</span>\n                <span class=\"na\">SecurityGroups</span><span class=\"pi\">:</span>\n                  <span class=\"na\">Ref</span><span class=\"pi\">:</span> <span class=\"s\">TaskExecutionSecurityGroups</span>\n          <span class=\"na\">Input</span><span class=\"pi\">:</span>\n            <span class=\"c1\"># コマンドは任意に設定してください！</span>\n            <span class=\"s\">Fn::Sub: |</span>\n              <span class=\"s\">{</span>\n                <span class=\"s\">\"containerOverrides\"</span> <span class=\"pi\">:</span> <span class=\"pi\">[</span>\n                  <span class=\"pi\">{</span>\n                    <span class=\"s2\">\"</span><span class=\"s\">name\"</span> <span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">${ResourceName}\"</span><span class=\"pi\">,</span>\n                    <span class=\"s2\">\"</span><span class=\"s\">command\"</span> <span class=\"pi\">:</span> <span class=\"pi\">[</span><span class=\"s2\">\"</span><span class=\"s\">python3\"</span><span class=\"pi\">,</span> <span class=\"s2\">\"</span><span class=\"s\">-m\"</span><span class=\"pi\">,</span> <span class=\"s2\">\"</span><span class=\"s\">sample_task\"</span><span class=\"pi\">]</span>\n                  <span class=\"pi\">}</span>\n                <span class=\"pi\">]</span>\n              <span class=\"err\">}</span>\n\n  <span class=\"na\">LogGroup</span><span class=\"pi\">:</span>\n    <span class=\"na\">Type</span><span class=\"pi\">:</span> <span class=\"s\">AWS::Logs::LogGroup</span>\n    <span class=\"na\">Properties</span><span class=\"pi\">:</span>\n      <span class=\"na\">LogGroupName</span><span class=\"pi\">:</span>\n        <span class=\"s\">Fn::Sub: /aws/ecs/${ResourceName}</span>\n      <span class=\"na\">RetentionInDays</span><span class=\"pi\">:</span> <span class=\"m\">30</span>\n</code></pre></div>\n</div>\n\n<p>以下のような設定ファイルを定義して</p>\n\n<div class=\"code-frame\" data-lang=\"ini\">\n<div class=\"code-lang\"><span class=\"bold\">parameters.ini</span></div>\n<div class=\"highlight\"><pre><code><span class=\"py\">ResourceName</span><span class=\"p\">=</span><span class=\"s\">sample-resource</span>\n<span class=\"py\">RepositoryName</span><span class=\"p\">=</span><span class=\"s\">sample-repository</span>\n<span class=\"py\">ImageTagName</span><span class=\"p\">=</span><span class=\"s\">smpl</span>\n<span class=\"py\">TaskDefinitionCpu</span><span class=\"p\">=</span><span class=\"s\">256</span>\n<span class=\"py\">TaskDefinitionMemory</span><span class=\"p\">=</span><span class=\"s\">512</span>\n<span class=\"py\">TaskExecutionSecurityGroups</span><span class=\"p\">=</span><span class=\"s\">sg-xxxx</span>\n<span class=\"py\">TaskExecutionSubnets</span><span class=\"p\">=</span><span class=\"s\">subnet-yyyy,subnet-zzzz</span>\n</code></pre></div>\n</div>\n\n<p>以下のような感じで実行すると楽</p>\n\n<div class=\"code-frame\" data-lang=\"shell\">\n<div class=\"code-lang\"><span class=\"bold\">ターミナル</span></div>\n<div class=\"highlight\"><pre><code><span class=\"c\"># 作成</span>\n<span class=\"nv\">$ </span>aws cloudformation deploy <span class=\"se\">\\</span>\n  <span class=\"nt\">--stack-name</span> sample-stack <span class=\"se\">\\</span>\n  <span class=\"nt\">--template-file</span> sample.yml <span class=\"se\">\\</span>\n  <span class=\"nt\">--no-fail-on-empty-changeset</span> <span class=\"se\">\\</span>\n  <span class=\"nt\">--parameter-overrides</span> <span class=\"si\">$(</span><span class=\"nb\">cat </span>parameters.ini | <span class=\"nb\">tr</span> <span class=\"s1\">'\\n'</span> <span class=\"s1\">' '</span><span class=\"si\">)</span>\n\n<span class=\"c\"># オマケ</span>\n<span class=\"c\"># DockerイメージをビルドしてECRにpush（99999999はアカウントID）</span>\n<span class=\"nv\">$ </span><span class=\"si\">$(</span>aws ecr get-login <span class=\"nt\">--no-include-email</span><span class=\"si\">)</span>\n<span class=\"nv\">$ </span>docker build <span class=\"nt\">-t</span> 99999999.dkr.ecr.ap-northeast-1.amazonaws.com/sample-repository:smpl <span class=\"nb\">.</span>\n<span class=\"nv\">$ </span>docker push 99999999.dkr.ecr.ap-northeast-1.amazonaws.com/sample-repository:smpl\n</code></pre></div>\n</div>\n\n<p>結構面倒でしたが、実際に定義から環境ができると楽しいですね！</p>\n",
      "body": "お試しで作ったものの備忘メモ\n\n- 以下のリソースが作成されます\n    - ECS\n        - クラスタ\n        - タスク定義\n            - Fargateタイプ\n            - ネットワークモードはawsvpc\n        - タスクスケジュール（CloudWatch Events）\n            - 毎日12時に動く\n    - ECR\n        - 直近2イメージのみ保持\n- 以下が前提になります\n    - プライベートサブネット、セキュリティグループが作成済\n    - [ecsTaskExecutionRole](https://docs.aws.amazon.com/ja_jp/AmazonECS/latest/developerguide/task_execution_IAM_role.html)が作成済\n    - SSMのパラメーターストアにて`your_secrets_value`という名前のシークレットが作成済\n        - 必要なければ`Secrets`を消せばOK\n- 本日時点で、[AWS::Events::Rule EcsParametersの日本語記事](https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-properties-events-rule-ecsparameters.html)を読むと`NetworkConfiguration`などの指定ができないように思えますが、[英語版](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-events-rule-ecsparameters.html)には普通に書いてある...ということを伝えたくて書きました\n  - フィードバックは送り済みなのでそのうち直るかも\n\n```yaml:sample.yml\nAWSTemplateFormatVersion: \"2010-09-09\"\n\nParameters:\n  ResourceName:\n    Type: String\n    Description: Resource Name\n  RepositoryName:\n    Type: String\n    Description: Repository Name\n  ImageTagName:\n    Type: String\n    Description: Image Tag Name\n  TaskDefinitionCpu:\n    Type: Number\n    Description: TaskDefinition Cpu\n  TaskDefinitionMemory:\n    Type: Number\n    Description: TaskDefinition Memory\n  TaskExecutionSecurityGroups:\n    Type: List<AWS::EC2::SecurityGroup::Id>\n    Description: Service SecurityGroups\n  TaskExecutionSubnets:\n    Type: List<AWS::EC2::Subnet::Id>\n    Description: Service Subnets\n\nResources:\n  Cluster:\n    Type: AWS::ECS::Cluster\n    Properties:\n      ClusterName:\n        Ref: ResourceName\n\n  Repository:\n    Type: AWS::ECR::Repository\n    Properties:\n      RepositoryName:\n        Ref: RepositoryName\n      LifecyclePolicy:\n        # https://dev.classmethod.jp/cloud/aws/cfn-for-ecr-lifecyclepolicy/\n        LifecyclePolicyText: |\n          {\n            \"rules\" : [\n              {\n                \"rulePriority\" : 1,\n                \"description\" : \"Delete more than 2 images\",\n                \"selection\" : {\"countType\" : \"imageCountMoreThan\", \"countNumber\" : 2, \"tagStatus\" : \"any\"},\n                \"action\" : {\"type\" : \"expire\"}\n              }\n            ]\n          }\n\n  TaskDefinition:\n    Type: AWS::ECS::TaskDefinition\n    Properties:\n      Family:\n        Ref: ResourceName\n      Cpu:\n        Ref: TaskDefinitionCpu\n      Memory:\n        Ref: TaskDefinitionMemory\n      NetworkMode: awsvpc\n      ExecutionRoleArn:\n        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/ecsTaskExecutionRole\n      RequiresCompatibilities:\n        - FARGATE\n      ContainerDefinitions:\n        - Name:\n            Ref: ResourceName\n          Image:\n            Fn::Sub: ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${RepositoryName}:${ImageTagName}\n          Secrets:\n            # https://dev.classmethod.jp/cloud/aws/ecs-secrets/\n            - Name: YOUR_SECRETS_VALUE\n              ValueFrom: your_secrets_value\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              \"awslogs-region\":\n                Ref: AWS::Region\n              \"awslogs-stream-prefix\": ecs\n              \"awslogs-group\":\n                Fn::Sub: /aws/ecs/${ResourceName}\n\n  TaskSchedule:\n    Type: AWS::Events::Rule\n    Properties:\n      Name: sample_task\n      State: ENABLED\n      ScheduleExpression: cron(0 3 * * ? *)\n      Targets:\n        - Id: sample_task\n          Arn:\n            Fn::GetAtt: [Cluster, Arn]\n          RoleArn:\n            Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/ecsEventsRole\n          EcsParameters:\n            # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-events-rule-ecsparameters.html\n            TaskDefinitionArn:\n              Ref: TaskDefinition\n            LaunchType: FARGATE\n            PlatformVersion: LATEST\n            NetworkConfiguration:\n              AwsVpcConfiguration:\n                AssignPublicIp: DISABLED\n                Subnets:\n                  Ref: TaskExecutionSubnets\n                SecurityGroups:\n                  Ref: TaskExecutionSecurityGroups\n          Input:\n            # コマンドは任意に設定してください！\n            Fn::Sub: |\n              {\n                \"containerOverrides\" : [\n                  {\n                    \"name\" : \"${ResourceName}\",\n                    \"command\" : [\"python3\", \"-m\", \"sample_task\"]\n                  }\n                ]\n              }\n\n  LogGroup:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName:\n        Fn::Sub: /aws/ecs/${ResourceName}\n      RetentionInDays: 30\n```\n\n以下のような設定ファイルを定義して\n\n```ini:parameters.ini\nResourceName=sample-resource\nRepositoryName=sample-repository\nImageTagName=smpl\nTaskDefinitionCpu=256\nTaskDefinitionMemory=512\nTaskExecutionSecurityGroups=sg-xxxx\nTaskExecutionSubnets=subnet-yyyy,subnet-zzzz\n```\n\n以下のような感じで実行すると楽\n\n```shell:ターミナル\n# 作成\n$ aws cloudformation deploy \\\n  --stack-name sample-stack \\\n  --template-file sample.yml \\\n  --no-fail-on-empty-changeset \\\n  --parameter-overrides $(cat parameters.ini | tr '\\n' ' ')\n\n# オマケ\n# DockerイメージをビルドしてECRにpush（99999999はアカウントID）\n$ $(aws ecr get-login --no-include-email)\n$ docker build -t 99999999.dkr.ecr.ap-northeast-1.amazonaws.com/sample-repository:smpl .\n$ docker push 99999999.dkr.ecr.ap-northeast-1.amazonaws.com/sample-repository:smpl\n```\n\n結構面倒でしたが、実際に定義から環境ができると楽しいですね！\n",
      "coediting": false,
      "comments_count": 0,
      "created_at": "2019-10-11T16:06:59+09:00",
      "group": null,
      "id": "f5a32d5f2e7a6263faa4",
      "likes_count": 6,
      "private": false,
      "reactions_count": 0,
      "stocks_count": 3,
      "tags": [
        {
          "name": "AWS",
          "versions": []
        },
        {
          "name": "CloudFormation",
          "versions": []
        },
        {
          "name": "ECS",
          "versions": []
        }
      ],
      "title": "ECS(Fargate)のバッチをCloudFormationで作成する",
      "updated_at": "2019-10-15T11:21:17+09:00",
      "url": "https://qiita.com/yktakaha4/items/f5a32d5f2e7a6263faa4",
      "user": {
        "description": "",
        "facebook_id": "",
        "followees_count": 26,
        "followers_count": 23,
        "github_login_name": "yktakaha4",
        "id": "yktakaha4",
        "items_count": 27,
        "linkedin_id": "",
        "location": "",
        "name": "Yuuki Takahashi",
        "organization": "LAPRAS株式会社",
        "permanent_id": 106259,
        "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/profile-images/1600489516",
        "team_only": false,
        "twitter_screen_name": "yktakaha4",
        "website_url": "https://yktakaha4.github.io/"
      },
      "page_views_count": null,
      "team_membership": null,
      "organization_url_name": null,
      "slide": false
    },
    {
      "rendered_body": "\n<h1>\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n\n<p>開発にあたり、インフラはTerraform、バックエンドはServerless Frameworkで作りたかったので、<br>\nそれぞれをどのように定義するといい感じに参照できるか検討したので備忘メモ✍️</p>\n\n<h1>\n<span id=\"考え方\" class=\"fragment\"></span><a href=\"#%E8%80%83%E3%81%88%E6%96%B9\"><i class=\"fa fa-link\"></i></a>考え方</h1>\n\n<ul>\n<li>CloudFront -&gt; API Gateway -&gt; Lambdaでバックエンド処理をしたい\n\n<ul>\n<li>\n<code>/api</code> 配下に来たリクエストをAPI Gatewayへ流す</li>\n</ul>\n</li>\n<li>CloudFront -&gt; S3で静的コンテンツを配信したい\n\n<ul>\n<li>上記にマッチしなかったリクエストをS3へ流す</li>\n</ul>\n</li>\n<li>インフラとバックエンドは別々に管理したい\n\n<ul>\n<li>CloudFrontl、S3はインフラ（Terraform）</li>\n<li>API GatewayとLambdaはバックエンド（Serverless Framework）</li>\n</ul>\n</li>\n</ul>\n\n<h1>\n<span id=\"方法\" class=\"fragment\"></span><a href=\"#%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>方法</h1>\n\n<p>Serverless Frameworkは、 <code>sls deploy</code> すると裏でCloudFormationのスタックを作成するので、<br>\nTerraformから<a href=\"https://www.terraform.io/docs/providers/aws/d/cloudformation_stack.html\" rel=\"nofollow noopener\" target=\"_blank\">aws_cloudformation_stack</a>として参照します</p>\n\n<div class=\"code-frame\" data-lang=\"yaml\">\n<div class=\"code-lang\"><span class=\"bold\">serverless.yml（抜粋）</span></div>\n<div class=\"highlight\"><pre><code><span class=\"na\">service</span><span class=\"pi\">:</span>\n  <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">example-backend</span>\n\n<span class=\"na\">provider</span><span class=\"pi\">:</span>\n  <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">aws</span>\n  <span class=\"na\">runtime</span><span class=\"pi\">:</span> <span class=\"s\">nodejs10.x</span>\n  <span class=\"na\">stage</span><span class=\"pi\">:</span> <span class=\"s\">${opt:stage, self:custom.defaultStage}</span>\n  <span class=\"na\">region</span><span class=\"pi\">:</span> <span class=\"s\">ap-northeast-1</span>\n  <span class=\"c1\"># リージョナルのAPI Gatewayを作成</span>\n  <span class=\"na\">endpointType</span><span class=\"pi\">:</span> <span class=\"s\">REGIONAL</span>\n\n  <span class=\"c1\"># Lambdaで使うRoleはこちらで作る。ActionやResourceは適宜設定</span>\n  <span class=\"na\">iamRoleStatements</span><span class=\"pi\">:</span>\n    <span class=\"pi\">-</span> <span class=\"na\">Effect</span><span class=\"pi\">:</span> <span class=\"s\">Allow</span>\n      <span class=\"na\">Action</span><span class=\"pi\">:</span>\n        <span class=\"pi\">-</span> <span class=\"s\">secretsmanager:GetSecretValue</span>\n      <span class=\"na\">Resource</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">*\"</span>\n\n<span class=\"na\">functions</span><span class=\"pi\">:</span>\n  <span class=\"na\">example</span><span class=\"pi\">:</span>\n    <span class=\"na\">handler</span><span class=\"pi\">:</span> <span class=\"s\">src/example.lambdaHandler</span>\n    <span class=\"c1\"># これだけでLambda Proxy統合のAPI Gatewayができる</span>\n    <span class=\"na\">events</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"na\">http</span><span class=\"pi\">:</span> <span class=\"s\">POST api/example</span>\n\n<span class=\"na\">custom</span><span class=\"pi\">:</span>\n  <span class=\"na\">defaultStage</span><span class=\"pi\">:</span> <span class=\"s\">prod</span>\n</code></pre></div>\n</div>\n\n<p><code>ServiceEndpoint</code> というキーの値が使えそう</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/7f323c50fc627b8d5c5d675dfb82917b13a010e8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3130363235392f63373938386433312d623863392d346430372d613261612d3966363466643462633166642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2Fc7988d31-b8c9-4d07-a2aa-9f64fd4bc1fd.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=2b9c5b1da4045a84ccf0049108190b5e\" alt=\"スタック\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/c7988d31-b8c9-4d07-a2aa-9f64fd4bc1fd.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2Fc7988d31-b8c9-4d07-a2aa-9f64fd4bc1fd.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=7df478d6f78c2ab4c65618f18722686f 1x\" loading=\"lazy\"></a></p>\n\n<p>Terraformは以下のような感じ（ほぼ省略ですが...）<br>\n実際はスタック名はvarで注入するなどしてください</p>\n\n<div class=\"code-frame\" data-lang=\"hcl\">\n<div class=\"code-lang\"><span class=\"bold\">terraform.tf（抜粋）</span></div>\n<div class=\"highlight\"><pre><code><span class=\"nx\">data</span> <span class=\"s2\">\"aws_cloudformation_stack\"</span> <span class=\"s2\">\"backend\"</span> <span class=\"p\">{</span>\n  <span class=\"c1\"># これでCloudFormationの出力が参照できる</span>\n  <span class=\"nx\">name</span> <span class=\"p\">=</span> <span class=\"s2\">\"example-backend-prod\"</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">resource</span> <span class=\"s2\">\"aws_cloudfront_distribution\"</span> <span class=\"s2\">\"infra\"</span> <span class=\"p\">{</span>\n\n  <span class=\"c1\"># 省略</span>\n\n  <span class=\"c1\"># API Gatewayのオリジンを作る</span>\n  <span class=\"nx\">origin</span> <span class=\"p\">{</span>\n    <span class=\"c1\"># ServiceEndpointから xxx.execute-api.ap-northeast-1.amazonaws.com と prod を抜き出す</span>\n    <span class=\"nx\">domain_name</span> <span class=\"p\">=</span> <span class=\"s2\">\"${split(\"</span><span class=\"err\">/</span><span class=\"s2\">\", data.aws_cloudformation_stack.backend.outputs[\"</span><span class=\"nx\">ServiceEndpoint</span><span class=\"s2\">\"])[2]}\"</span>\n    <span class=\"nx\">origin_path</span> <span class=\"p\">=</span> <span class=\"s2\">\"/${split(\"</span><span class=\"err\">/</span><span class=\"s2\">\", data.aws_cloudformation_stack.backend.outputs[\"</span><span class=\"nx\">ServiceEndpoint</span><span class=\"s2\">\"])[3]}\"</span>\n\n    <span class=\"c1\"># 省略</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"c1\"># S3のオリジンを作る</span>\n  <span class=\"nx\">origin</span> <span class=\"p\">{</span>\n    <span class=\"c1\"># 省略</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"c1\"># API Gatewayの定義 </span>\n  <span class=\"nx\">ordered_cache_behavior</span> <span class=\"p\">{</span>\n    <span class=\"c1\"># Serverless Frameworkで指定したのと合わせる</span>\n    <span class=\"nx\">path_pattern</span>     <span class=\"p\">=</span> <span class=\"s2\">\"/api/*\"</span>\n\n    <span class=\"c1\"># 省略</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"c1\"># こっちでS3を定義。/api/*にマッチしないリクエストを扱う</span>\n  <span class=\"nx\">default_cache_behavior</span> <span class=\"p\">{</span>\n    <span class=\"c1\"># 省略</span>\n  <span class=\"p\">}</span>\n\n<span class=\"p\">}</span>\n</code></pre></div>\n</div>\n",
      "body": "# はじめに\n開発にあたり、インフラはTerraform、バックエンドはServerless Frameworkで作りたかったので、\nそれぞれをどのように定義するといい感じに参照できるか検討したので備忘メモ✍️\n\n# 考え方\n- CloudFront -> API Gateway -> Lambdaでバックエンド処理をしたい\n    - `/api` 配下に来たリクエストをAPI Gatewayへ流す\n- CloudFront -> S3で静的コンテンツを配信したい\n    - 上記にマッチしなかったリクエストをS3へ流す\n- インフラとバックエンドは別々に管理したい\n    - CloudFrontl、S3はインフラ（Terraform）\n    - API GatewayとLambdaはバックエンド（Serverless Framework）\n\n# 方法\nServerless Frameworkは、 `sls deploy` すると裏でCloudFormationのスタックを作成するので、\nTerraformから[aws_cloudformation_stack](https://www.terraform.io/docs/providers/aws/d/cloudformation_stack.html)として参照します\n\n```yaml:serverless.yml（抜粋）\nservice:\n  name: example-backend\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  stage: ${opt:stage, self:custom.defaultStage}\n  region: ap-northeast-1\n  # リージョナルのAPI Gatewayを作成\n  endpointType: REGIONAL\n\n  # Lambdaで使うRoleはこちらで作る。ActionやResourceは適宜設定\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - secretsmanager:GetSecretValue\n      Resource: \"*\"\n\nfunctions:\n  example:\n    handler: src/example.lambdaHandler\n    # これだけでLambda Proxy統合のAPI Gatewayができる\n    events:\n      - http: POST api/example\n\ncustom:\n  defaultStage: prod\n```\n\n`ServiceEndpoint` というキーの値が使えそう\n\n![スタック](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/c7988d31-b8c9-4d07-a2aa-9f64fd4bc1fd.png)\n\nTerraformは以下のような感じ（ほぼ省略ですが...）\n実際はスタック名はvarで注入するなどしてください\n\n```hcl:terraform.tf（抜粋）\ndata \"aws_cloudformation_stack\" \"backend\" {\n  # これでCloudFormationの出力が参照できる\n  name = \"example-backend-prod\"\n}\n\nresource \"aws_cloudfront_distribution\" \"infra\" {\n\n  # 省略\n\n  # API Gatewayのオリジンを作る\n  origin {\n    # ServiceEndpointから xxx.execute-api.ap-northeast-1.amazonaws.com と prod を抜き出す\n    domain_name = \"${split(\"/\", data.aws_cloudformation_stack.backend.outputs[\"ServiceEndpoint\"])[2]}\"\n    origin_path = \"/${split(\"/\", data.aws_cloudformation_stack.backend.outputs[\"ServiceEndpoint\"])[3]}\"\n\n    # 省略\n  }\n\n  # S3のオリジンを作る\n  origin {\n    # 省略\n  }\n\n  # API Gatewayの定義 \n  ordered_cache_behavior {\n    # Serverless Frameworkで指定したのと合わせる\n    path_pattern     = \"/api/*\"\n\n    # 省略\n  }\n\n  # こっちでS3を定義。/api/*にマッチしないリクエストを扱う\n  default_cache_behavior {\n    # 省略\n  }\n\n}\n```\n",
      "coediting": false,
      "comments_count": 0,
      "created_at": "2019-08-06T01:04:05+09:00",
      "group": null,
      "id": "a6fb117085f1fa546ed9",
      "likes_count": 13,
      "private": false,
      "reactions_count": 0,
      "stocks_count": 12,
      "tags": [
        {
          "name": "AWS",
          "versions": []
        },
        {
          "name": "Terraform",
          "versions": []
        },
        {
          "name": "ServerlessFramework",
          "versions": []
        }
      ],
      "title": "TerraformからServerless Frameworkで作ったAPIを参照する",
      "updated_at": "2019-08-06T01:04:05+09:00",
      "url": "https://qiita.com/yktakaha4/items/a6fb117085f1fa546ed9",
      "user": {
        "description": "",
        "facebook_id": "",
        "followees_count": 26,
        "followers_count": 23,
        "github_login_name": "yktakaha4",
        "id": "yktakaha4",
        "items_count": 27,
        "linkedin_id": "",
        "location": "",
        "name": "Yuuki Takahashi",
        "organization": "LAPRAS株式会社",
        "permanent_id": 106259,
        "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/profile-images/1600489516",
        "team_only": false,
        "twitter_screen_name": "yktakaha4",
        "website_url": "https://yktakaha4.github.io/"
      },
      "page_views_count": null,
      "team_membership": null,
      "organization_url_name": null,
      "slide": false
    },
    {
      "rendered_body": "\n<h1>\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n\n<p>独立起業している知人（建築系なので、以下👷‍♂️）から、自社で直接仕事の依頼を受けるためのランディングページを作りたい...🔥という相談を受けました</p>\n\n<p><a href=\"https://uxmilk.jp/65654\" rel=\"nofollow noopener\" target=\"_blank\">MVP</a>の考え方からいけば、<a href=\"https://portfolio-ai.com/instapage_introduce\" rel=\"nofollow noopener\" target=\"_blank\">こういうの</a>を使ったり、作るにしてもherokuなどを使ったりでもよかったのかもしれませんが、<br>\n業務で触れていなかったRoute53やCloudfrontなどのサービスを触る格好のチャンスに思えたので、AWSのアカウントを新規で作って1から構築することとしました</p>\n\n<p>もっとも自分で作ると言っても、コンソールから手でポチポチやって後々に🤗ってなるのは嫌だったので、<br>\n以前勧めてもらって気になっていた<a href=\"https://qiita.com/Chanmoro/items/55bf0da3aaf37dc26f73\" id=\"reference-25b5f92dd9f138795cf0\">Terraform</a>を勉強して、LP公開+ちょっとした処理をするためのAPI...という一式を作成しようと決めました<br>\n（職場のインフラはあまり<a href=\"https://qiita.com/KeijiYONEDA/items/e9ed0daf0906adec810e\" id=\"reference-c5744b895b9a9b8854a5\">IaC</a>を意識したものになっていないので、業務に還元できないかな...という思いも少しあります🤔）</p>\n\n<p><strong>ささっと</strong>とか虫のいいことを言っています🐞が、<br>\n作ってる最中は己のDNSやhttpsなどに対する基礎知識の足りなさから、もうだいぶ苦しみました⚰<br>\nので、そこら辺の備忘録も兼ねて、紹介していきたいと思います</p>\n\n<p><em>注意：理由は後述しますが、環境構築には状況により数日かかります...ちっともささっとじゃない！</em></p>\n\n<h1>\n<span id=\"どんなものを作るか\" class=\"fragment\"></span><a href=\"#%E3%81%A9%E3%82%93%E3%81%AA%E3%82%82%E3%81%AE%E3%82%92%E4%BD%9C%E3%82%8B%E3%81%8B\"><i class=\"fa fa-link\"></i></a>どんなものを作るか</h1>\n\n<p>👷‍♂️と対面やGoogleハングアウトで会議を重ねて、大体以下のような話が出てきました</p>\n\n<ul>\n<li>LP制作は外注しようね\n\n<ul>\n<li>👷‍♂️がLPのテキストや構成を考えることに意欲的で、割とちゃんとした仕様を作ってくれて大いに助かる</li>\n<li>デザイン・コーディングまでやって頂けるフリーランスの方に<a href=\"https://www.lancers.jp/\" rel=\"nofollow noopener\" target=\"_blank\">ランサーズ</a>にて依頼</li>\n</ul>\n</li>\n<li>インフラと問い合わせを受ける仕組みをぼくが作るね\n\n<ul>\n<li>問い合わせの内容は、👷‍♂️との会話用に作ったSlackで受けとることに</li>\n<li>副次的に出てきた要件\n\n<ul>\n<li>APIトークンのハードコードは嫌だよね</li>\n<li>問い合わせフォームあるしhttps必須だね</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>もちろん独自ドメイン取りたいよね\n\n<ul>\n<li>Route 53で見てみたら.jpドメインが受け入れ難い金額💸だったため、レジストラは<a href=\"https://www.onamae.com/\" rel=\"nofollow noopener\" target=\"_blank\">お名前.com</a>、ネームサーバはRoute 53を利用</li>\n<li>当初ここら辺の概念を全く分かってなくて時間が溶けました。<a href=\"https://www.onamae.com/clever/about/regist.html\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a>や<a href=\"https://www.atmarkit.co.jp/ait/articles/0112/27/news001.html\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a>の記事がオススメです</li>\n</ul>\n</li>\n<li>SSL証明書の更新は自動化したいよね\n\n<ul>\n<li>個人的にタイムリーな話だったため</li>\n<li>ここも何も分かってないことに気づき<a href=\"https://milestone-of-se.nesuke.com/sv-advanced/digicert/digital-certification-summary/\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a>など読みました</li>\n</ul>\n</li>\n</ul>\n\n<h1>\n<span id=\"どのように作るか\" class=\"fragment\"></span><a href=\"#%E3%81%A9%E3%81%AE%E3%82%88%E3%81%86%E3%81%AB%E4%BD%9C%E3%82%8B%E3%81%8B\"><i class=\"fa fa-link\"></i></a>どのように作るか</h1>\n\n<p>ということで、以下のようなインフラを構築🏗することにしました！</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/4c852863f0d22910ccae64c1cf0facbba6c7f86d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3130363235392f64313061666636632d383435342d346161612d303233632d6234313533366637623438382e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2Fd10aff6c-8454-4aaa-023c-b41536f7b488.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=f66a86757ad2b980b73d7b8eaad510d5\" alt=\"構成図\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/d10aff6c-8454-4aaa-023c-b41536f7b488.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2Fd10aff6c-8454-4aaa-023c-b41536f7b488.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=046a01cc1d8352fa7bfc762deb27fbc1 1x\" loading=\"lazy\"></a></p>\n\n<p>簡単にですが一通り説明します<br>\n本番運用するものはLPや問い合わせ機能はインフラとは別で管理したいですが、本記事では簡便のため全部まとめてTerraformで作成します</p>\n\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>役割</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>お名前.com</td>\n<td>ドメインを取得・管理。Terraform管理外</td>\n</tr>\n<tr>\n<td>Route 53</td>\n<td>ネームサーバ(Hosted Zone)いっこ作る</td>\n</tr>\n<tr>\n<td>Certificate Manager(⭐️)</td>\n<td>SSL証明書の生成・管理。更新自動化のため<a href=\"https://docs.aws.amazon.com/ja_jp/acm/latest/userguide/gs-acm-validate-dns.html\" rel=\"nofollow noopener\" target=\"_blank\">DNS検証</a>を利用</td>\n</tr>\n<tr>\n<td>Secrets Manager(🔐)</td>\n<td>\n<a href=\"https://api.slack.com/\" rel=\"nofollow noopener\" target=\"_blank\">Slack API</a>のトークンを管理</td>\n</tr>\n<tr>\n<td>CloudFront</td>\n<td>LPを公開。特定のパス配下をAPIへ回す。<a href=\"https://docs.aws.amazon.com/ja_jp/AmazonCloudFront/latest/DeveloperGuide/georestrictions.html\" rel=\"nofollow noopener\" target=\"_blank\">地域制限</a>を使って日本(と米国)に絞る</td>\n</tr>\n<tr>\n<td>API Gateway</td>\n<td>問い合わせAPIのエンドポイント。<a href=\"https://docs.aws.amazon.com/ja_jp/apigateway/latest/developerguide/create-regional-api.html\" rel=\"nofollow noopener\" target=\"_blank\">リージョンAPI</a>として構築</td>\n</tr>\n<tr>\n<td>S3</td>\n<td>LPの置き場所と、<a href=\"https://docs.aws.amazon.com/ja_jp/AmazonCloudFront/latest/DeveloperGuide/AccessLogs.html\" rel=\"nofollow noopener\" target=\"_blank\">CloudFrontのアクセスログ</a>保管先</td>\n</tr>\n<tr>\n<td>Lambda</td>\n<td>問い合わせをSlackに投稿</td>\n</tr>\n<tr>\n<td>Slack</td>\n<td>チャンネルに問い合わせが上がってくる。Terraform管理外</td>\n</tr>\n</tbody>\n</table>\n\n<p>書いてて気づいたんですが、これそのままSPAの公開なんかにも応用できそうな構成ですね😎</p>\n\n<h1>\n<span id=\"作ったもの\" class=\"fragment\"></span><a href=\"#%E4%BD%9C%E3%81%A3%E3%81%9F%E3%82%82%E3%81%AE\"><i class=\"fa fa-link\"></i></a>作ったもの</h1>\n\n<p><a href=\"https://github.com/yktakaha4/lp-infra-by-terraform\" rel=\"nofollow noopener\" target=\"_blank\">GitHub</a>を見てください<img alt=\":octocat:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/octocat.png\" title=\":octocat:\" width=\"20\" loading=\"lazy\"><br>\nだけだとあんまりなので、 順を追って説明していきます</p>\n\n<h2>\n<span id=\"準備\" class=\"fragment\"></span><a href=\"#%E6%BA%96%E5%82%99\"><i class=\"fa fa-link\"></i></a>準備</h2>\n\n<p>Terraformの前にいくつか必要なものがあります<br>\n具体的な作り方は記事の本旨から外れるため、各自おググりください🙄</p>\n\n<h3>\n<span id=\"お名前comでドメインを取得\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E5%90%8D%E5%89%8Dcom%E3%81%A7%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3%E3%82%92%E5%8F%96%E5%BE%97\"><i class=\"fa fa-link\"></i></a>お名前.comでドメインを取得</h3>\n\n<p>他のレジストラでもいいものと思います<br>\nRoute 53を使う場合は、ネームサーバへの登録含め自動化できるんでしょうか？<br>\n（.jpが高いからとか言ってた割に.comなのはサンプルだからです）</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/ee91a597bc7e4e8c29dc95c2a4bc01f9968c1a52/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3130363235392f36633332313963662d616566642d313230392d336338372d6437356135366333326466372e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2F6c3219cf-aefd-1209-3c87-d75a56c32df7.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=d1c8c7c6ca7b6257aebe0bdb3d661e97\" alt=\"ドメイン名\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/6c3219cf-aefd-1209-3c87-d75a56c32df7.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2F6c3219cf-aefd-1209-3c87-d75a56c32df7.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=43641be820a2b4c4c155419adedbc5e5 1x\" loading=\"lazy\"></a></p>\n\n<h3>\n<span id=\"slackで投稿用botを作成\" class=\"fragment\"></span><a href=\"#slack%E3%81%A7%E6%8A%95%E7%A8%BF%E7%94%A8bot%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>Slackで投稿用Botを作成</h3>\n\n<p>Slack APIは<a href=\"https://api.slack.com/methods/chat.postMessage\" rel=\"nofollow noopener\" target=\"_blank\">chat.postMessage</a>を使います<br>\n所定の権限を付与したbotを作成した上で、OAuth Access Tokenをメモっておきましょう</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/1d5ee4813ec72ecd2c3ddaa704fd449a373a7aac/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3130363235392f37623630383736302d666433632d356239372d333036612d6666646232656133396261652e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2F7b608760-fd3c-5b97-306a-ffdb2ea39bae.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=d0cc52b455a3dda8146ee364c35426f7\" alt=\"Access Token\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/7b608760-fd3c-5b97-306a-ffdb2ea39bae.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2F7b608760-fd3c-5b97-306a-ffdb2ea39bae.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=f48e896d6471bbd23605de9bdb3bab7a 1x\" loading=\"lazy\"></a></p>\n\n<p>また、投稿先のチャンネルIDも必要になりますので、<code>https://xxxxx.slack.com/messages/CGxxxxxxx</code>の<code>CGxxxxxxx</code>の部分も確認しておいてください</p>\n\n<h3>\n<span id=\"awsアカウントとユーザ\" class=\"fragment\"></span><a href=\"#aws%E3%82%A2%E3%82%AB%E3%82%A6%E3%83%B3%E3%83%88%E3%81%A8%E3%83%A6%E3%83%BC%E3%82%B6\"><i class=\"fa fa-link\"></i></a>AWSアカウントとユーザ</h3>\n\n<p><code>PowerUserAccess</code>がついたユーザの<code>AWS_ACCESS_KEY_ID</code>および<code>AWS_SECRET_ACCESS_KEY</code>が必要です<br>\nあと、作っただけでたくさんお金のかかるものは定義していないつもりですが、万が一に備えて請求ダッシュボードの設定やアラームは設定して頂いておいた方がよいでしょう<br>\n請求については自己責任でお願いします🙏</p>\n\n<h2>\n<span id=\"いざ構築\" class=\"fragment\"></span><a href=\"#%E3%81%84%E3%81%96%E6%A7%8B%E7%AF%89\"><i class=\"fa fa-link\"></i></a>いざ構築</h2>\n\n<p>準備ができたら、実際にTerraformにて環境を構築していきます！</p>\n\n<p>の前に、以下をインストールしておいてください<br>\n具体的な方法、およびWindowsの方は🙄</p>\n\n<ul>\n<li><a href=\"https://qiita.com/kompiro/items/5fc46089247a56243a62\" id=\"reference-193ce11a3e9dab4534b2\">direnv</a></li>\n<li>\n<a href=\"https://qiita.com/kamatama_41/items/ba59a070d8389aab7694\" id=\"reference-1dd40c6acb2147367859\">tfenv</a>\n\n<ul>\n<li>terraformのインストールもお願いします</li>\n<li>本稿では<code>v0.12.3</code>を使用しています</li>\n</ul>\n</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"shell_session\">\n<div class=\"code-lang\"><span class=\"bold\">ターミナル</span></div>\n<div class=\"highlight\"><pre><code><span class=\"gp\">$</span><span class=\"w\"> </span>direnv version\n<span class=\"go\">2.20.1\n\n</span><span class=\"gp\">$</span><span class=\"w\"> </span>tfenv <span class=\"nt\">-v</span>\n<span class=\"go\">tfenv 1.0.1\n\n</span><span class=\"gp\">$</span><span class=\"w\"> </span>terraform <span class=\"nt\">-v</span>\n<span class=\"go\">Terraform v0.12.3\n</span></code></pre></div>\n</div>\n\n<p>それではやっていきましょう<br>\nなにはともあれ、まずはリポジトリを取得します</p>\n\n<div class=\"code-frame\" data-lang=\"shell_session\">\n<div class=\"code-lang\"><span class=\"bold\">ターミナル</span></div>\n<div class=\"highlight\"><pre><code><span class=\"gp\">$</span><span class=\"w\"> </span>git clone https://github.com/yktakaha4/lp-infra-by-terraform.git\n<span class=\"go\">\n</span><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">cd </span>lp-infra-by-terraform\n<span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">ls</span> <span class=\"nt\">-l</span>\n</code></pre></div>\n</div>\n\n<p>次に、各種設定ファイルを作っていきます<br>\n<code>.sample</code>とついているやつがサンプルなので、コピーの上値を埋めてください<br>\n<code>AWS_ACCESS_KEY_ID</code>、<code>AWS_SECRET_ACCESS_KEY</code>、<code>domain_name</code>は準備の項で用意した値、<br>\n<code>resource_prefix</code>はS3のバケット名など各種リソースに設定されるので、人と被らなさそうなものを任意で設定してください</p>\n\n<p>なお、<code>terraform.tf.sample</code>は、tfstateファイルをS3で管理する場合必要になります<br>\nお試しでやるようでしたら特に不要です</p>\n\n<div class=\"code-frame\" data-lang=\"shell_session\">\n<div class=\"code-lang\"><span class=\"bold\">ターミナル</span></div>\n<div class=\"highlight\"><pre><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">cp</span> <span class=\"nt\">-p</span> terraform.tfvars.sample terraform.tfvars\n<span class=\"gp\">$</span><span class=\"w\"> </span>vim terraform.tfvars\n<span class=\"go\">\n</span><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">cp</span> <span class=\"nt\">-p</span> .envrc.sample .envrc\n<span class=\"gp\">$</span><span class=\"w\"> </span>vim .envrc\n<span class=\"gp\">$</span><span class=\"w\"> </span>direnv allow\n<span class=\"go\">\n</span><span class=\"gp\">#</span><span class=\"w\"> </span>複数人で共有して開発する場合のみ設定\n<span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">cp</span> <span class=\"nt\">-p</span> terraform.tf.sample terraform.tf\n<span class=\"gp\">$</span><span class=\"w\"> </span>vim terraform.tf\n</code></pre></div>\n</div>\n\n<p>ここまで険しい道のり⛰でしたが、いよいよ<code>terraform</code>コマンドを使っていきます</p>\n\n<p>Terraformは、カレントディレクトリ直下にあるtfファイルを参照して各種リソースを作成します<br>\n<code>plan</code>で作成されるリソースの確認、<code>apply</code>で適用です。簡単ですね！</p>\n\n<p>今回はドメインの取得をお名前.comで行なっていますので、<br>\nRoute 53でホストゾーンを作成した後に、ネームサーバのアドレスをお名前.comの管理コンソールに設定する必要があります<br>\nこちらは手作業で行う必要があるため、まずホストゾーンのみ作成するコマンドを実行します</p>\n\n<p><code>-target=xxxx</code>で、特定のリソースのみ作成することができます<br>\n今回は以下のリソースのみ作成します</p>\n\n<div class=\"code-frame\" data-lang=\"hcl\">\n<div class=\"code-lang\"><span class=\"bold\">route53.tf</span></div>\n<div class=\"highlight\"><pre><code><span class=\"nx\">resource</span> <span class=\"s2\">\"aws_route53_zone\"</span> <span class=\"s2\">\"domain_name\"</span> <span class=\"p\">{</span>\n  <span class=\"nx\">name</span> <span class=\"p\">=</span> <span class=\"s2\">\"${var.domain_name}\"</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n</div>\n\n<p>それでは、いってみましょう！</p>\n\n<div class=\"code-frame\" data-lang=\"shell_session\">\n<div class=\"code-lang\"><span class=\"bold\">ターミナル</span></div>\n<div class=\"highlight\"><pre><code><span class=\"gp\">#</span><span class=\"w\"> </span>環境構築\n<span class=\"gp\">$</span><span class=\"w\"> </span>terraform init\n<span class=\"go\">\n</span><span class=\"gp\">#</span><span class=\"w\"> </span>お名前.comにネームサーバーの情報を登録する必要があるため、まずホストゾーンのみ作成する\n<span class=\"gp\">$</span><span class=\"w\"> </span>terraform plan <span class=\"nt\">-target</span><span class=\"o\">=</span>aws_route53_zone.domain_name\n<span class=\"gp\">$</span><span class=\"w\"> </span>terraform apply <span class=\"nt\">-target</span><span class=\"o\">=</span>aws_route53_zone.domain_name\n<span class=\"go\">\nOutputs:\n\nname_servers = [\n  \"ns-xxxx.awsdns-xx.org\",\n  \"ns-xxxx.awsdns-xx.co.uk\",\n  \"ns-xxxx.awsdns-xx.com\",\n  \"ns-xxxx.awsdns-xx.net\",\n]\n</span></code></pre></div>\n</div>\n\n<p>Outputsとして、上記のようにネームサーバーのドメインが表示されたら無事成功です<br>\nAWSのコンソールから<code>Route 53 -&gt; ホストゾーン</code>と辿っていくとドメインができてるはずですので、見てみてください</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/c4581da77a56159c6d4bccf8352ab651ef83813b/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3130363235392f30326165376466332d383961362d323964382d323132652d3661303061383035366466322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2F02ae7df3-89a6-29d8-212e-6a00a8056df2.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=20f66483bcf829e4d05ee2404982f97a\" alt=\"ホストゾーン\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/02ae7df3-89a6-29d8-212e-6a00a8056df2.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2F02ae7df3-89a6-29d8-212e-6a00a8056df2.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=cfbcaaad668017aa2f6f4bb189199dcf 1x\" loading=\"lazy\"></a></p>\n\n<p>いい感じですね！</p>\n\n<p>ここで、Terraformを一度離れて、ネームサーバーをお名前.comへ登録します<br>\n<a href=\"https://www.onamae.com/guide/p/67\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a>に具体的な手順が書いてありますので、参考にしつつやってみてください</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/4455556379dbee366293b2e2661a4c38dd4eac98/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3130363235392f31653238366566612d306636362d383564362d633663362d3130373732613366613663312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2F1e286efa-0f66-85d6-c6c6-10772a3fa6c1.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=17fb50d6b0557897f82fdc5e66e8e47a\" alt=\"ドメインNavi\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/1e286efa-0f66-85d6-c6c6-10772a3fa6c1.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2F1e286efa-0f66-85d6-c6c6-10772a3fa6c1.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=c69bd1a86c31cf4764436f94c7fd3c51 1x\" loading=\"lazy\"></a></p>\n\n<p>できましたでしょうか？</p>\n\n<p>お名前.comのコンソールからの登録自体は割とすぐに終わるのですが、<br>\n設定したネームサーバが浸透（という言い方でいいんでしょうか？）するには、<a href=\"https://faq.nttpc.co.jp/faq/show/13352?site_domain=suitex\" rel=\"nofollow noopener\" target=\"_blank\">特に再作成時は最大で72時間程度かかる</a>そうです😕<br>\nネームサーバの変更が完了していないと以降のコマンドを打ってもタイムアウトしますので、ここはグッとこらえて時が経つのを待ちます...</p>\n\n<p><code>dig</code>コマンドを使うと、ドメイン名に対応するネームサーバを確認することができるので、時間を開けて見てみてください</p>\n\n<div class=\"code-frame\" data-lang=\"shell_session\">\n<div class=\"code-lang\"><span class=\"bold\">ターミナル</span></div>\n<div class=\"highlight\"><pre><code><span class=\"gp\">#</span><span class=\"w\"> </span>ネームサーバの確認用コマンド\n<span class=\"gp\">$</span><span class=\"w\"> </span>dig example-domain.com ns\n<span class=\"go\">\n</span><span class=\"gp\">;</span><span class=\"p\">;</span> ANSWER SECTION:\n<span class=\"go\">xxxxxxxxx.com.          172756  IN      NS      ns-xxxx.awsdns-xx.net.\nxxxxxxxxx.com.          172756  IN      NS      ns-xxxx.awsdns-xx.org.\nxxxxxxxxx.com.          172756  IN      NS      ns-xxxx.awsdns-xx.co.uk.\nxxxxxxxxx.com.          172756  IN      NS      ns-xxxx.awsdns-xx.com.\n\n</span><span class=\"gp\">#</span><span class=\"w\"> </span>↑で返却される内容が、 name_servers で表示されたネームサーバに問い合わせた時と同じだったら準備完了\n<span class=\"gp\">$</span><span class=\"w\"> </span>dig example-domain.com @ns-xxxx.awsdns-xx.org ns\n</code></pre></div>\n</div>\n\n<p>いずれにせよすぐには終わらないので、もういくつか先に済ませておいた方がいい内容をやっておきます</p>\n\n<p>Slack APIから取得したトークンとチャンネルIDをSecrets Managerに登録します</p>\n\n<div class=\"code-frame\" data-lang=\"shell_session\">\n<div class=\"code-lang\"><span class=\"bold\">ターミナル</span></div>\n<div class=\"highlight\"><pre><code><span class=\"gp\">$</span><span class=\"w\"> </span>terraform plan <span class=\"nt\">-target</span><span class=\"o\">=</span>aws_secretsmanager_secret_version.slack_api\n<span class=\"gp\">$</span><span class=\"w\"> </span>terraform apply <span class=\"nt\">-target</span><span class=\"o\">=</span>aws_secretsmanager_secret_version.slack_api\n</code></pre></div>\n</div>\n\n<p>applyが完了したらAWSコンソールを開いて、それぞれのシークレットの値を編集してください<br>\n本来、Terraformで作ったリソースに手で変更を加えると差分検知されるような仕組みになっているのですが、<br>\nこのシークレットの値については差分検知の確認対象外にしています</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/bf0aed245317cd95397da753b3bbb84e73daa1aa/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3130363235392f30663765363638372d396237332d316631332d363461332d6664396434643864666263302e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2F0f7e6687-9b73-1f13-64a3-fd9d4d8dfbc0.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=007a4854f98fe07fd324d8f0ee34533d\" alt=\"Secrets Manager 2019-07-08 22-47-30(1).png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/0f7e6687-9b73-1f13-64a3-fd9d4d8dfbc0.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2F0f7e6687-9b73-1f13-64a3-fd9d4d8dfbc0.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=4ddc9f0ee6da4ac6e260d9a0b1f34236 1x\" loading=\"lazy\"></a></p>\n\n<p>そうこうしているうちにDNSの浸透が済んだら、あとは一気に作成できます✌️</p>\n\n<p><code>-target</code>の指定を外すと全てのリソースを作成できるので、一思いにやってしまいましょう<br>\nCloudFrontなど作成に時間のかかるリソースも色々あるので、1時間ほどは見ていただいた方がいいようです</p>\n\n<div class=\"code-frame\" data-lang=\"shell_session\">\n<div class=\"code-lang\"><span class=\"bold\">ターミナル</span></div>\n<div class=\"highlight\"><pre><code><span class=\"gp\">#</span><span class=\"w\"> </span>残りのリソースを適用\n<span class=\"gp\">$</span><span class=\"w\"> </span>terraform plan\n<span class=\"gp\">$</span><span class=\"w\"> </span>terraform apply\n</code></pre></div>\n</div>\n\n<p>...無事に正常終了しましたでしょうか？</p>\n\n<p>もしもうまくいったようであれば、しばし待ったのちご自身の<code>https://example-domain.com/</code>にアクセスすると、以下のようなページが表示されるはずです<br>\n(なお、htmlは<a href=\"https://demos.creative-tim.com/paper-kit-2/index.html\" rel=\"nofollow noopener\" target=\"_blank\">Paper Kit 2</a>を切り貼りしてでっち上げたものです)</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/f4b015b127e6ef8616c74c3473fc58990da8332e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3130363235392f65666362343032302d363337622d623062372d346439632d6431323963623633353438362e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2Fefcb4020-637b-b0b7-4d9c-d129cb635486.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=98584702fd46274f236420cf79b1926b\" alt=\"LP\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/efcb4020-637b-b0b7-4d9c-d129cb635486.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2Fefcb4020-637b-b0b7-4d9c-d129cb635486.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=0a3263ede7bc02191a1d4d90cabe3012 1x\" loading=\"lazy\"></a></p>\n\n<p>おもむろにボタンも押してみましょう...！</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/63564e910ef2c01871e8426ebad1aa0c837b0290/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3130363235392f34396536376638652d383231322d356433642d306131642d6534643532393533663330662e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2F49e67f8e-8212-5d3d-0a1d-e4d52953f30f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=996bea89bbf0ef27d92a2b982818949f\" alt=\"Slack\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/49e67f8e-8212-5d3d-0a1d-e4d52953f30f.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2F49e67f8e-8212-5d3d-0a1d-e4d52953f30f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=e6a2fadc850784a1459a77b2894e27ce 1x\" loading=\"lazy\"></a></p>\n\n<p>これにてガンガン仕事を受けられますね！！！🍾🎂🎉</p>\n\n<h2>\n<span id=\"トラブルシューティング構築\" class=\"fragment\"></span><a href=\"#%E3%83%88%E3%83%A9%E3%83%96%E3%83%AB%E3%82%B7%E3%83%A5%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0%E6%A7%8B%E7%AF%89\"><i class=\"fa fa-link\"></i></a>トラブルシューティング(構築)</h2>\n\n<p>私が引っかかったものを晒しておきます<br>\n以下以外のものが出てきた場合は、コメントで教えて頂けたら補記したいと思います<br>\n（こうすれば解決できた...というところまでやっていただけるとありがたいです）</p>\n\n<div class=\"code-frame\" data-lang=\"shell_session\">\n<div class=\"code-lang\"><span class=\"bold\">その1</span></div>\n<div class=\"highlight\"><pre><code><span class=\"gp\">#</span><span class=\"w\"> </span>CloudFrontでエラーの場合は、AWSコンソールを確認し、ステータスが Deployed になるまで待つ\n<span class=\"go\">Error: error waiting until CloudFront Distribution (xxxxx) is deployed: timeout while waiting for state to become 'Deployed' (last state: 'InProgress', timeout: 1h10m0s)\n\n</span><span class=\"gp\">#</span><span class=\"w\"> </span>Deployed になった後、 untaintの実行\n<span class=\"gp\">$</span><span class=\"w\"> </span>terraform untaint aws_cloudfront_distribution.domain_name\n<span class=\"go\">Resource instance aws_cloudfront_distribution.domain_name has been successfully untainted.\n\n</span><span class=\"gp\">#</span><span class=\"w\"> </span>残りのリソースを適用\n<span class=\"gp\">$</span><span class=\"w\"> </span>terraform apply\n</code></pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"shell_session\">\n<div class=\"code-lang\"><span class=\"bold\">その2</span></div>\n<div class=\"highlight\"><pre><code><span class=\"gp\">#</span><span class=\"w\"> </span>ACMで発行できる証明書の数は1年間で上限があり、作成・削除を繰り返す等して最大値を越えるとエラーとなってしまう\n<span class=\"go\">Error: Error requesting certificate: LimitExceededException: Error: you have reached your limit of 10 certificates in the last year.\n\n</span><span class=\"gp\">#</span><span class=\"w\"> </span>サポートに投げると上限緩和してもらえる\n<span class=\"gp\">#</span><span class=\"w\"> </span>https://docs.aws.amazon.com/ja_jp/acm/latest/userguide/acm-limits.html#limit-certs-yearly\n</code></pre></div>\n</div>\n\n<h1>\n<span id=\"削除方法\" class=\"fragment\"></span><a href=\"#%E5%89%8A%E9%99%A4%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>削除方法</h1>\n\n<p>作るのに引き換え削除は楽チンです。<code>terraform destroy</code>で削除できます</p>\n\n<p>ただし何も指定しないと本当に全部消えます👋<br>\nplanをよく確認したり、<code>target=xxxxx</code>で部分的に消していくなど、慎重に作業した方がよいでしょう</p>\n\n<div class=\"code-frame\" data-lang=\"shell_session\">\n<div class=\"code-lang\"><span class=\"bold\">コンソール</span></div>\n<div class=\"highlight\"><pre><code><span class=\"gp\">$</span><span class=\"w\"> </span>terraform plan <span class=\"nt\">--destory</span>\n<span class=\"gp\">$</span><span class=\"w\"> </span>terraform destroy\n</code></pre></div>\n</div>\n\n<h2>\n<span id=\"トラブルシューティング削除\" class=\"fragment\"></span><a href=\"#%E3%83%88%E3%83%A9%E3%83%96%E3%83%AB%E3%82%B7%E3%83%A5%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0%E5%89%8A%E9%99%A4\"><i class=\"fa fa-link\"></i></a>トラブルシューティング(削除)</h2>\n\n<p>作るときと同様、引っかかったものを書いておきます</p>\n\n<div class=\"code-frame\" data-lang=\"shell_session\">\n<div class=\"code-lang\"><span class=\"bold\">その1</span></div>\n<div class=\"highlight\"><pre><code><span class=\"gp\">#</span><span class=\"w\"> </span>以下エラーの場合は、AWSのコンソールなどから対象のバケットの中身を空にする\n<span class=\"go\">Error: error deleting S3 Bucket (xxxxx): BucketNotEmpty: The bucket you tried to delete is not empty\n</span></code></pre></div>\n</div>\n\n<h1>\n<span id=\"所感\" class=\"fragment\"></span><a href=\"#%E6%89%80%E6%84%9F\"><i class=\"fa fa-link\"></i></a>所感</h1>\n\n<p>環境構築を手作業で行なっていると、いつも「これで確認すべき項目は十分だろうか...？」とか「設定値正しく設定できてるかな...？」とか、<br>\nよしんば動いたとしても「本当にあれでよかったんだろうか...🤢」という気持ちが付きまとっていた（しかも時間が経つと全部忘れる）のですが、<br>\nインフラをコードに落とし込めると、アプリケーションエンジニアにとってもグッと距離感が近づいたような気がしました<br>\n特に、<strong>リソース間の依存関係を理解する</strong>という意味では、GUIよりもコードの方が優れているように感じました</p>\n\n<p>また、個人開発だと、寝る前のちょっとした時間で開発したり、前回の作業から間が空いてしまったり...ということもよくあると思いますが、<br>\nどこまで何を作ったか、tfファイルやtfstateファイルにしっかり残るので、<strong>安心してやったことを忘れることができる</strong>というのが地味にありがたかったです😋</p>\n\n<p>今回の記事では、作成したtfファイルについてはほとんど触れませんでしたが、<br>\n各ファイルの設定値とAWSコンソールの状態を比較したり、内容を追加・削除してみたりと、ぜひ各自で色々試して頂くことをお勧めします！<br>\n（よくないところがあったら、プルリクやコメントで指摘頂ければ幸いです）</p>\n\n<p>自分が書いたtfファイルで次々にインフラが組み上がっていく様を見ていると、<br>\nそれこそ<a href=\"https://ja.wikipedia.org/wiki/%E3%83%86%E3%83%A9%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9F%E3%83%B3%E3%82%B0\" rel=\"nofollow noopener\" target=\"_blank\">創造主になったような気持ち🌏</a>になれますよ！</p>\n\n<h1>\n<span id=\"参考資料\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83%E8%B3%87%E6%96%99\"><i class=\"fa fa-link\"></i></a>参考資料</h1>\n\n<p>オススメ情報のリンクを貼っておきます📚</p>\n\n<ul>\n<li>\n<a href=\"https://qiita.com/pypypyo14/items/5520f3defa55119f3a1a\" id=\"reference-e313532a6d2bf6540818\">VSCodeでTerraformを書くときの設定</a>\n\n<ul>\n<li>私はVSCodeで開発していますが、Intellijなんかもいい感じに使えるらしいです</li>\n</ul>\n</li>\n<li>\n<a href=\"https://booth.pm/ja/items/1318735\" rel=\"nofollow noopener\" target=\"_blank\">【ダウンロード版】Pragmatic Terraform on AWS</a>\n\n<ul>\n<li>ともあれこちらを読むことをお勧めします</li>\n<li>今回使わなかったサービス含め、様々なリソースの作り方について具体的に書いてあります</li>\n</ul>\n</li>\n<li>\n<a href=\"https://www.terraform.io/docs/providers/aws/\" rel=\"nofollow noopener\" target=\"_blank\">Terraformの公式ドキュメント</a>\n\n<ul>\n<li>設定値など分からないことがあったら、<code>resource \"aws_xxxxx\"</code>などのリソース名で検索して↑のサイトを見れば基本全部書いてあります</li>\n</ul>\n</li>\n<li>\n<a href=\"https://qiita.com/minamijoyo/items/1f57c62bed781ab8f4d7\" id=\"reference-d9455f0e4e292aa267e1\">Terraform職人入門: 日々の運用で学んだ知見を淡々とまとめる</a>\n\n<ul>\n<li>tips集です。記法や考え方が頭に馴染んできたら読むのをお勧めします</li>\n</ul>\n</li>\n</ul>\n",
      "body": "# はじめに\n\n独立起業している知人（建築系なので、以下👷‍♂️）から、自社で直接仕事の依頼を受けるためのランディングページを作りたい...🔥という相談を受けました\n\n[MVP](https://uxmilk.jp/65654)の考え方からいけば、[こういうの](https://portfolio-ai.com/instapage_introduce)を使ったり、作るにしてもherokuなどを使ったりでもよかったのかもしれませんが、\n業務で触れていなかったRoute53やCloudfrontなどのサービスを触る格好のチャンスに思えたので、AWSのアカウントを新規で作って1から構築することとしました\n\nもっとも自分で作ると言っても、コンソールから手でポチポチやって後々に🤗ってなるのは嫌だったので、\n以前勧めてもらって気になっていた[Terraform](https://qiita.com/Chanmoro/items/55bf0da3aaf37dc26f73)を勉強して、LP公開+ちょっとした処理をするためのAPI...という一式を作成しようと決めました\n（職場のインフラはあまり[IaC](https://qiita.com/KeijiYONEDA/items/e9ed0daf0906adec810e)を意識したものになっていないので、業務に還元できないかな...という思いも少しあります🤔）\n\n**ささっと**とか虫のいいことを言っています🐞が、\n作ってる最中は己のDNSやhttpsなどに対する基礎知識の足りなさから、もうだいぶ苦しみました⚰\nので、そこら辺の備忘録も兼ねて、紹介していきたいと思います\n\n*注意：理由は後述しますが、環境構築には状況により数日かかります...ちっともささっとじゃない！*\n\n# どんなものを作るか\n\n👷‍♂️と対面やGoogleハングアウトで会議を重ねて、大体以下のような話が出てきました\n\n- LP制作は外注しようね\n    - 👷‍♂️がLPのテキストや構成を考えることに意欲的で、割とちゃんとした仕様を作ってくれて大いに助かる\n    - デザイン・コーディングまでやって頂けるフリーランスの方に[ランサーズ](https://www.lancers.jp/)にて依頼\n- インフラと問い合わせを受ける仕組みをぼくが作るね\n    - 問い合わせの内容は、👷‍♂️との会話用に作ったSlackで受けとることに\n    - 副次的に出てきた要件\n        - APIトークンのハードコードは嫌だよね\n        - 問い合わせフォームあるしhttps必須だね\n- もちろん独自ドメイン取りたいよね\n    - Route 53で見てみたら.jpドメインが受け入れ難い金額💸だったため、レジストラは[お名前.com](https://www.onamae.com/)、ネームサーバはRoute 53を利用\n    - 当初ここら辺の概念を全く分かってなくて時間が溶けました。[こちら](https://www.onamae.com/clever/about/regist.html)や[こちら](https://www.atmarkit.co.jp/ait/articles/0112/27/news001.html)の記事がオススメです\n- SSL証明書の更新は自動化したいよね\n    - 個人的にタイムリーな話だったため\n    - ここも何も分かってないことに気づき[こちら](https://milestone-of-se.nesuke.com/sv-advanced/digicert/digital-certification-summary/)など読みました\n\n# どのように作るか\n\nということで、以下のようなインフラを構築🏗することにしました！\n\n![構成図](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/d10aff6c-8454-4aaa-023c-b41536f7b488.png)\n\n簡単にですが一通り説明します\n本番運用するものはLPや問い合わせ機能はインフラとは別で管理したいですが、本記事では簡便のため全部まとめてTerraformで作成します\n\n|名称|役割|\n|---|---|\n|お名前.com|ドメインを取得・管理。Terraform管理外|\n|Route 53|ネームサーバ(Hosted Zone)いっこ作る|\n|Certificate Manager(⭐️)|SSL証明書の生成・管理。更新自動化のため[DNS検証](https://docs.aws.amazon.com/ja_jp/acm/latest/userguide/gs-acm-validate-dns.html)を利用|\n|Secrets Manager(🔐)|[Slack API](https://api.slack.com/)のトークンを管理|\n|CloudFront|LPを公開。特定のパス配下をAPIへ回す。[地域制限](https://docs.aws.amazon.com/ja_jp/AmazonCloudFront/latest/DeveloperGuide/georestrictions.html)を使って日本(と米国)に絞る|\n|API Gateway|問い合わせAPIのエンドポイント。[リージョンAPI](https://docs.aws.amazon.com/ja_jp/apigateway/latest/developerguide/create-regional-api.html)として構築|\n|S3|LPの置き場所と、[CloudFrontのアクセスログ](https://docs.aws.amazon.com/ja_jp/AmazonCloudFront/latest/DeveloperGuide/AccessLogs.html)保管先|\n|Lambda|問い合わせをSlackに投稿|\n|Slack|チャンネルに問い合わせが上がってくる。Terraform管理外|\n\n書いてて気づいたんですが、これそのままSPAの公開なんかにも応用できそうな構成ですね😎\n\n# 作ったもの\n\n[GitHub](https://github.com/yktakaha4/lp-infra-by-terraform)を見てください:octocat:\nだけだとあんまりなので、 順を追って説明していきます\n\n## 準備\n\nTerraformの前にいくつか必要なものがあります\n具体的な作り方は記事の本旨から外れるため、各自おググりください🙄\n\n### お名前.comでドメインを取得\n\n他のレジストラでもいいものと思います\nRoute 53を使う場合は、ネームサーバへの登録含め自動化できるんでしょうか？\n（.jpが高いからとか言ってた割に.comなのはサンプルだからです）\n\n![ドメイン名](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/6c3219cf-aefd-1209-3c87-d75a56c32df7.png)\n\n### Slackで投稿用Botを作成\n\nSlack APIは[chat.postMessage](https://api.slack.com/methods/chat.postMessage)を使います\n所定の権限を付与したbotを作成した上で、OAuth Access Tokenをメモっておきましょう\n\n![Access Token](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/7b608760-fd3c-5b97-306a-ffdb2ea39bae.png)\n\nまた、投稿先のチャンネルIDも必要になりますので、`https://xxxxx.slack.com/messages/CGxxxxxxx`の`CGxxxxxxx`の部分も確認しておいてください\n\n\n### AWSアカウントとユーザ\n\n`PowerUserAccess`がついたユーザの`AWS_ACCESS_KEY_ID`および`AWS_SECRET_ACCESS_KEY`が必要です\nあと、作っただけでたくさんお金のかかるものは定義していないつもりですが、万が一に備えて請求ダッシュボードの設定やアラームは設定して頂いておいた方がよいでしょう\n請求については自己責任でお願いします🙏\n\n## いざ構築\n\n準備ができたら、実際にTerraformにて環境を構築していきます！\n\nの前に、以下をインストールしておいてください\n具体的な方法、およびWindowsの方は🙄\n\n- [direnv](https://qiita.com/kompiro/items/5fc46089247a56243a62)\n- [tfenv](https://qiita.com/kamatama_41/items/ba59a070d8389aab7694)\n    - terraformのインストールもお願いします\n    - 本稿では`v0.12.3`を使用しています\n\n```shell_session:ターミナル\n$ direnv version\n2.20.1\n\n$ tfenv -v\ntfenv 1.0.1\n\n$ terraform -v\nTerraform v0.12.3\n```\n\nそれではやっていきましょう\nなにはともあれ、まずはリポジトリを取得します\n\n```shell_session:ターミナル\n$ git clone https://github.com/yktakaha4/lp-infra-by-terraform.git\n\n$ cd lp-infra-by-terraform\n$ ls -l\n```\n\n次に、各種設定ファイルを作っていきます\n`.sample`とついているやつがサンプルなので、コピーの上値を埋めてください\n`AWS_ACCESS_KEY_ID`、`AWS_SECRET_ACCESS_KEY`、`domain_name`は準備の項で用意した値、\n`resource_prefix`はS3のバケット名など各種リソースに設定されるので、人と被らなさそうなものを任意で設定してください\n\nなお、`terraform.tf.sample`は、tfstateファイルをS3で管理する場合必要になります\nお試しでやるようでしたら特に不要です\n\n```shell_session:ターミナル\n$ cp -p terraform.tfvars.sample terraform.tfvars\n$ vim terraform.tfvars\n\n$ cp -p .envrc.sample .envrc\n$ vim .envrc\n$ direnv allow\n\n# 複数人で共有して開発する場合のみ設定\n$ cp -p terraform.tf.sample terraform.tf\n$ vim terraform.tf\n```\n\nここまで険しい道のり⛰でしたが、いよいよ`terraform`コマンドを使っていきます\n\nTerraformは、カレントディレクトリ直下にあるtfファイルを参照して各種リソースを作成します\n`plan`\bで作成されるリソースの確認、`apply`で適用です。簡単ですね！\n\n今回はドメインの取得をお名前.comで行なっていますので、\nRoute 53でホストゾーンを作成した後に、ネームサーバのアドレスをお名前.comの管理コンソールに設定する必要があります\nこちらは手作業で行う必要があるため、まずホストゾーンのみ作成するコマンドを実行します\n\n`-target=xxxx`で、特定のリソースのみ作成することができます\n今回は以下のリソースのみ作成します\n\n```hcl:route53.tf\nresource \"aws_route53_zone\" \"domain_name\" {\n  name = \"${var.domain_name}\"\n}\n```\n\nそれでは、いってみましょう！\n\n```shell_session:ターミナル\n# 環境構築\n$ terraform init\n\n# お名前.comにネームサーバーの情報を登録する必要があるため、まずホストゾーンのみ作成する\n$ terraform plan -target=aws_route53_zone.domain_name\n$ terraform apply -target=aws_route53_zone.domain_name\n\nOutputs:\n\nname_servers = [\n  \"ns-xxxx.awsdns-xx.org\",\n  \"ns-xxxx.awsdns-xx.co.uk\",\n  \"ns-xxxx.awsdns-xx.com\",\n  \"ns-xxxx.awsdns-xx.net\",\n]\n```\n\nOutputsとして、上記のようにネームサーバーのドメインが表示されたら無事成功です\nAWSのコンソールから`Route 53 -> ホストゾーン`と辿っていくとドメインができてるはずですので、見てみてください\n\n![ホストゾーン](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/02ae7df3-89a6-29d8-212e-6a00a8056df2.png)\n\nいい感じですね！\n\nここで、Terraformを一度離れて、ネームサーバーをお名前.comへ登録します\n[こちら](https://www.onamae.com/guide/p/67)に具体的な手順が書いてありますので、参考にしつつやってみてください\n\n![ドメインNavi](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/1e286efa-0f66-85d6-c6c6-10772a3fa6c1.png)\n\nできましたでしょうか？\n\nお名前.comのコンソールからの登録自体は割とすぐに終わるのですが、\n設定したネームサーバが浸透（という言い方でいいんでしょうか？）するには、[特に再作成時は最大で72時間程度かかる](https://faq.nttpc.co.jp/faq/show/13352?site_domain=suitex)そうです😕\nネームサーバの変更が完了していないと以降のコマンドを打ってもタイムアウトしますので、ここはグッとこらえて時が経つのを待ちます...\n\n`dig`コマンドを使うと、ドメイン名に対応するネームサーバを確認することができるので、時間を開けて見てみてください\n\n```shell_session:ターミナル\n# ネームサーバの確認用コマンド\n$ dig example-domain.com ns\n\n;; ANSWER SECTION:\nxxxxxxxxx.com.          172756  IN      NS      ns-xxxx.awsdns-xx.net.\nxxxxxxxxx.com.          172756  IN      NS      ns-xxxx.awsdns-xx.org.\nxxxxxxxxx.com.          172756  IN      NS      ns-xxxx.awsdns-xx.co.uk.\nxxxxxxxxx.com.          172756  IN      NS      ns-xxxx.awsdns-xx.com.\n\n# ↑で返却される内容が、 name_servers で表示されたネームサーバに問い合わせた時と同じだったら準備完了\n$ dig example-domain.com @ns-xxxx.awsdns-xx.org ns\n```\n\nいずれにせよすぐには終わらないので、もういくつか先に済ませておいた方がいい内容をやっておきます\n\nSlack APIから取得したトークンとチャンネルIDをSecrets Managerに登録します\n\n```shell_session:ターミナル\n$ terraform plan -target=aws_secretsmanager_secret_version.slack_api\n$ terraform apply -target=aws_secretsmanager_secret_version.slack_api\n```\n\napplyが完了したらAWSコンソールを開いて、それぞれのシークレットの値を編集してください\n本来、Terraformで作ったリソースに手で変更を加えると差分検知されるような仕組みになっているのですが、\nこのシークレットの値については差分検知の確認対象外にしています\n\n![Secrets Manager 2019-07-08 22-47-30(1).png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/0f7e6687-9b73-1f13-64a3-fd9d4d8dfbc0.png)\n\nそうこうしているうちにDNSの浸透が済んだら、あとは一気に作成できます✌️\n\n`-target`の指定を外すと全てのリソースを作成できるので、一思いにやってしまいましょう\nCloudFrontなど作成に時間のかかるリソースも色々あるので、1時間ほどは見ていただいた方がいいようです\n\n```shell_session:ターミナル\n# 残りのリソースを適用\n$ terraform plan\n$ terraform apply\n```\n\n...無事に正常終了しましたでしょうか？\n\nもしもうまくいったようであれば、しばし待ったのちご自身の`https://example-domain.com/`にアクセスすると、以下のようなページが表示されるはずです\n(なお、htmlは[Paper Kit 2](https://demos.creative-tim.com/paper-kit-2/index.html)を切り貼りしてでっち上げたものです)\n\n![LP](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/efcb4020-637b-b0b7-4d9c-d129cb635486.png)\n\nおもむろにボタンも押してみましょう...！\n\n![Slack](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/49e67f8e-8212-5d3d-0a1d-e4d52953f30f.png)\n\nこれにてガンガン仕事を受けられますね！！！🍾🎂🎉\n\n## トラブルシューティング(構築)\n\n私が引っかかったものを晒しておきます\n以下以外のものが出てきた場合は、コメントで教えて頂けたら補記したいと思います\n（こうすれば解決できた...というところまでやっていただけるとありがたいです）\n\n```shell_session:その1\n# CloudFrontでエラーの場合は、AWSコンソールを確認し、ステータスが Deployed になるまで待つ\nError: error waiting until CloudFront Distribution (xxxxx) is deployed: timeout while waiting for state to become 'Deployed' (last state: 'InProgress', timeout: 1h10m0s)\n\n# Deployed になった後、 untaintの実行\n$ terraform untaint aws_cloudfront_distribution.domain_name\nResource instance aws_cloudfront_distribution.domain_name has been successfully untainted.\n\n# 残りのリソースを適用\n$ terraform apply\n```\n\n```shell_session:その2\n# ACMで発行できる証明書の数は1年間で上限があり、作成・削除を繰り返す等して最大値を越えるとエラーとなってしまう\nError: Error requesting certificate: LimitExceededException: Error: you have reached your limit of 10 certificates in the last year.\n\n# サポートに投げると上限緩和してもらえる\n# https://docs.aws.amazon.com/ja_jp/acm/latest/userguide/acm-limits.html#limit-certs-yearly\n```\n\n# 削除方法\n\n作るのに引き換え削除は楽チンです。`terraform destroy`で削除できます\n\nただし何も指定しないと本当に全部消えます👋\nplanをよく確認したり、`target=xxxxx`で部分的に消していくなど、慎重に作業した方がよいでしょう\n\n```shell_session:コンソール\n$ terraform plan --destory\n$ terraform destroy\n```\n\n## トラブルシューティング(削除)\n\n作るときと同様、引っかかったものを書いておきます\n\n```shell_session:その1\n# 以下エラーの場合は、AWSのコンソールなどから対象のバケットの中身を空にする\nError: error deleting S3 Bucket (xxxxx): BucketNotEmpty: The bucket you tried to delete is not empty\n```\n\n# 所感\n\n環境構築を手作業で行なっていると、いつも「これで確認すべき項目は十分だろうか...？」とか「設定値正しく設定できてるかな...？」とか、\nよしんば動いたとしても「本当にあれでよかったんだろうか...🤢」という気持ちが付きまとっていた（しかも時間が経つと全部忘れる）のですが、\nインフラをコードに落とし込めると、アプリケーションエンジニアにとってもグッと距離感が近づいたような気がしました\n特に、**リソース間の依存関係を理解する**という意味では、GUIよりもコードの方が優れているように感じました\n\nまた、個人開発だと、寝る前のちょっとした時間で開発したり、前回の作業から間が空いてしまったり...ということもよくあると思いますが、\nどこまで何を作ったか、tfファイルやtfstateファイルにしっかり残るので、**安心してやったことを忘れることができる**というのが地味にありがたかったです😋\n\n今回の記事では、作成したtfファイルについてはほとんど触れませんでしたが、\n各ファイルの設定値とAWSコンソールの状態を比較したり、内容を追加・削除してみたりと、ぜひ各自で色々試して頂くことをお勧めします！\n（よくないところがあったら、プルリクやコメントで指摘頂ければ幸いです）\n\n自分が書いたtfファイルで次々にインフラが組み上がっていく様を見ていると、\nそれこそ[創造主になったような気持ち🌏](https://ja.wikipedia.org/wiki/%E3%83%86%E3%83%A9%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9F%E3%83%B3%E3%82%B0)になれますよ！\n\n# 参考資料\n\nオススメ情報のリンクを貼っておきます📚\n\n- [VSCodeでTerraformを書くときの設定](https://qiita.com/pypypyo14/items/5520f3defa55119f3a1a)\n    - 私はVSCodeで開発していますが、Intellijなんかもいい感じに使えるらしいです\n- [【ダウンロード版】Pragmatic Terraform on AWS](https://booth.pm/ja/items/1318735)\n    - ともあれこちらを読むことをお勧めします\n    - 今回使わなかったサービス含め、様々なリソースの作り方について具体的に書いてあります\n- [Terraformの公式ドキュメント](https://www.terraform.io/docs/providers/aws/)\n    - 設定値など分からないことがあったら、`resource \"aws_xxxxx\"`などのリソース名で検索して↑のサイトを見れば基本全部書いてあります\n- [Terraform職人入門: 日々の運用で学んだ知見を淡々とまとめる](https://qiita.com/minamijoyo/items/1f57c62bed781ab8f4d7)\n    - tips集です。記法や考え方が頭に馴染んできたら読むのをお勧めします\n",
      "coediting": false,
      "comments_count": 0,
      "created_at": "2019-07-15T19:04:14+09:00",
      "group": null,
      "id": "bc26c38baea56f244c19",
      "likes_count": 5,
      "private": false,
      "reactions_count": 0,
      "stocks_count": 4,
      "tags": [
        {
          "name": "AWS",
          "versions": []
        },
        {
          "name": "Terraform",
          "versions": []
        }
      ],
      "title": "LP公開のためのインフラをTerraform + AWSでささっと？構築する（ソース付き）",
      "updated_at": "2019-07-15T19:04:14+09:00",
      "url": "https://qiita.com/yktakaha4/items/bc26c38baea56f244c19",
      "user": {
        "description": "",
        "facebook_id": "",
        "followees_count": 26,
        "followers_count": 23,
        "github_login_name": "yktakaha4",
        "id": "yktakaha4",
        "items_count": 27,
        "linkedin_id": "",
        "location": "",
        "name": "Yuuki Takahashi",
        "organization": "LAPRAS株式会社",
        "permanent_id": 106259,
        "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/profile-images/1600489516",
        "team_only": false,
        "twitter_screen_name": "yktakaha4",
        "website_url": "https://yktakaha4.github.io/"
      },
      "page_views_count": null,
      "team_membership": null,
      "organization_url_name": null,
      "slide": false
    },
    {
      "rendered_body": "\n<h1>\n<span id=\"経緯\" class=\"fragment\"></span><a href=\"#%E7%B5%8C%E7%B7%AF\"><i class=\"fa fa-link\"></i></a>経緯</h1>\n\n<p>普段は<a href=\"https://github.com/tekezo/Karabiner-Elements\" rel=\"nofollow noopener\" target=\"_blank\">Karabiner-Elements</a>を使って、右⌘キーを使ってかな英数をトグル切り返しているのですが、<br>\n先日<a href=\"https://www.parallels.com/jp/products/desktop/\" rel=\"nofollow noopener\" target=\"_blank\">Parallels Desktop</a>を購入し、Windows8.1をMacbookのUSキーボードから使うようになり、同じ操作感でIME切り替えを行いたかったため、調べてみました</p>\n\n<h1>\n<span id=\"環境\" class=\"fragment\"></span><a href=\"#%E7%92%B0%E5%A2%83\"><i class=\"fa fa-link\"></i></a>環境</h1>\n\n<p>どのくらい細かく書いたらいいのかわかりませんが...</p>\n\n<ul>\n<li>Macbook Pro(13-inch, 2017)\n\n<ul>\n<li>USキー配列です</li>\n</ul>\n</li>\n<li>Windows 8.1\n\n<ul>\n<li>デバイス マネージャーにて、キーボードのドライバを <code>標準 PS/2 101/102 キーボード</code> に設定</li>\n</ul>\n</li>\n<li>Parallels Desktop 14\n\n<ul>\n<li>こちらはたぶんVirtualBoxなどでも変わらないものと思います</li>\n</ul>\n</li>\n</ul>\n\n<h1>\n<span id=\"手順\" class=\"fragment\"></span><a href=\"#%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>手順</h1>\n\n<p>まず、以下サイトにて、右⌘を押したときにどの仮想キーが押されているかと、<br>\n変換時にどの仮想キーに紐づければよいかを確認します</p>\n\n<p><qiita-embed-ogp src=\"https://keycode.info/\"></qiita-embed-ogp></p>\n\n<p><a href=\"https://camo.qiitausercontent.com/8eeea912f8f5a3a5f0e7bbf9d0ddaaa5ce5d4ac7/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3130363235392f66356537333533622d303965652d343639332d333838302d6634353861633461376337362e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2Ff5e7353b-09ee-4693-3880-f458ac4a7c76.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=4a35d597ca2903f78bf3801e908d5ba0\" alt=\"keycode.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/f5e7353b-09ee-4693-3880-f458ac4a7c76.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2Ff5e7353b-09ee-4693-3880-f458ac4a7c76.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=1ac708c4275770ae5fcb449a185b009d 1x\" loading=\"lazy\"></a></p>\n\n<p><a href=\"https://qiita.com/moutend/items/07a7bd19783234bd4159\">こちらの記事</a>でも言及されている通り、<code>Alt + `</code>を押すとかなと英数がトグルされるということなので、<br>\nページ上でキーを押下してみると、25というキーコードが出てきました<br>\n同様に右⌘キーを押してみると、235というキーコードでしたので、あわせて覚えておきます</p>\n\n<p>キーコード235を25に変換するにあたっては、AutoHotKeyというソフトを使います<br>\n以下サイトからダウンロード・インストールし、任意のテキストエディタで変換定義のスクリプトを作成します</p>\n\n<p><qiita-embed-ogp src=\"https://www.autohotkey.com/\"></qiita-embed-ogp></p>\n\n<p><code>vkXX</code>の形で、先ほど調べたキーコードを16進数にし、<code>変換元::変換先</code>の書式で記述すると、変換が行われるとのことです<br>\n1行目はおまじない、行頭セミコロンはコメントだそうです。<a href=\"http://ahkwiki.net/KeyList\" rel=\"nofollow noopener\" target=\"_blank\">調べると色々でてきます</a>ので興味ある方はぜひ</p>\n\n<p>あと、私固有の問題か分かってないのですが、使っている途中で変換が行われなくなる時があり、<br>\n調べてみると右⌘押下時にFF(255)が送信されている場合もあったので、書き足しています<br>\nキーコードの解説は、<a href=\"http://kts.sakaiweb.com/virtualkeycodes.html\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a>など見ると分かりやすいです</p>\n\n<div class=\"code-frame\" data-lang=\"autohotkey\">\n<div class=\"code-lang\"><span class=\"bold\">us-kana.ahk</span></div>\n<div class=\"highlight\"><pre><code>#UseHook\n\n;VK_OEM_PA1 -&gt; VK_KANJI\nvkEB::vk19\nvkFF::vk19\n</code></pre></div>\n</div>\n\n<p>上記スクリプトを任意のディレクトリに保存し、ダブルクリックするとAutoHotKeyに読み込まれ、変換が行われるようになります</p>\n\n<p>挙動に問題がなさそうであれば、作成したスクリプトにて右クリック -&gt; Compile Scriptでexeファイルを作成します<br>\n上記ファイルをスタートアップに登録しておけばWindows起動時に設定されます</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/d10c4c4f9ddda11f19f7226f4699a7870941c8c6/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3130363235392f63326532613438642d383665662d663662632d393538372d3132306233616335363266642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2Fc2e2a48d-86ef-f6bc-9587-120b3ac562fd.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=6bf71bb5620854bde0eafc9ed1c64dc8\" alt=\"スクリーンショット 2019-05-26 16.23.59.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/c2e2a48d-86ef-f6bc-9587-120b3ac562fd.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F106259%2Fc2e2a48d-86ef-f6bc-9587-120b3ac562fd.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=fc8e1aaf98ca1be1ed7281467702ea55 1x\" loading=\"lazy\"></a></p>\n\n<p>なお、Windows8.1では、スタートアップディレクトリは <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code> になります<br>\nProgramDataは隠しディレクトリなので注意です</p>\n\n<h1>\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n\n<p>簡単ですね！<br>\nネット調べると、同じようなことを違うソフトや手順でやろうとしている記事は結構出てくるのですが、<br>\nどれもいまひとつうまくいかず、結構遠回りをしてしまいましたが...</p>\n",
      "body": "# 経緯\n\n普段は[Karabiner-Elements](https://github.com/tekezo/Karabiner-Elements)を使って、右⌘キーを使ってかな英数をトグル切り返しているのですが、\n先日[Parallels Desktop](https://www.parallels.com/jp/products/desktop/)を購入し、Windows8.1をMacbookのUSキーボードから使うようになり、同じ操作感でIME切り替えを行いたかったため、調べてみました\n\n# 環境\n\nどのくらい細かく書いたらいいのかわかりませんが...\n\n- Macbook Pro(13-inch, 2017)\n    - USキー配列です\n- Windows 8.1\n    - デバイス マネージャーにて、キーボードのドライバを `標準 PS/2 101/102 キーボード` に設定\n- Parallels Desktop 14\n    - こちらはたぶんVirtualBoxなどでも変わらないものと思います\n\n# 手順\n\nまず、以下サイトにて、右⌘を押したときにどの仮想キーが押されているかと、\n変換時にどの仮想キーに紐づければよいかを確認します\n\nhttps://keycode.info/\n\n![keycode.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/f5e7353b-09ee-4693-3880-f458ac4a7c76.png)\n\n[こちらの記事](https://qiita.com/moutend/items/07a7bd19783234bd4159)でも言及されている通り、`` Alt + ` ``を押すとかなと英数がトグルされるということなので、\nページ上でキーを押下してみると、25というキーコードが出てきました\n同様に右⌘キーを押してみると、235というキーコードでしたので、あわせて覚えておきます\n\nキーコード235を25に変換するにあたっては、AutoHotKeyというソフトを使います\n以下サイトからダウンロード・インストールし、任意のテキストエディタで変換定義のスクリプトを作成します\n\nhttps://www.autohotkey.com/\n\n`vkXX`の形で、先ほど調べたキーコードを16進数にし、`変換元::変換先`の書式で記述すると、変換が行われるとのことです\n1行目はおまじない、行頭セミコロンはコメントだそうです。[調べると色々でてきます](http://ahkwiki.net/KeyList)ので興味ある方はぜひ\n\nあと、私固有の問題か分かってないのですが、使っている途中で変換が行われなくなる時があり、\n調べてみると右⌘押下時にFF(255)が送信されている場合もあったので、書き足しています\nキーコードの解説は、[こちら](http://kts.sakaiweb.com/virtualkeycodes.html)など見ると分かりやすいです\n\n```us-kana.ahk\n#UseHook\n\n;VK_OEM_PA1 -> VK_KANJI\nvkEB::vk19\nvkFF::vk19\n```\n\n上記スクリプトを任意のディレクトリに保存し、ダブルクリックするとAutoHotKeyに読み込まれ、変換が行われるようになります\n\n挙動に問題がなさそうであれば、作成したスクリプトにて右クリック -> Compile Scriptでexeファイルを作成します\n上記ファイルをスタートアップに登録しておけばWindows起動時に設定されます\n\n![スクリーンショット 2019-05-26 16.23.59.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/c2e2a48d-86ef-f6bc-9587-120b3ac562fd.png)\n\nなお、Windows8.1では、スタートアップディレクトリは `C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp` になります\nProgramDataは隠しディレクトリなので注意です\n\n# おわりに\n\n簡単ですね！\nネット調べると、同じようなことを違うソフトや手順でやろうとしている記事は結構出てくるのですが、\nどれもいまひとつうまくいかず、結構遠回りをしてしまいましたが...\n",
      "coediting": false,
      "comments_count": 0,
      "created_at": "2019-05-26T16:20:47+09:00",
      "group": null,
      "id": "8f320bf69c76090e93e7",
      "likes_count": 0,
      "private": false,
      "reactions_count": 0,
      "stocks_count": 2,
      "tags": [
        {
          "name": "Windows",
          "versions": []
        },
        {
          "name": "AutoHotkey",
          "versions": []
        },
        {
          "name": "MacBook",
          "versions": []
        },
        {
          "name": "USキーボード",
          "versions": []
        }
      ],
      "title": "USキーのMacbook上で動作するWindowsにて、右⌘でかな英数を切り替える",
      "updated_at": "2019-05-26T16:28:34+09:00",
      "url": "https://qiita.com/yktakaha4/items/8f320bf69c76090e93e7",
      "user": {
        "description": "",
        "facebook_id": "",
        "followees_count": 26,
        "followers_count": 23,
        "github_login_name": "yktakaha4",
        "id": "yktakaha4",
        "items_count": 27,
        "linkedin_id": "",
        "location": "",
        "name": "Yuuki Takahashi",
        "organization": "LAPRAS株式会社",
        "permanent_id": 106259,
        "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/profile-images/1600489516",
        "team_only": false,
        "twitter_screen_name": "yktakaha4",
        "website_url": "https://yktakaha4.github.io/"
      },
      "page_views_count": null,
      "team_membership": null,
      "organization_url_name": null,
      "slide": false
    },
    {
      "rendered_body": "\n<h1>\n<span id=\"経緯\" class=\"fragment\"></span><a href=\"#%E7%B5%8C%E7%B7%AF\"><i class=\"fa fa-link\"></i></a>経緯</h1>\n\n<p>むかーしに個人的に耳コピして作ったゲーム音楽などのMIDIファイルを、久々にMacで再生したくなったためになります👾</p>\n\n<p><a href=\"https://itunes.apple.com/jp/app/midiplayer-x/id954177929\" rel=\"nofollow noopener\" target=\"_blank\">GUIのアプリ</a>もあるようですが、有料だったので無料でできる方法を調べてみました</p>\n\n<h1>\n<span id=\"方法\" class=\"fragment\"></span><a href=\"#%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>方法</h1>\n\n<p><a href=\"https://ja.wikipedia.org/wiki/SoundFont\" rel=\"nofollow noopener\" target=\"_blank\">サウンドフォント</a>を扱えるOSSのシンセサイザーである<a href=\"https://ja.wikipedia.org/wiki/FluidSynth\" rel=\"nofollow noopener\" target=\"_blank\">FluidSynth</a>を使います</p>\n\n<p>サウンドフォントはネットを漁ると<del>怪しげなものが</del>いろいろ出てきますが、例えば以下などならライセンスも明示されており良さそうです(内容はご自身でご確認ください...)</p>\n\n<p><qiita-embed-ogp src=\"http://www.schristiancollins.com/generaluser.php\"></qiita-embed-ogp></p>\n\n<p><qiita-embed-ogp src=\"http://zandro.freeunixhost.com/opl3/\"></qiita-embed-ogp></p>\n\n<h1>\n<span id=\"手順\" class=\"fragment\"></span><a href=\"#%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>手順</h1>\n\n<p>事前に<a href=\"https://qiita.com/pypypyo14/items/4bf3b8bd511b6e93c9f9\" id=\"reference-6806d5092bc9b11edb66\">Homebrew</a>を使えるようにしておきましょう</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code># fluidsynthコマンドを使えるようにする\n~❯ brew install fluid-synth --with-libsndfile\n\n# サウンドフォントのダウンロード\n~❯ wget 'https://www.dropbox.com/s/4x27l49kxcwamp5/GeneralUser_GS_1.471.zip'\n~❯ unzip GeneralUser_GS_1.471.zip\n</code></pre></div></div>\n\n<p>再生・停止と、WAVファイル出力は以下になります</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code># Ctrl + Cで停止\n~❯ fluidsynth -i \"GeneralUser GS 1.471/GeneralUser GS v1.471.sf2\" \"GeneralUser GS 1.471/demo MIDIs/All Night Long.mid\"\n\n# -Fオプションでファイル出力\n~❯ fluidsynth -F out.wav -i \"GeneralUser GS 1.471/GeneralUser GS v1.471.sf2\" \"GeneralUser GS 1.471/demo MIDIs/All Night Long.mid\"\n# -Tオプションで種類の指定も可(以下で一覧が出ます)\n~❯ fluidsynth -T help\n\n# .bashrcなどでaliasをつけると楽かも\nalias midigs=\"fluidsynth -i ~/path/to/sf2/GeneralUser\\ GS\\ v1.471.sf2\"\n</code></pre></div></div>\n\n<p>よきMIDIライフを！</p>\n",
      "body": "# 経緯\n\nむかーしに個人的に耳コピして作ったゲーム音楽などのMIDIファイルを、久々にMacで再生したくなったためになります👾\n\n[GUIのアプリ](https://itunes.apple.com/jp/app/midiplayer-x/id954177929)もあるようですが、有料だったので無料でできる方法を調べてみました\n\n# 方法\n\n[サウンドフォント](https://ja.wikipedia.org/wiki/SoundFont)を扱えるOSSのシンセサイザーである[FluidSynth](https://ja.wikipedia.org/wiki/FluidSynth)を使います\n\nサウンドフォントはネットを漁ると~~怪しげなものが~~いろいろ出てきますが、例えば以下などならライセンスも明示されており良さそうです(内容はご自身でご確認ください...)\n\nhttp://www.schristiancollins.com/generaluser.php\n\nhttp://zandro.freeunixhost.com/opl3/\n\n# 手順\n\n事前に[Homebrew](https://qiita.com/pypypyo14/items/4bf3b8bd511b6e93c9f9)を使えるようにしておきましょう\n\n```\n# fluidsynthコマンドを使えるようにする\n~❯ brew install fluid-synth --with-libsndfile\n\n# サウンドフォントのダウンロード\n~❯ wget 'https://www.dropbox.com/s/4x27l49kxcwamp5/GeneralUser_GS_1.471.zip'\n~❯ unzip GeneralUser_GS_1.471.zip\n```\n\n再生・停止と、WAVファイル出力は以下になります\n\n```\n# Ctrl + Cで停止\n~❯ fluidsynth -i \"GeneralUser GS 1.471/GeneralUser GS v1.471.sf2\" \"GeneralUser GS 1.471/demo MIDIs/All Night Long.mid\"\n\n# -Fオプションでファイル出力\n~❯ fluidsynth -F out.wav -i \"GeneralUser GS 1.471/GeneralUser GS v1.471.sf2\" \"GeneralUser GS 1.471/demo MIDIs/All Night Long.mid\"\n# -Tオプションで種類の指定も可(以下で一覧が出ます)\n~❯ fluidsynth -T help\n\n# .bashrcなどでaliasをつけると楽かも\nalias midigs=\"fluidsynth -i ~/path/to/sf2/GeneralUser\\ GS\\ v1.471.sf2\"\n```\n\nよきMIDIライフを！\n",
      "coediting": false,
      "comments_count": 0,
      "created_at": "2019-01-06T01:37:29+09:00",
      "group": null,
      "id": "009306108b9c9fe06a37",
      "likes_count": 4,
      "private": false,
      "reactions_count": 0,
      "stocks_count": 6,
      "tags": [
        {
          "name": "MacOSX",
          "versions": []
        },
        {
          "name": "MIDI",
          "versions": []
        }
      ],
      "title": "MacでMIDIファイルを再生&WAV出力する",
      "updated_at": "2019-01-06T01:37:29+09:00",
      "url": "https://qiita.com/yktakaha4/items/009306108b9c9fe06a37",
      "user": {
        "description": "",
        "facebook_id": "",
        "followees_count": 26,
        "followers_count": 23,
        "github_login_name": "yktakaha4",
        "id": "yktakaha4",
        "items_count": 27,
        "linkedin_id": "",
        "location": "",
        "name": "Yuuki Takahashi",
        "organization": "LAPRAS株式会社",
        "permanent_id": 106259,
        "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/profile-images/1600489516",
        "team_only": false,
        "twitter_screen_name": "yktakaha4",
        "website_url": "https://yktakaha4.github.io/"
      },
      "page_views_count": null,
      "team_membership": null,
      "organization_url_name": null,
      "slide": false
    },
    {
      "rendered_body": "\n<h1>\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n\n<p><a href=\"https://camo.qiitausercontent.com/d851e312e05eef64b4477ea0cc5c21f0255e5162/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130363235392f39623163613165652d646138372d616136642d633764622d3832623561323633396666642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F9b1ca1ee-da87-aa6d-c7db-82b5a2639ffd.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=e3a7b387482e7dc55c1eb91d1c267959\" alt=\"おたのしみスロット\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/9b1ca1ee-da87-aa6d-c7db-82b5a2639ffd.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F9b1ca1ee-da87-aa6d-c7db-82b5a2639ffd.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=dc9d877271fdbeb75360ae92923ae43b 1x\" loading=\"lazy\"></a></p>\n\n<p>友人👰がこの度めでたく結婚することとなり、友人・知人向けにパーティが開かれたのですが、その式の余興のひとつとしてルーレットゲームの制作を依頼され、開発と本番運用（言い方）を担当しました</p>\n\n<p>他人と仕様を詰めて個人開発したWebアプリとしては初めてのものになるので、色々至ってない部分も多いですが、そうした諸々の備忘も兼ねて書き残したいと思います🎰</p>\n\n<h1>\n<span id=\"受注\" class=\"fragment\"></span><a href=\"#%E5%8F%97%E6%B3%A8\"><i class=\"fa fa-link\"></i></a>受注</h1>\n\n<p>今年の梅雨の頃に結婚することを呑みの席で切り出された時、私はちょうど退職に向けて準備を進めていたところで、夏の間に数ヶ月の休みを取るつもりでいました</p>\n\n<p>その間を無為に過ごすことを味気なく思い、「しばらく暇だしなんなら余興でも作ったげるよ😎」と軽い気持ちで言いおいてその場は終わったのですが、後日連絡をもらい、冬に開かれるパーティに向けてルーレットのゲームを作ってほしい、と改めて依頼を受けました</p>\n\n<p>前職ではWebアプリを作っていたことと、当日まで半年近く期間があったため、まあなんとかなるだろうと軽い気持ちで承諾し、プロジェクトがスタートしました</p>\n\n<h1>\n<span id=\"要件定義\" class=\"fragment\"></span><a href=\"#%E8%A6%81%E4%BB%B6%E5%AE%9A%E7%BE%A9\"><i class=\"fa fa-link\"></i></a>要件定義</h1>\n\n<p>ファミレスで2時間ほど彼女と話したところ、おおよそ以下のようなことを言われました</p>\n\n<ul>\n<li>ウェディングパーティに来てくれた人に、ルーレットゲームで景品をプレゼントしたい\n\n<ul>\n<li>色々なグループ（地元の友達、会社の同僚、社会人サークルの方々...など）から、あわせて70~80人くらいの人を招待するつもり</li>\n</ul>\n</li>\n<li>景品には当たり（布団乾燥機とか...）とハズレ（愛用のつけまつげとか...）をそれぞれいくつか用意する</li>\n<li>招待状（<a href=\"https://biluce.net/\" rel=\"nofollow noopener\" target=\"_blank\">Biluce</a>というWebサービスを使ってました）の返信をもらう際に参加者に画像を添付してもらい、ルーレットで使いたい</li>\n<li>景品も画像で用意したい</li>\n<li>当日のルーレット操作は私（筆者）にやってほしい</li>\n<li>当日ドタキャンや人数増加などが発生する可能性があるので、参加者の増減はゲーム直前まで柔軟に対応できるようにしてほしい</li>\n</ul>\n\n<p>そんなところだろうという感じですが、面白かったのが以下でした</p>\n\n<ul>\n<li>ルーレットの出目を制御したい\n\n<ul>\n<li>ハズレの景品を社会人サークルの重鎮の方や大人しい友達に当てると気まずいので、ある景品を特定の所属の人や個人には当てないようにしたい</li>\n<li>グループごとに参加人数に差があるが、景品の当たる回数はグループ間でなるべく均一にしたい</li>\n</ul>\n</li>\n</ul>\n\n<p>要は、忖度したいということですね。気遣いのできる良妻となることでしょう（適当）</p>\n\n<h1>\n<span id=\"設計\" class=\"fragment\"></span><a href=\"#%E8%A8%AD%E8%A8%88\"><i class=\"fa fa-link\"></i></a>設計</h1>\n\n<p>家に帰って、早速アーキテクチャを考えました。事前に新婦に参加者および景品の登録や、アプリの動作確認をしてもらうことを考えると、Webアプリとして実装してクラウドサービスで公開するのがよさそうです⛅️</p>\n\n<p>また、データの参照、更新が複数人から頻繁に行われるようなものではないので、サーバサイドの実装はなるべく簡便に済ませて、デザインや挙動の調整に注力すべきでしょう</p>\n\n<p>...と、いうようなこと考えながら作り進めていったところ、最終的に以下のような感じになりました</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/3dc32bb9474d03c96604f57f00b41fed8a9669e7/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130363235392f33663736663061312d623533662d303835312d393837622d3962663839393066353931372e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"876\" alt=\"アーキテクチャ\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F3f76f0a1-b53f-0851-987b-9bf8990f5917.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=357c6d17b961637261ed2ea1bf691da8\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/3f76f0a1-b53f-0851-987b-9bf8990f5917.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F3f76f0a1-b53f-0851-987b-9bf8990f5917.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=a0f748dde0048b9e0b9ef22f192f53e3 1x\" loading=\"lazy\"></a></p>\n\n<p>段取りとしてはこんなところです</p>\n\n<ol>\n<li>新婦にて、スプレッドシートに参加者の名前と景品名、NGルールを入力する</li>\n<li>新婦にて、システムに参加者の画像をアップロードして登録する</li>\n<li>筆者にてパーティー当日に抽選をおこない、結果をもとにルーレット画面を表示する</li>\n<li>参加者は景品を手にして大喜び！🥳🎁</li>\n</ol>\n\n<h1>\n<span id=\"実装\" class=\"fragment\"></span><a href=\"#%E5%AE%9F%E8%A3%85\"><i class=\"fa fa-link\"></i></a>実装</h1>\n\n<p>設計と比較しながら、ひとつずつ書いていきます</p>\n\n<h2>\n<span id=\"google-spreadsheet\" class=\"fragment\"></span><a href=\"#google-spreadsheet\"><i class=\"fa fa-link\"></i></a>Google Spreadsheet</h2>\n\n<p>新婦とGoogleドライブを共有し、以下のようなスプレッドシートに値を入力してもらいます<br>\n画像ID（１箇所URLて書いてますが...）についてはあとで説明します</p>\n\n<p><strong>景品一覧シート</strong><br>\n<a href=\"https://camo.qiitausercontent.com/a674532c7e3218fcd9bfcfb8b7d2eff096350a8a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130363235392f31323864623936312d623736342d363032622d313035382d3830666462303132373431362e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F128db961-b764-602b-1058-80fdb0127416.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=b02de45646c85768a72472adad50d20d\" alt=\"景品一覧\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/128db961-b764-602b-1058-80fdb0127416.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F128db961-b764-602b-1058-80fdb0127416.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=12dc1d789f878af5536f1782e76cb064 1x\" loading=\"lazy\"></a></p>\n\n<p><strong>NGルール一覧シート</strong><br>\n<a href=\"https://camo.qiitausercontent.com/732e7a586b720158378f484099d8450503cea59f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130363235392f36623439646630302d316563372d323263342d623230622d6336353836383463636230662e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F6b49df00-1ec7-22c4-b20b-c658684ccb0f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=58707e8827da8ef959fb8536b686c0ed\" alt=\"NGルール一覧\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/6b49df00-1ec7-22c4-b20b-c658684ccb0f.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F6b49df00-1ec7-22c4-b20b-c658684ccb0f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=05ea8ca6acbd12a0688ab8344bb9525c 1x\" loading=\"lazy\"></a></p>\n\n<p><strong>人物一覧シート</strong><br>\n<a href=\"https://camo.qiitausercontent.com/9bda505d8c8e78e74272dc92a7f612b4ee12b712/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130363235392f39666136636439332d656465342d343965652d613937662d3237343964316534323535392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F9fa6cd93-ede4-49ee-a97f-2749d1e42559.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=7054d7aaa3b596bc1146a61865fc7bc0\" alt=\"人物一覧\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/9fa6cd93-ede4-49ee-a97f-2749d1e42559.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F9fa6cd93-ede4-49ee-a97f-2749d1e42559.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=3983547a0a6bd0d52e67cc43b3b3f100 1x\" loading=\"lazy\"></a></p>\n\n<p>上記シートに入力後、「抽選」ボタンを押すと、NGルールに基づいて抽選を行った結果を表示します（<a href=\"https://stepism.sakura.ne.jp/adiary/036\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a>のようにすると実装できます）</p>\n\n<p><strong>抽選シート</strong><br>\n<a href=\"https://camo.qiitausercontent.com/445277e8987b07a6c909cf0f2d19016098910791/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130363235392f63363830313761352d376335312d656537372d383766312d6163343136666132663337632e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2Fc68017a5-7c51-ee77-87f1-ac416fa2f37c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=beafc9d31f988dd7cb545f3dc63bd304\" alt=\"抽選\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/c68017a5-7c51-ee77-87f1-ac416fa2f37c.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2Fc68017a5-7c51-ee77-87f1-ac416fa2f37c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=4708993dbd4fd69c8b686fbbbf720e0d 1x\" loading=\"lazy\"></a></p>\n\n<h2>\n<span id=\"google-active-script\" class=\"fragment\"></span><a href=\"#google-active-script\"><i class=\"fa fa-link\"></i></a>Google Active Script</h2>\n\n<p>「表示します」としれっと書きましたが、こちらはGASにより実現します<br>\nNGルールシートを参照しつつ抽選をおこなうdrawLots()と、抽選結果を各種一覧データと併せてJSON形式で返却するdoPost()を実装します</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">doPost()</span></div>\n<div class=\"highlight\"><pre><code><span class=\"kd\">function</span> <span class=\"nx\">doPost</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">response</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">error</span><span class=\"dl\">\"</span> <span class=\"p\">};</span>\n\n  <span class=\"k\">try</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">token</span> <span class=\"o\">=</span> <span class=\"nx\">SpreadsheetApp</span><span class=\"p\">.</span><span class=\"nx\">getActive</span><span class=\"p\">().</span><span class=\"nx\">getSheetByName</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">抽選</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">getRange</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">B1</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">getValue</span><span class=\"p\">();</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">s3_credential</span> <span class=\"o\">=</span> <span class=\"nx\">SpreadsheetApp</span><span class=\"p\">.</span><span class=\"nx\">getActive</span><span class=\"p\">().</span><span class=\"nx\">getSheetByName</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">抽選</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">getRange</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">C1</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">getValue</span><span class=\"p\">();</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">s3_bucket</span> <span class=\"o\">=</span> <span class=\"nx\">SpreadsheetApp</span><span class=\"p\">.</span><span class=\"nx\">getActive</span><span class=\"p\">().</span><span class=\"nx\">getSheetByName</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">抽選</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">getRange</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">D1</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">getValue</span><span class=\"p\">();</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">url_prefix</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">https://s3.amazonaws.com/</span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"nx\">s3_bucket</span> <span class=\"o\">+</span> <span class=\"dl\">\"</span><span class=\"s2\">/</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">parameter</span><span class=\"p\">.</span><span class=\"nx\">token</span> <span class=\"o\">==</span> <span class=\"nx\">token</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"nx\">response</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"na\">ok</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">ok</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n        <span class=\"na\">persons</span><span class=\"p\">:</span> <span class=\"nx\">getPersons</span><span class=\"p\">(</span><span class=\"nx\">url_prefix</span><span class=\"p\">),</span>\n        <span class=\"na\">gifts</span><span class=\"p\">:</span> <span class=\"nx\">getGifts</span><span class=\"p\">(</span><span class=\"nx\">url_prefix</span><span class=\"p\">),</span>\n        <span class=\"na\">lots</span><span class=\"p\">:</span> <span class=\"nx\">getLots</span><span class=\"p\">(),</span>\n        <span class=\"na\">s3_credential</span><span class=\"p\">:</span> <span class=\"nx\">s3_credential</span><span class=\"p\">,</span>\n        <span class=\"na\">s3_bucket</span><span class=\"p\">:</span> <span class=\"nx\">s3_bucket</span>\n      <span class=\"p\">};</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span> <span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">return</span> <span class=\"nx\">ContentService</span>\n    <span class=\"p\">.</span><span class=\"nx\">createTextOutput</span><span class=\"p\">(</span><span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">(</span><span class=\"nx\">response</span><span class=\"p\">))</span>\n    <span class=\"p\">.</span><span class=\"nx\">setMimeType</span><span class=\"p\">(</span><span class=\"nx\">ContentService</span><span class=\"p\">.</span><span class=\"nx\">MimeType</span><span class=\"p\">.</span><span class=\"nx\">JSON</span><span class=\"p\">);</span> \n<span class=\"p\">}</span>\n</code></pre></div>\n</div>\n\n<p>真面目に書くには貧弱なバージョンのJavaScript&amp;エディタを差し引いても、スプレッドシートのデータ構造とREST APIを手軽に扱えるというGASは相当メリットがあると思います<br>\nAPIもどことなく馴染みのあるIFですし... <del>やっててよかったVBA</del></p>\n\n<p>あとこれは開発してから知ったのですが、<a href=\"https://qiita.com/rf_p/items/7492375ddd684ba734f8\" id=\"reference-33a8ad49767fa43c966d\">GASをGit管理できたり</a>、<a href=\"https://tech.actindi.net/2018/09/10/083314\" rel=\"nofollow noopener\" target=\"_blank\">TypeScriptでコードが書けたり</a>など、環境がだいぶ整ってきているようですので、機会を見つけて触ってみたいと思います</p>\n\n<p>ただ、相当だらだらやっていたため、この段階であてにしていた休みを使い切ってしまい、以降は働きつつ暇を見つけて作ることになってしまいました...</p>\n\n<h2>\n<span id=\"aws-s3--cognito\" class=\"fragment\"></span><a href=\"#aws-s3--cognito\"><i class=\"fa fa-link\"></i></a>AWS S3 / Cognito</h2>\n\n<p>サーバーサイドはGoogleドライブ&amp;GASでまかなえましたが、<br>\nスロット画面および画像、音声ファイルのWeb公開と、画像アップロード機能について、どのように実現するか考える必要があります</p>\n\n<p><a href=\"https://www.hands-lab.com/\" rel=\"nofollow noopener\" target=\"_blank\">転職先</a>でAWSを使う中で、 S3でファイルを外部公開する<a href=\"https://qiita.com/gcsungwoo/items/2e49c3008a04e48581ed\" id=\"reference-ae3aadf2fa43a83b1310\">静的ウェブサイトホスティング</a>を知り、ファイルサイズ的に利用料もかからず良さそうだったので使うことにしました</p>\n\n<p>ファイルアップロード機能は、<a href=\"https://www.selfree.co.jp/2015/06/18/%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%83%AC%E3%82%B9%E3%81%A7javascript-%E3%81%A0%E3%81%91%E3%81%A7%E7%94%BB%E5%83%8F%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E3%82%A2%E3%83%83%E3%83%97%E3%83%AD%E3%83%BC%E3%83%89%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95\" rel=\"nofollow noopener\" target=\"_blank\">こちらの記事</a>を参考に、Cognitoで静的ホスティングを行っているバケットへのアップロード権限を確認するように実装しました<br>\n利用の際にエンドポイントや接続に必要な情報が必要になりますが、HTMLには埋め込まず、GASのAPIから返却するようにしています</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">接続情報の生成</span></div>\n<div class=\"highlight\"><pre><code><span class=\"nx\">sontaku</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">s3client</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nx\">AWS</span><span class=\"p\">.</span><span class=\"nx\">config</span><span class=\"p\">.</span><span class=\"nx\">region</span> <span class=\"o\">=</span> <span class=\"nx\">sontaku</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">s3_credential</span><span class=\"p\">.</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">:</span><span class=\"dl\">\"</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n  <span class=\"nx\">AWS</span><span class=\"p\">.</span><span class=\"nx\">config</span><span class=\"p\">.</span><span class=\"nx\">credentials</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">AWS</span><span class=\"p\">.</span><span class=\"nx\">CognitoIdentityCredentials</span><span class=\"p\">({</span>\n    <span class=\"na\">IdentityPoolId</span><span class=\"p\">:</span> <span class=\"nx\">sontaku</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">s3_credential</span>\n  <span class=\"p\">});</span>\n  <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nx\">AWS</span><span class=\"p\">.</span><span class=\"nx\">S3</span><span class=\"p\">({</span>\n    <span class=\"na\">params</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"na\">Bucket</span><span class=\"p\">:</span> <span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">s3_bucket</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">};</span>\n</code></pre></div>\n</div>\n\n<h1>\n<span id=\"スロット操作画像アップロード画面\" class=\"fragment\"></span><a href=\"#%E3%82%B9%E3%83%AD%E3%83%83%E3%83%88%E6%93%8D%E4%BD%9C%E7%94%BB%E5%83%8F%E3%82%A2%E3%83%83%E3%83%97%E3%83%AD%E3%83%BC%E3%83%89%E7%94%BB%E9%9D%A2\"><i class=\"fa fa-link\"></i></a>スロット操作/画像アップロード画面</h1>\n\n<p>サーバサイドとインフラは大体定まったので、肝心のスロット画面周りを作っていきます<br>\n先ほど図で示したように、スロットはパーティ会場のプロジェクタに全画面表示する必要がありますが、それだけだとスタート/ストップの指示を出すのが難しいため、<br>\nスロット操作画面を作って、そこからスロット画面の挙動を制御します</p>\n\n<p>メッセージを送る方法は、当初はWebSocketにしたら現地にいなくても遠隔操作できるんじゃ...とか色々考えましたが、最終的にコンソール画面からスロット画面を起動し、windowオブジェクトを直接いじることにしました<br>\nダサいですが、手間もかからず確実性の高いやり方だと思ってます</p>\n\n<p>S3にホスティングされたスロット操作画面からGASのREST APIにアクセスして、抽選結果や参加者一覧、景品一覧の入ったJSONを取得します<br>\nこちらの画面の「起動」、「準備」、「スタート」といった各ボタンを押すことで、この後説明するスロット画面の表示状態を制御します</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/1f5009e26dd2b1b68dc91d0573b7fd648c53a99f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130363235392f61303130326631382d623336342d613761322d656237322d3538623532663930366134642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2Fa0102f18-b364-a7a2-eb72-58b52f906a4d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=5e3979b0729ab715b96f5f32a8ba5504\" alt=\"コンソール\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/a0102f18-b364-a7a2-eb72-58b52f906a4d.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2Fa0102f18-b364-a7a2-eb72-58b52f906a4d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=d42531b1e380691e867d9c77b54c167f 1x\" loading=\"lazy\"></a></p>\n\n<p>また、REST APIへのアクセス時にCognitoの認証IDを受け取っているため、画像アップロード機能についてもエラーとならず動作させられます<br>\nなお、画像IDは、<a href=\"https://github.com/ericelliott/cuid\" rel=\"nofollow noopener\" target=\"_blank\">cuid</a>を使って発番しています</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/c5c01bf74619f3da809ffacfaa2b0ec82e94cbb9/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130363235392f63363333393134382d636136662d613436662d663064352d3465663835666631613065382e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2Fc6339148-ca6f-a46f-f0d5-4ef85ff1a0e8.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=c8bbc7b12ae9b2b988ceb38f343c511a\" alt=\"画像アップロード\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/c6339148-ca6f-a46f-f0d5-4ef85ff1a0e8.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2Fc6339148-ca6f-a46f-f0d5-4ef85ff1a0e8.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=282270c4cb2108d0536437a1c4f55895 1x\" loading=\"lazy\"></a><br>\n<a href=\"https://camo.qiitausercontent.com/3dfef1b295a4ec2a909fdda3e6ec72be9c2fa048/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130363235392f34613063303432322d396335332d626534392d313030362d6233376632393334303536612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F4a0c0422-9c53-be49-1006-b37f2934056a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=3f5e4b738254c68cb19fa2a3bedaab16\" alt=\"画像\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/4a0c0422-9c53-be49-1006-b37f2934056a.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F4a0c0422-9c53-be49-1006-b37f2934056a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=b0beeaba7c3df54d04b865d6cadfc62c 1x\" loading=\"lazy\"></a></p>\n\n<p>UIについては、Bootstrap用CSSフレームワークの<a href=\"http://designmodo.github.io/Flat-UI/\" rel=\"nofollow noopener\" target=\"_blank\">Flat UI</a>を使ってみたのと、（使いこなせていませんが）SASSを<a href=\"http://koala-app.com/\" rel=\"nofollow noopener\" target=\"_blank\">Koala</a>を使いつつ書きました。<a href=\"https://qiita.com/yktakaha4/items/e535c310f0532798e721\" id=\"reference-b440a15c47c7fe383d68\">前回</a>はPingendoに付属していたテンプレートを適当に組み合わせていただけだったので、多少進歩があったものと思います<br>\nJavaScriptについては、依然としてjQueryおじさんを抜け出せずにいます...2019年中にはもうちょっとモダンな書き方に追いつきたいと思います</p>\n\n<h1>\n<span id=\"スロット画面\" class=\"fragment\"></span><a href=\"#%E3%82%B9%E3%83%AD%E3%83%83%E3%83%88%E7%94%BB%E9%9D%A2\"><i class=\"fa fa-link\"></i></a>スロット画面</h1>\n\n<p>いよいよ肝心のスロット画面になります。操作画面にてスロット画面表示ボタンを押すと、新婦指定の画像が回りはじめます（Macのファンも凄い勢いで回ります🌪）</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/dd0484552838e458af7f981330c4b40a41ae5a72/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130363235392f38393136323830622d356432352d646332652d383166652d3862643066393662613864662e676966\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F8916280b-5d25-dc2e-81fe-8bd0f96ba8df.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=6e505f151ad9fdd65f0a277f214cbc46\" alt=\"スロット画面\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/8916280b-5d25-dc2e-81fe-8bd0f96ba8df.gif\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F8916280b-5d25-dc2e-81fe-8bd0f96ba8df.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=a79a7ead39812fcba8f18c8c770ac7f1 1x\" loading=\"lazy\"></a></p>\n\n<p>スロットのスタートとストップを繰り返しながら、「会社」の「高橋」様に「選べる神戸牛」をプレゼント...みたいな感じで、予め決めておいた抽選結果を順番に画面表示してく...というものになります</p>\n\n<p>スロット操作画面はBootstrapを使いましたが、スロット画面はデザイン用のフレームワークは使わず、素のHTML/CSSとjQueryで頑張るという方針で作りました<br>\n単に使いよさそうなものを見つけられなかった、というだけなのですが、今回みたいなユースケースに使えるライブラリやフレームワークってあるんでしょうか...？</p>\n\n<h2>\n<span id=\"css\" class=\"fragment\"></span><a href=\"#css\"><i class=\"fa fa-link\"></i></a>CSS</h2>\n\n<p>今回、レイアウトで地味に苦労したのが、「どのような縦横比を想定して要素を配置すればよいか？」ということでした<br>\n例えばBootstrapであれば、ブラウザの幅を基準に、あふれる項目を行送り（＝スクロール）させることでレイアウトの整合性を保っていますが、今回の場合だと、各要素をすべて描画エリアに収める必要があります</p>\n\n<p>しかし、本番環境（パーティ会場）のスクリーンがどのような縦横比をしているかは、リハーサルの日まではわかりません<br>\nなので、「縦or横の最大幅を１とした相対サイズですべてをレイアウトする」という考え方で要素を配置していく必要があります<br>\nディスプレイやプロジェクターなど、昨今の一般的な表示デバイスは横幅より縦幅の方が短いので、今回は縦幅を基準に横幅を決定する方針で作りました<br>\n（説明が下手で申し訳ないですが、以下を見てもらえばおおよそ言いたいことは伝わるものと思います）</p>\n\n<p><strong>縦幅 &lt; 横幅の場合</strong><br>\n<a href=\"https://camo.qiitausercontent.com/e6f81362d0ffd94bab14c79c8dc365347dc97f96/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130363235392f63336230653438652d313030642d663638622d323933332d3366363733656634303964302e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2Fc3b0e48e-100d-f68b-2933-3f673ef409d0.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=9b98a54ace33b103062488c91e3f2c4c\" alt=\"縦に.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/c3b0e48e-100d-f68b-2933-3f673ef409d0.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2Fc3b0e48e-100d-f68b-2933-3f673ef409d0.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=37271d10961722094e0ff6d6e5e1d09c 1x\" loading=\"lazy\"></a></p>\n\n<p><strong>縦幅 = 横幅の場合</strong><br>\n<a href=\"https://camo.qiitausercontent.com/330eeda19d0ebc67131dfaae512e0f319517d5df/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130363235392f65633462613638352d656265332d323965332d356164642d6638393763333636373833312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2Fec4ba685-ebe3-29e3-5add-f897c3667831.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=5400ed11e525dc41427b662023f70585\" alt=\"正方形\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/ec4ba685-ebe3-29e3-5add-f897c3667831.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2Fec4ba685-ebe3-29e3-5add-f897c3667831.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=f9ce1b682260db5e194a027157f1c849 1x\" loading=\"lazy\"></a></p>\n\n<p>今回、上記のような画面表示を実現するために、<a href=\"https://www.webprofessional.jp/css-viewport-units-quick-start/\" rel=\"nofollow noopener\" target=\"_blank\">vh(Viewport Height)</a>という単位を要所で使っています<br>\n<code>100vh = ビューポートの高さ</code>というもので、これを使えば、よく使う<code>%</code>や<code>em</code>では実現しづらいサイズ指定を柔軟におこなうことができます</p>\n\n<p>上記<code>vh</code>に加え、<code>position: absolute;</code>で花やらリボンやらを表示エリアの端から相対位置で描画していき、画面を作っていきました<br>\n画像のサイズや反転などについては、<code>transform</code>がだいぶ役に立ちました</p>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">花の配置</span></div>\n<div class=\"highlight\"><pre><code><span class=\"c\">/* 左の花 */</span>\n<span class=\"nc\">.flowers-left</span> <span class=\"p\">{</span>\n  <span class=\"nl\">position</span><span class=\"p\">:</span> <span class=\"nb\">absolute</span><span class=\"p\">;</span>\n  <span class=\"nl\">left</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n  <span class=\"nl\">bottom</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n  <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">30%</span><span class=\"p\">;</span>\n  <span class=\"nl\">-webkit-transform</span><span class=\"p\">:</span> <span class=\"n\">scale</span><span class=\"p\">(</span><span class=\"m\">-1</span><span class=\"p\">,</span> <span class=\"m\">1</span><span class=\"p\">)</span> <span class=\"n\">translate</span><span class=\"p\">(</span><span class=\"m\">5%</span><span class=\"p\">,</span> <span class=\"m\">5%</span><span class=\"p\">);</span>\n  <span class=\"nl\">z-index</span><span class=\"p\">:</span> <span class=\"m\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"c\">/* 右の花 */</span>\n<span class=\"nc\">.flowers-right</span> <span class=\"p\">{</span>\n  <span class=\"nl\">position</span><span class=\"p\">:</span> <span class=\"nb\">absolute</span><span class=\"p\">;</span>\n  <span class=\"nl\">right</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n  <span class=\"nl\">bottom</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n  <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">30%</span><span class=\"p\">;</span>\n  <span class=\"nl\">-webkit-transform</span><span class=\"p\">:</span> <span class=\"n\">translate</span><span class=\"p\">(</span><span class=\"m\">5%</span><span class=\"p\">,</span> <span class=\"m\">5%</span><span class=\"p\">);</span>\n  <span class=\"nl\">z-index</span><span class=\"p\">:</span> <span class=\"m\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n</div>\n\n<p>その他、細かな話だと、文字の装飾（枠線、明滅）はCSS Animationで実現しています。ブラウザでtext-strokeなどの表示感が結構異なり、このため当初ChromeでやるつもりだったものをSafariで動かすように変えたりしました</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/48b07eb57e20165ba1287a11968a1750305cea69/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130363235392f31346137666161392d383537382d363134642d643537612d3830366138643636336266332e676966\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F14a7faa9-8578-614d-d57a-806a8d663bf3.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=1297564090e08aa136db33bc7b1c8a2b\" alt=\"screencast 2018-12-24 00-06-40.gif\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/14a7faa9-8578-614d-d57a-806a8d663bf3.gif\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F14a7faa9-8578-614d-d57a-806a8d663bf3.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=635354067247e621d5a90ae8c075a8a9 1x\" loading=\"lazy\"></a></p>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">文字装飾</span></div>\n<div class=\"highlight\"><pre><code><span class=\"nc\">.slot-text</span> <span class=\"p\">{</span>\n  <span class=\"nl\">font-size</span><span class=\"p\">:</span> <span class=\"m\">9vh</span><span class=\"p\">;</span>\n  <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"no\">gold</span><span class=\"p\">;</span>\n  <span class=\"nl\">-webkit-text-stroke</span><span class=\"p\">:</span> <span class=\"nb\">thin</span> <span class=\"no\">black</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.text</span> <span class=\"p\">{</span>\n  <span class=\"nl\">vertical-align</span><span class=\"p\">:</span> <span class=\"nb\">middle</span><span class=\"p\">;</span>\n  <span class=\"nl\">z-index</span><span class=\"p\">:</span> <span class=\"m\">50</span><span class=\"p\">;</span>\n  <span class=\"nl\">font-family</span><span class=\"p\">:</span> <span class=\"s2\">'ヒラギノ角ゴ Std W8'</span><span class=\"p\">,</span> <span class=\"nb\">monospace</span><span class=\"p\">;</span>\n  <span class=\"nl\">font-weight</span><span class=\"p\">:</span> <span class=\"nb\">bold</span><span class=\"p\">;</span>\n\n  <span class=\"nl\">line-height</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n  <span class=\"nl\">-webkit-animation</span><span class=\"p\">:</span> <span class=\"n\">neon</span> <span class=\"m\">1s</span> <span class=\"n\">ease-in-out</span> <span class=\"n\">infinite</span> <span class=\"n\">alternate</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">@keyframes</span> <span class=\"n\">neon</span> <span class=\"p\">{</span>\n  <span class=\"nt\">from</span> <span class=\"p\">{</span>\n    <span class=\"nl\">text-shadow</span><span class=\"p\">:</span> <span class=\"m\">0</span> <span class=\"m\">0</span> <span class=\"m\">1px</span> <span class=\"no\">white</span><span class=\"p\">,</span> <span class=\"m\">0</span> <span class=\"m\">0</span> <span class=\"m\">2px</span> <span class=\"no\">white</span><span class=\"p\">,</span> <span class=\"m\">0</span> <span class=\"m\">0</span> <span class=\"m\">3px</span> <span class=\"no\">white</span><span class=\"p\">,</span> <span class=\"m\">0</span> <span class=\"m\">0</span> <span class=\"m\">4px</span> <span class=\"no\">lightyellow</span><span class=\"p\">,</span> <span class=\"m\">0</span> <span class=\"m\">0</span> <span class=\"m\">5px</span> <span class=\"no\">lightyellow</span><span class=\"p\">,</span> <span class=\"m\">0</span> <span class=\"m\">0</span> <span class=\"m\">6px</span> <span class=\"no\">lightyellow</span><span class=\"p\">,</span> <span class=\"m\">0</span> <span class=\"m\">0</span> <span class=\"m\">7px</span> <span class=\"no\">lightyellow</span><span class=\"p\">,</span> <span class=\"m\">0</span> <span class=\"m\">0</span> <span class=\"m\">8px</span> <span class=\"no\">lightyellow</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nt\">to</span> <span class=\"p\">{</span>\n    <span class=\"nl\">text-shadow</span><span class=\"p\">:</span> <span class=\"m\">0</span> <span class=\"m\">0</span> <span class=\"m\">2px</span> <span class=\"no\">white</span><span class=\"p\">,</span> <span class=\"m\">0</span> <span class=\"m\">0</span> <span class=\"m\">4px</span> <span class=\"no\">white</span><span class=\"p\">,</span> <span class=\"m\">0</span> <span class=\"m\">0</span> <span class=\"m\">6px</span> <span class=\"no\">white</span><span class=\"p\">,</span> <span class=\"m\">0</span> <span class=\"m\">0</span> <span class=\"m\">8px</span> <span class=\"no\">lightyellow</span><span class=\"p\">,</span> <span class=\"m\">0</span> <span class=\"m\">0</span> <span class=\"m\">10px</span> <span class=\"no\">lightyellow</span><span class=\"p\">,</span> <span class=\"m\">0</span> <span class=\"m\">0</span> <span class=\"m\">12px</span> <span class=\"no\">lightyellow</span><span class=\"p\">,</span> <span class=\"m\">0</span> <span class=\"m\">0</span> <span class=\"m\">14px</span> <span class=\"no\">lightyellow</span><span class=\"p\">,</span> <span class=\"m\">0</span> <span class=\"m\">0</span> <span class=\"m\">16px</span> <span class=\"no\">lightyellow</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n</div>\n\n<p>花、リボンやプレート、背景のカーテンは<a href=\"https://www.ac-illust.com/\" rel=\"nofollow noopener\" target=\"_blank\">Illust AC</a>という素材サイトより拝借しました</p>\n\n<p><a href=\"https://www.ac-illust.com/main/detail.php?id=1023007\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://www.ac-illust.com/main/detail.php?id=1023007</a><br>\n<a href=\"https://www.ac-illust.com/main/detail.php?id=718442\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://www.ac-illust.com/main/detail.php?id=718442</a><br>\n<a href=\"https://www.ac-illust.com/main/detail.php?id=860468\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://www.ac-illust.com/main/detail.php?id=860468</a></p>\n\n<h2>\n<span id=\"javascript\" class=\"fragment\"></span><a href=\"#javascript\"><i class=\"fa fa-link\"></i></a>JavaScript</h2>\n\n<p>スロットの仕組みは、jQueryのカルーセルライブラリの<a href=\"http://kenwheeler.github.io/slick/\" rel=\"nofollow noopener\" target=\"_blank\">Slick</a>をカスタマイズしてなんとかしました。これがなかったら多分頓挫してました...それぐらい色々いい感じにやってもらえて助かりました</p>\n\n<p>また、スロットの回転時にプレートをぼやかした方がそれっぽそうだったので、同じくjQueryフレームワークの<a href=\"http://nbartlomiej.github.io/foggy/\" rel=\"nofollow noopener\" target=\"_blank\">Foggy</a>を使いました</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">ライブラリの使用イメージ</span></div>\n<div class=\"highlight\"><pre><code><span class=\"c1\">// Slick</span>\n<span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">.slot-wheel</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">slick</span><span class=\"p\">({</span>\n  <span class=\"na\">arrows</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n  <span class=\"na\">infinite</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n  <span class=\"na\">slidesToShow</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n  <span class=\"na\">slidesToScroll</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n  <span class=\"na\">centerMode</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n  <span class=\"na\">variableWidth</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n  <span class=\"na\">autoplay</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n  <span class=\"na\">autoplaySpeed</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n  <span class=\"na\">speed</span><span class=\"p\">:</span> <span class=\"mi\">1000</span><span class=\"p\">,</span>\n  <span class=\"na\">pauseOnFocus</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n  <span class=\"na\">pauseOnHover</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n  <span class=\"na\">cssEase</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">ease</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n  <span class=\"na\">useCSS</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n  <span class=\"na\">useTransform</span><span class=\"p\">:</span> <span class=\"kc\">true</span>\n<span class=\"p\">}).</span><span class=\"nx\">slick</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">slickPause</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Foggy</span>\n<span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">.slot-wheel</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">foggy</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">);</span>\n</code></pre></div>\n</div>\n\n<p><a href=\"https://camo.qiitausercontent.com/5257583948cc400711e8b9a157a485b29cdfd413/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130363235392f35313636323862342d653633662d356532632d653534382d3864626130363166343131662e676966\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F516628b4-e63f-5e2c-e548-8dba061f411f.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=eddc01d939b0027f5e8daad04158e3c2\" alt=\"スロット回転\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/516628b4-e63f-5e2c-e548-8dba061f411f.gif\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F516628b4-e63f-5e2c-e548-8dba061f411f.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=cc99f829b7299508cb0bb6d5deb89658 1x\" loading=\"lazy\"></a></p>\n\n<p>あたりの際に背景をおめでたい感じにしたかったので、<a href=\"http://obadger.com/pow/\" rel=\"nofollow noopener\" target=\"_blank\">pow.js</a>を使って紅白を入れ替えた背景を２枚作り、パカパカさせて動きをつけました</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/75faa0da602339afe5c57f056651b0ab7fb428b4/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130363235392f39636535363736382d383936642d353661362d326234622d6561306361336239626134352e676966\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F9ce56768-896d-56a6-2b4b-ea0ca3b9ba45.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=bdc14c25f50902465f874cf6dbcb51c1\" alt=\"screencast 2018-12-23 23-56-19.gif\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/9ce56768-896d-56a6-2b4b-ea0ca3b9ba45.gif\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F9ce56768-896d-56a6-2b4b-ea0ca3b9ba45.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=512146a567d2017137cbc0a6a6aed7b1 1x\" loading=\"lazy\"></a></p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">pow.js利用イメージ</span></div>\n<div class=\"highlight\"><pre><code><span class=\"c1\">// pikaって...</span>\n<span class=\"kd\">var</span> <span class=\"nx\">pika</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">selector</span><span class=\"p\">,</span> <span class=\"nx\">type</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">ray</span> <span class=\"o\">=</span> <span class=\"nx\">type</span> <span class=\"p\">?</span> <span class=\"dl\">\"</span><span class=\"s2\">red</span><span class=\"dl\">\"</span> <span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">white</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">bg</span> <span class=\"o\">=</span> <span class=\"nx\">type</span> <span class=\"p\">?</span> <span class=\"dl\">\"</span><span class=\"s2\">white</span><span class=\"dl\">\"</span> <span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">red</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n  <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"nx\">selector</span><span class=\"p\">).</span><span class=\"nx\">pow</span><span class=\"p\">({</span>\n    <span class=\"na\">rays</span><span class=\"p\">:</span> <span class=\"mi\">32</span><span class=\"p\">,</span>\n    <span class=\"na\">rayColorStart</span><span class=\"p\">:</span> <span class=\"nx\">ray</span><span class=\"p\">,</span>\n    <span class=\"na\">rayColorEnd</span><span class=\"p\">:</span> <span class=\"nx\">ray</span><span class=\"p\">,</span>\n    <span class=\"na\">bgColorStart</span><span class=\"p\">:</span> <span class=\"nx\">bg</span><span class=\"p\">,</span>\n    <span class=\"na\">bgColorEnd</span><span class=\"p\">:</span> <span class=\"nx\">bg</span><span class=\"p\">,</span>\n    <span class=\"na\">originX</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">50%</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"na\">originY</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">50%</span><span class=\"dl\">\"</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">};</span>\n<span class=\"nx\">pika</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">.pikapika.fore</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">);</span>\n<span class=\"nx\">pika</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">.pikapika.alt</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"kc\">true</span><span class=\"p\">);</span>\n</code></pre></div>\n</div>\n\n<p>その他、背景で星がキラキラしてるのは、<a href=\"http://jsdo.it/nao_k116/rx27\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a>を参考に実装しました</p>\n\n<p>あと、作っている途中にエンドユーザ（新婦）から音を鳴らして欲しいと言われ、<a href=\"https://soundeffect-lab.info/sound/anime/\" rel=\"nofollow noopener\" target=\"_blank\">素材サイト</a>から頂きつつ<a href=\"http://www.htmq.com/html5/audio.shtml\" rel=\"nofollow noopener\" target=\"_blank\">audio要素</a>を使ってなんとかしました（コードは参考にならないレベルなので割愛します...）</p>\n\n<hr>\n\n<p>技術的な話を中心に色々書きましたが、この間に少し作っては新婦に確認してもらうよう連絡し、なるべく齟齬が出ないように努めました</p>\n\n<h1>\n<span id=\"運用\" class=\"fragment\"></span><a href=\"#%E9%81%8B%E7%94%A8\"><i class=\"fa fa-link\"></i></a>運用</h1>\n\n<p>画面表示確認のリハーサルを一回挟み、当日はすぐにやってきました<br>\n一般参加者より早めに会場入りし、機材を繋げて待ちます...</p>\n\n<p>会の参加者は、最終的に80名ほどになっていました...<br>\nパーティが始まっても酒の一滴も飲まず、料理も口にせず、<br>\n知人と話せども緊張で要領を得ず、ただ己の順番が来るのを待ちます...</p>\n\n<p>パーティも半分を過ぎた頃、ようやく自分の番がやってきました...<br>\n新婦が「ルーレット、スタート！」だとか「ストップ！」とか言うたびに、スロット操作画面のボタンを一つずつ押していきます...</p>\n\n<p>うわあ...マジで動いてるよ...😨</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/b70fd4f0cd5a59faf46f50281cf9d262b3f10c05/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130363235392f33316236626663302d363736662d316163392d626134302d3833383931393430313261312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F31b6bfc0-676f-1ac9-ba40-8389194012a1.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=de909fd340bcf127855a69969e34a43f\" alt=\"本番\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/31b6bfc0-676f-1ac9-ba40-8389194012a1.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F31b6bfc0-676f-1ac9-ba40-8389194012a1.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=c3ff949a7ae9e0e18717fa7643e72aa4 1x\" loading=\"lazy\"></a></p>\n\n<p>みんなめっちゃ見てるし...🤢（当たり前だ）<br>\n時折会場が盛り上がる度に肝が冷え、変な笑いが出ます...</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/6850be1ff1461653cb6acfb9403d0689beb6c9ac/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130363235392f35353633366230382d656463342d363262382d306364622d6633326666393532643664392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F55636b08-edc4-62b8-0cdb-f32ff952d6d9.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=ea9a31dca794998204e9324b3ffb6fdc\" alt=\"本番２\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/55636b08-edc4-62b8-0cdb-f32ff952d6d9.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F55636b08-edc4-62b8-0cdb-f32ff952d6d9.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=83401ab8cf8f8483ab2632597dff309a 1x\" loading=\"lazy\"></a></p>\n\n<p>その後、はよ終わってくれという思いを込めて無心でボタンを押し続け、<br>\n結果的には大きなトラブルもなく、何とか持ち時間を無事やりきったのでした</p>\n\n<p>終わった後もしばらく放心していたのですが、<br>\n残っていた冷えたマカロニ的なものとビールがすげえうまかったのを覚えています...🍻</p>\n\n<p>書いてみるとほとんどあっという間という風ですが、実際の時間感覚もこんな感じだったように思います⏳</p>\n\n<h1>\n<span id=\"所感\" class=\"fragment\"></span><a href=\"#%E6%89%80%E6%84%9F\"><i class=\"fa fa-link\"></i></a>所感</h1>\n\n<p>思ったことを箇条書きで...</p>\n\n<ul>\n<li>\n<p>音はすげえ大事🎷</p>\n\n<ul>\n<li>家でテストしているときは無音でもそこまで気にならないのですが、実際に現場で動かすと、人は音でゲームの状態（ドラムロールで抽選中とか、シンバルがなったらスロットが止まったとか）を認識しているように思いました。音がちょっと出遅れると緊張が走ったりして...</li>\n<li>同じ意味でBGMも大事です。万一トラブルが起きた時に、無音で参加者を待たせて場が冷える、ということは避けねばなりません。トラブルがなくても、ゲームの進行中にもたついたりした時に、背景で何かしら流れているとだいぶ事故感が薄れるように思いました</li>\n<li>今回は、Amazon Musicで「ジャズ　楽団」みたいなワードで検索し作ったプレイリストをループ再生してました</li>\n</ul>\n</li>\n<li>\n<p>画面を暗転させる時は、画面端にマークか何かを表示しておくとよい</p>\n\n<ul>\n<li>会場にもよるものと思いますが、今回はHDMIでプロジェクターにつないで投影という形でした。当日までリモコンを手元に置いておけるかわからなかったので、初期表示時に暗転→ボタン制御で表示という形にしたのですが、HDMI側とアプリ側のどちらで表示を切っているかわからず、不安になる場面がありました</li>\n<li>画面暗転時に、左上に赤とか緑で●を表示しておくとかすれば、わかりやすくなったかなと思います</li>\n</ul>\n</li>\n<li>\n<p>異常系のケースをちゃんと考えておこう🚨</p>\n\n<ul>\n<li>余興の途中に「当選者が確定したがタバコを吸いに行ってていなかった」ということがおきたのですが、司会の方が機転を利かせて当選者の知人に代わりに受け取ってもらうよう促してくれて命拾いした...ということがありました</li>\n<li>くじ引きのようにその場で再抽選する、ということが不可能な仕様にしていたのがよくなかった、という話でもありますが、事前に伝えておけば運用でうまくカバーできることだとも思うので、SE的に言えばコンチプランって大事だなあ...と思った次第です</li>\n</ul>\n</li>\n<li>\n<p>ユーザの要望はちゃんと聞いておこう</p>\n\n<ul>\n<li>新婦に確認してもらってる中で、「ルーレットの出目を無理やり動かすパターンを作ってほしい」と言われていたのですが、当時それ以前にSlickをうまく動かせておらず（一つずれて止まったりとか😇）、「できたら対応する」的なことを言ってうやむやにし、結局やらずじまいで当日を迎えました</li>\n<li>余興が終わった後に友人（思ったことなんでも言ってくるやつ）に話しかけられ言われたのは「最初はよかったけど単調で飽きた😡」ということでした</li>\n<li>仕様を出している当事者が指摘することは、高い確率で他の誰かも指摘するという好例だなと思ったのと、そうした（コードベース上では）ちょっとした改善でユーザの満足度が大きく上がることも往々にしてあるだろう、と実感しました</li>\n</ul>\n</li>\n<li>\n<p>（望むなら）お金のことを事前に決めておこう💰</p>\n\n<ul>\n<li>パーティが終わった後、一緒に参加した友人と２次会やらカラオケやらに行っていると新婦がやってきて、寸志をもらいました</li>\n<li>個人的には、人目に触れるものを作るいい機会と思ってやっていたことなので謝礼をもらうのは特に考えてなかったのですが、「もしもこれが個人事業主で、受注した仕事にもらった報酬だとしたら...」と考えると、金額を提示して、それに見合った仕事をする、というプロセスは（スキルを伸ばすためにも）結構大事だなと思いました</li>\n<li>今後引き受け仕事をするときは、少なからずそうしたことも考えていきたいと思います</li>\n</ul>\n</li>\n</ul>\n\n<h1>\n<span id=\"ソース\" class=\"fragment\"></span><a href=\"#%E3%82%BD%E3%83%BC%E3%82%B9\"><i class=\"fa fa-link\"></i></a>ソース</h1>\n\n<p><qiita-embed-ogp src=\"https://github.com/yktakaha4/otanoshimi-slot\"></qiita-embed-ogp></p>\n\n<p>APIのコードが断片的、かつ画像や音声素材を削除（0バイトのファイルに置換）しているため、そのままだととても動かせないのですが、一応Githubにあげてみました<img alt=\":octocat:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/octocat.png\" title=\":octocat:\" width=\"20\" loading=\"lazy\"></p>\n",
      "body": "# はじめに\n\n![おたのしみスロット](https://qiita-image-store.s3.amazonaws.com/0/106259/9b1ca1ee-da87-aa6d-c7db-82b5a2639ffd.png)\n\n友人👰がこの度めでたく結婚することとなり、友人・知人向けにパーティが開かれたのですが、その式の余興のひとつとしてルーレットゲームの制作を依頼され、開発と本番運用（言い方）を担当しました\n\n他人と仕様を詰めて個人開発したWebアプリとしては初めてのものになるので、色々至ってない部分も多いですが、そうした諸々の備忘も兼ねて書き残したいと思います🎰\n\n# 受注\n\n今年の梅雨の頃に結婚することを呑みの席で切り出された時、私はちょうど退職に向けて準備を進めていたところで、夏の間に数ヶ月の休みを取るつもりでいました\n\nその間を無為に過ごすことを味気なく思い、「しばらく暇だしなんなら余興でも作ったげるよ😎」と軽い気持ちで言いおいてその場は終わったのですが、後日連絡をもらい、冬に開かれるパーティに向けてルーレットのゲームを作ってほしい、と改めて依頼を受けました\n\n前職ではWebアプリを作っていたことと、当日まで半年近く期間があったため、まあなんとかなるだろうと軽い気持ちで承諾し、プロジェクトがスタートしました\n\n# 要件定義\n\nファミレスで2時間ほど彼女と話したところ、おおよそ以下のようなことを言われました\n\n- ウェディングパーティに来てくれた人に、ルーレットゲームで景品をプレゼントしたい\n\t- 色々なグループ（地元の友達、会社の同僚、社会人サークルの方々...など）から、あわせて70~80人くらいの人を招待するつもり\n- 景品には当たり（布団乾燥機とか...）とハズレ（愛用のつけまつげとか...）をそれぞれいくつか用意する\n- 招待状（[Biluce](https://biluce.net/)というWebサービスを使ってました）の返信をもらう際に参加者に画像を添付してもらい、ルーレットで使いたい\n- 景品も画像で用意したい\n- 当日のルーレット操作は私（筆者）にやってほしい\n- 当日ドタキャンや人数増加などが発生する可能性があるので、参加者の増減はゲーム直前まで柔軟に対応できるようにしてほしい\n\nそんなところだろうという感じですが、面白かったのが以下でした\n\n- ルーレットの出目を制御したい\n\t- ハズレの景品を社会人サークルの重鎮の方や大人しい友達に当てると気まずいので、ある景品を特定の所属の人や個人には当てないようにしたい\n\t- グループごとに参加人数に差があるが、景品の当たる回数はグループ間でなるべく均一にしたい\n\n要は、忖度したいということですね。気遣いのできる良妻となることでしょう（適当）\n\n# 設計\n\n家に帰って、早速アーキテクチャを考えました。事前に新婦に参加者および景品の登録や、アプリの動作確認をしてもらうことを考えると、Webアプリとして実装してクラウドサービスで公開するのがよさそうです⛅️\n\nまた、データの参照、更新が複数人から頻繁に行われるようなものではないので、サーバサイドの実装はなるべく簡便に済ませて、デザインや挙動の調整に注力すべきでしょう\n\n...と、いうようなこと考えながら作り進めていったところ、最終的に以下のような感じになりました\n\n<img width=\"876\" alt=\"アーキテクチャ\" src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/3f76f0a1-b53f-0851-987b-9bf8990f5917.png\">\n\n段取りとしてはこんなところです\n\n1. 新婦にて、スプレッドシートに参加者の名前と景品名、NGルールを入力する\n2. 新婦にて、システムに参加者の画像をアップロードして登録する\n3. 筆者にてパーティー当日に抽選をおこない、結果をもとにルーレット画面を表示する\n4. 参加者は景品を手にして大喜び！🥳🎁\n\n# 実装\n\n設計と比較しながら、ひとつずつ書いていきます\n\n## Google Spreadsheet\n\n新婦とGoogleドライブを共有し、以下のようなスプレッドシートに値を入力してもらいます\n画像ID（１箇所URLて書いてますが...）についてはあとで説明します\n\n**景品一覧シート**\n![景品一覧](https://qiita-image-store.s3.amazonaws.com/0/106259/128db961-b764-602b-1058-80fdb0127416.png)\n\n**NGルール一覧シート**\n![NGルール一覧](https://qiita-image-store.s3.amazonaws.com/0/106259/6b49df00-1ec7-22c4-b20b-c658684ccb0f.png)\n\n**人物一覧シート**\n![人物一覧](https://qiita-image-store.s3.amazonaws.com/0/106259/9fa6cd93-ede4-49ee-a97f-2749d1e42559.png)\n\n上記シートに入力後、「抽選」ボタンを押すと、NGルールに基づいて抽選を行った結果を表示します（[こちら](https://stepism.sakura.ne.jp/adiary/036)のようにすると実装できます）\n\n**抽選シート**\n![抽選](https://qiita-image-store.s3.amazonaws.com/0/106259/c68017a5-7c51-ee77-87f1-ac416fa2f37c.png)\n\n## Google Active Script\n\n「表示します」としれっと書きましたが、こちらはGASにより実現します\nNGルールシートを参照しつつ抽選をおこなうdrawLots()と、抽選結果を各種一覧データと併せてJSON形式で返却するdoPost()を実装します\n\n```javascript:doPost()\nfunction doPost(event) {\n  var response = { error: \"error\" };\n\n  try {\n    var token = SpreadsheetApp.getActive().getSheetByName(\"抽選\").getRange(\"B1\").getValue();\n    var s3_credential = SpreadsheetApp.getActive().getSheetByName(\"抽選\").getRange(\"C1\").getValue();\n    var s3_bucket = SpreadsheetApp.getActive().getSheetByName(\"抽選\").getRange(\"D1\").getValue();\n    var url_prefix = \"https://s3.amazonaws.com/\" + s3_bucket + \"/\";\n    if(event.parameter.token == token) {\n      response = {\n        ok: \"ok\",\n        persons: getPersons(url_prefix),\n        gifts: getGifts(url_prefix),\n        lots: getLots(),\n        s3_credential: s3_credential,\n        s3_bucket: s3_bucket\n      };\n    }\n  } catch(error) {\n    console.log(error);\n  }\n  \n  return ContentService\n    .createTextOutput(JSON.stringify(response))\n    .setMimeType(ContentService.MimeType.JSON); \n}\n```\n\n真面目に書くには貧弱なバージョンのJavaScript&エディタを差し引いても、スプレッドシートのデータ構造とREST APIを手軽に扱えるというGASは相当メリットがあると思います\nAPIもどことなく馴染みのあるIFですし... ~~やっててよかったVBA~~\n\nあとこれは開発してから知ったのですが、[GASをGit管理できたり](https://qiita.com/rf_p/items/7492375ddd684ba734f8)、[TypeScriptでコードが書けたり](https://tech.actindi.net/2018/09/10/083314)など、環境がだいぶ整ってきているようですので、機会を見つけて触ってみたいと思います\n\nただ、相当だらだらやっていたため、この段階であてにしていた休みを使い切ってしまい、以降は働きつつ暇を見つけて作ることになってしまいました...\n\n## AWS S3 / Cognito\n\nサーバーサイドはGoogleドライブ&GASでまかなえましたが、\nスロット画面および画像、音声ファイルのWeb公開と、画像アップロード機能について、どのように実現するか考える必要があります\n\n[転職先](https://www.hands-lab.com/)でAWSを使う中で、 S3でファイルを外部公開する[静的ウェブサイトホスティング](https://qiita.com/gcsungwoo/items/2e49c3008a04e48581ed)を知り、ファイルサイズ的に利用料もかからず良さそうだったので使うことにしました\n\nファイルアップロード機能は、[こちらの記事](https://www.selfree.co.jp/2015/06/18/%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%83%AC%E3%82%B9%E3%81%A7javascript-%E3%81%A0%E3%81%91%E3%81%A7%E7%94%BB%E5%83%8F%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E3%82%A2%E3%83%83%E3%83%97%E3%83%AD%E3%83%BC%E3%83%89%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95)を参考に、Cognitoで静的ホスティングを行っているバケットへのアップロード権限を確認するように実装しました\n利用の際にエンドポイントや接続に必要な情報が必要になりますが、HTMLには埋め込まず、GASのAPIから返却するようにしています\n\n```javascript:接続情報の生成\nsontaku.props.s3client = function () {\n  AWS.config.region = sontaku.data.s3_credential.split(\":\")[0];\n  AWS.config.credentials = new AWS.CognitoIdentityCredentials({\n    IdentityPoolId: sontaku.data.s3_credential\n  });\n  return new AWS.S3({\n    params: {\n      Bucket: data.s3_bucket\n    }\n  });\n};\n```\n\n# スロット操作/画像アップロード画面\n\nサーバサイドとインフラは大体定まったので、肝心のスロット画面周りを作っていきます\n先ほど図で示したように、スロットはパーティ会場のプロジェクタに全画面表示する必要がありますが、それだけだとスタート/ストップの指示を出すのが難しいため、\nスロット操作画面を作って、そこからスロット画面の挙動を制御します\n\nメッセージを送る方法は、当初はWebSocketにしたら現地にいなくても遠隔操作できるんじゃ...とか色々考えましたが、最終的にコンソール画面からスロット画面を起動し、windowオブジェクトを直接いじることにしました\nダサいですが、手間もかからず確実性の高いやり方だと思ってます\n\nS3にホスティングされたスロット操作画面からGASのREST APIにアクセスして、抽選結果や参加者一覧、景品一覧の入ったJSONを取得します\nこちらの画面の「起動」、「準備」、「スタート」といった各ボタンを押すことで、この後説明するスロット画面の表示状態を制御します\n\n![コンソール](https://qiita-image-store.s3.amazonaws.com/0/106259/a0102f18-b364-a7a2-eb72-58b52f906a4d.png)\n\nまた、REST APIへのアクセス時にCognitoの認証IDを受け取っているため、画像アップロード機能についてもエラーとならず動作させられます\nなお、画像IDは、[cuid](https://github.com/ericelliott/cuid)を使って発番しています\n\n![画像アップロード](https://qiita-image-store.s3.amazonaws.com/0/106259/c6339148-ca6f-a46f-f0d5-4ef85ff1a0e8.png)\n![画像](https://qiita-image-store.s3.amazonaws.com/0/106259/4a0c0422-9c53-be49-1006-b37f2934056a.png)\n\nUIについては、Bootstrap用CSSフレームワークの[Flat UI](http://designmodo.github.io/Flat-UI/)を使ってみたのと、（使いこなせていませんが）SASSを[Koala](http://koala-app.com/)を使いつつ書きました。[前回](https://qiita.com/yktakaha4/items/e535c310f0532798e721)はPingendoに付属していたテンプレートを適当に組み合わせていただけだったので、多少進歩があったものと思います\nJavaScriptについては、依然としてjQueryおじさんを抜け出せずにいます...2019年中にはもうちょっとモダンな書き方に追いつきたいと思います\n\n# スロット画面\n\nいよいよ肝心のスロット画面になります。操作画面にてスロット画面表示ボタンを押すと、新婦指定の画像が回りはじめます（Macのファンも凄い勢いで回ります🌪）\n\n![スロット画面](https://qiita-image-store.s3.amazonaws.com/0/106259/8916280b-5d25-dc2e-81fe-8bd0f96ba8df.gif)\n\nスロットのスタートとストップを繰り返しながら、「会社」の「高橋」様に「選べる神戸牛」をプレゼント...みたいな感じで、予め決めておいた抽選結果を順番に画面表示してく...というものになります\n\nスロット操作画面はBootstrapを使いましたが、スロット画面はデザイン用のフレームワークは使わず、素のHTML/CSSとjQueryで頑張るという方針で作りました\n単に使いよさそうなものを見つけられなかった、というだけなのですが、今回みたいなユースケースに使えるライブラリやフレームワークってあるんでしょうか...？\n\n## CSS\n\n今回、レイアウトで地味に苦労したのが、「どのような縦横比を想定して要素を配置すればよいか？」ということでした\n例えばBootstrapであれば、ブラウザの幅を基準に、あふれる項目を行送り（＝スクロール）させることでレイアウトの整合性を保っていますが、今回の場合だと、各要素をすべて描画エリアに収める必要があります\n\nしかし、本番環境（パーティ会場）のスクリーンがどのような縦横比をしているかは、リハーサルの日まではわかりません\nなので、「縦or横の最大幅を１とした相対サイズですべてをレイアウトする」という考え方で要素を配置していく必要があります\nディスプレイやプロジェクターなど、昨今の一般的な表示デバイスは横幅より縦幅の方が短いので、今回は縦幅を基準に横幅を決定する方針で作りました\n（説明が下手で申し訳ないですが、以下を見てもらえばおおよそ言いたいことは伝わるものと思います）\n\n**縦幅 < 横幅の場合**\n![縦に.png](https://qiita-image-store.s3.amazonaws.com/0/106259/c3b0e48e-100d-f68b-2933-3f673ef409d0.png)\n\n**縦幅 = 横幅の場合**\n![正方形](https://qiita-image-store.s3.amazonaws.com/0/106259/ec4ba685-ebe3-29e3-5add-f897c3667831.png)\n\n今回、上記のような画面表示を実現するために、[vh(Viewport Height)](https://www.webprofessional.jp/css-viewport-units-quick-start/)という単位を要所で使っています\n`100vh = ビューポートの高さ`というもので、これを使えば、よく使う`%`や`em`では実現しづらいサイズ指定を柔軟におこなうことができます\n\n上記`vh`に加え、`position: absolute;`で花やらリボンやらを表示エリアの端から相対位置で描画していき、画面を作っていきました\n画像のサイズや反転などについては、`transform`がだいぶ役に立ちました\n\n```css:花の配置\n/* 左の花 */\n.flowers-left {\n  position: absolute;\n  left: 0;\n  bottom: 0;\n  width: 30%;\n  -webkit-transform: scale(-1, 1) translate(5%, 5%);\n  z-index: 1;\n}\n/* 右の花 */\n.flowers-right {\n  position: absolute;\n  right: 0;\n  bottom: 0;\n  width: 30%;\n  -webkit-transform: translate(5%, 5%);\n  z-index: 1;\n}\n```\n\nその他、細かな話だと、文字の装飾（枠線、明滅）はCSS Animationで実現しています。ブラウザでtext-strokeなどの表示感が結構異なり、このため当初ChromeでやるつもりだったものをSafariで動かすように変えたりしました\n\n![screencast 2018-12-24 00-06-40.gif](https://qiita-image-store.s3.amazonaws.com/0/106259/14a7faa9-8578-614d-d57a-806a8d663bf3.gif)\n\n```css:文字装飾\n.slot-text {\n  font-size: 9vh;\n  color: gold;\n  -webkit-text-stroke: thin black;\n}\n\n.text {\n  vertical-align: middle;\n  z-index: 50;\n  font-family: 'ヒラギノ角ゴ Std W8', monospace;\n  font-weight: bold;\n\n  line-height: 1em;\n  -webkit-animation: neon 1s ease-in-out infinite alternate;\n}\n\n@keyframes neon {\n  from {\n    text-shadow: 0 0 1px white, 0 0 2px white, 0 0 3px white, 0 0 4px lightyellow, 0 0 5px lightyellow, 0 0 6px lightyellow, 0 0 7px lightyellow, 0 0 8px lightyellow;\n  }\n\n  to {\n    text-shadow: 0 0 2px white, 0 0 4px white, 0 0 6px white, 0 0 8px lightyellow, 0 0 10px lightyellow, 0 0 12px lightyellow, 0 0 14px lightyellow, 0 0 16px lightyellow;\n  }\n}\n```\n\n花、リボンやプレート、背景のカーテンは[Illust AC](https://www.ac-illust.com/)という素材サイトより拝借しました\n\nhttps://www.ac-illust.com/main/detail.php?id=1023007\nhttps://www.ac-illust.com/main/detail.php?id=718442\nhttps://www.ac-illust.com/main/detail.php?id=860468\n\n## JavaScript\n\nスロットの仕組みは、jQueryのカルーセルライブラリの[Slick](http://kenwheeler.github.io/slick/)をカスタマイズしてなんとかしました。これがなかったら多分頓挫してました...それぐらい色々いい感じにやってもらえて助かりました\n\nまた、スロットの回転時にプレートをぼやかした方がそれっぽそうだったので、同じくjQueryフレームワークの[Foggy](http://nbartlomiej.github.io/foggy/)を使いました\n\n```javascript:ライブラリの使用イメージ\n// Slick\n$(\".slot-wheel\").slick({\n  arrows: false,\n  infinite: true,\n  slidesToShow: 3,\n  slidesToScroll: 1,\n  centerMode: true,\n  variableWidth: true,\n  autoplay: true,\n  autoplaySpeed: 0,\n  speed: 1000,\n  pauseOnFocus: false,\n  pauseOnHover: false,\n  cssEase: 'ease',\n  useCSS: true,\n  useTransform: true\n}).slick(\"slickPause\");\n\n// Foggy\n$(\".slot-wheel\").foggy(false);\n```\n\n![スロット回転](https://qiita-image-store.s3.amazonaws.com/0/106259/516628b4-e63f-5e2c-e548-8dba061f411f.gif)\n\nあたりの際に背景をおめでたい感じにしたかったので、[pow.js](http://obadger.com/pow/)を使って紅白を入れ替えた背景を２枚作り、パカパカさせて動きをつけました\n\n![screencast 2018-12-23 23-56-19.gif](https://qiita-image-store.s3.amazonaws.com/0/106259/9ce56768-896d-56a6-2b4b-ea0ca3b9ba45.gif)\n\n```javascript:pow.js利用イメージ\n// pikaって...\nvar pika = function (selector, type) {\n  var ray = type ? \"red\" : \"white\";\n  var bg = type ? \"white\" : \"red\";\n  $(selector).pow({\n    rays: 32,\n    rayColorStart: ray,\n    rayColorEnd: ray,\n    bgColorStart: bg,\n    bgColorEnd: bg,\n    originX: \"50%\",\n    originY: \"50%\"\n  });\n};\npika(\".pikapika.fore\", false);\npika(\".pikapika.alt\", true);\n```\n\nその他、背景で星がキラキラしてるのは、[こちら](http://jsdo.it/nao_k116/rx27)を参考に実装しました\n\nあと、作っている途中にエンドユーザ（新婦）から音を鳴らして欲しいと言われ、[素材サイト](https://soundeffect-lab.info/sound/anime/)から頂きつつ[audio要素](http://www.htmq.com/html5/audio.shtml)を使ってなんとかしました（コードは参考にならないレベルなので割愛します...）\n\n---\n\n技術的な話を中心に色々書きましたが、この間に少し作っては新婦に確認してもらうよう連絡し、なるべく齟齬が出ないように努めました\n\n# 運用\n\n画面表示確認のリハーサルを一回挟み、当日はすぐにやってきました\n一般参加者より早めに会場入りし、機材を繋げて待ちます...\n\n会の参加者は、最終的に80名ほどになっていました...\nパーティが始まっても酒の一滴も飲まず、料理も口にせず、\n知人と話せども緊張で要領を得ず、ただ己の順番が来るのを待ちます...\n\nパーティも半分を過ぎた頃、ようやく自分の番がやってきました...\n新婦が「ルーレット、スタート！」だとか「ストップ！」とか言うたびに、スロット操作画面のボタンを一つずつ押していきます...\n\nうわあ...マジで動いてるよ...😨\n\n![本番](https://qiita-image-store.s3.amazonaws.com/0/106259/31b6bfc0-676f-1ac9-ba40-8389194012a1.png)\n\nみんなめっちゃ見てるし...🤢（当たり前だ）\n時折会場が盛り上がる度に肝が冷え、変な笑いが出ます...\n\n![本番２](https://qiita-image-store.s3.amazonaws.com/0/106259/55636b08-edc4-62b8-0cdb-f32ff952d6d9.png)\n\nその後、はよ終わってくれという思いを込めて無心でボタンを押し続け、\n結果的には大きなトラブルもなく、何とか持ち時間を無事やりきったのでした\n\n終わった後もしばらく放心していたのですが、\n残っていた冷えたマカロニ的なものとビールがすげえうまかったのを覚えています...🍻\n\n書いてみるとほとんどあっという間という風ですが、実際の時間感覚もこんな感じだったように思います⏳\n\n# 所感\n\n思ったことを箇条書きで...\n\n- 音はすげえ大事🎷\n    - 家でテストしているときは無音でもそこまで気にならないのですが、実際に現場で動かすと、人は音でゲームの状態（ドラムロールで抽選中とか、シンバルがなったらスロットが止まったとか）を認識しているように思いました。音がちょっと出遅れると緊張が走ったりして...\n    - 同じ意味でBGMも大事です。万一トラブルが起きた時に、無音で参加者を待たせて場が冷える、ということは避けねばなりません。トラブルがなくても、ゲームの進行中にもたついたりした時に、背景で何かしら流れているとだいぶ事故感が薄れるように思いました\n    - 今回は、Amazon Musicで「ジャズ　楽団」みたいなワードで検索し作ったプレイリストをループ再生してました\n\n- 画面を暗転させる時は、画面端にマークか何かを表示しておくとよい\n    - 会場にもよるものと思いますが、今回はHDMIでプロジェクターにつないで投影という形でした。当日までリモコンを手元に置いておけるかわからなかったので、初期表示時に暗転→ボタン制御で表示という形にしたのですが、HDMI側とアプリ側のどちらで表示を切っているかわからず、不安になる場面がありました\n    - 画面暗転時に、左上に赤とか緑で●を表示しておくとかすれば、わかりやすくなったかなと思います\n\n- 異常系のケースをちゃんと考えておこう🚨\n    - 余興の途中に「当選者が確定したがタバコを吸いに行ってていなかった」ということがおきたのですが、司会の方が機転を利かせて当選者の知人に代わりに受け取ってもらうよう促してくれて命拾いした...ということがありました\n    - くじ引きのようにその場で再抽選する、ということが不可能な仕様にしていたのがよくなかった、という話でもありますが、事前に伝えておけば運用でうまくカバーできることだとも思うので、SE的に言えばコンチプランって大事だなあ...と思った次第です\n\n- ユーザの要望はちゃんと聞いておこう\n    - 新婦に確認してもらってる中で、「ルーレットの出目を無理やり動かすパターンを作ってほしい」と言われていたのですが、当時それ以前にSlickをうまく動かせておらず（一つずれて止まったりとか😇）、「できたら対応する」的なことを言ってうやむやにし、結局やらずじまいで当日を迎えました\n    - 余興が終わった後に友人（思ったことなんでも言ってくるやつ）に話しかけられ言われたのは「最初はよかったけど単調で飽きた😡」ということでした\n    - 仕様を出している当事者が指摘することは、高い確率で他の誰かも指摘するという好例だなと思ったのと、そうした（コードベース上では）ちょっとした改善でユーザの満足度が大きく上がることも往々にしてあるだろう、と実感しました\n\n- （望むなら）お金のことを事前に決めておこう💰\n    - パーティが終わった後、一緒に参加した友人と２次会やらカラオケやらに行っていると新婦がやってきて、寸志をもらいました\n    - 個人的には、人目に触れるものを作るいい機会と思ってやっていたことなので謝礼をもらうのは特に考えてなかったのですが、「もしもこれが個人事業主で、受注した仕事にもらった報酬だとしたら...」と考えると、金額を提示して、それに見合った仕事をする、というプロセスは（スキルを伸ばすためにも）結構大事だなと思いました\n    - 今後引き受け仕事をするときは、少なからずそうしたことも考えていきたいと思います\n\n# ソース\n\nhttps://github.com/yktakaha4/otanoshimi-slot\n\nAPIのコードが断片的、かつ画像や音声素材を削除（0バイトのファイルに置換）しているため、そのままだととても動かせないのですが、一応Githubにあげてみました:octocat:\n",
      "coediting": false,
      "comments_count": 0,
      "created_at": "2019-01-02T22:09:43+09:00",
      "group": null,
      "id": "50582331df743ecf565a",
      "likes_count": 17,
      "private": false,
      "reactions_count": 0,
      "stocks_count": 9,
      "tags": [
        {
          "name": "JavaScript",
          "versions": []
        },
        {
          "name": "jQuery",
          "versions": []
        },
        {
          "name": "AWS",
          "versions": []
        },
        {
          "name": "GoogleAppsScript",
          "versions": []
        }
      ],
      "title": "JS + GAS + AWSでルーレットゲームを作ってウェディングパーティの余興を担当する（ソース付き）",
      "updated_at": "2019-01-05T09:22:58+09:00",
      "url": "https://qiita.com/yktakaha4/items/50582331df743ecf565a",
      "user": {
        "description": "",
        "facebook_id": "",
        "followees_count": 26,
        "followers_count": 23,
        "github_login_name": "yktakaha4",
        "id": "yktakaha4",
        "items_count": 27,
        "linkedin_id": "",
        "location": "",
        "name": "Yuuki Takahashi",
        "organization": "LAPRAS株式会社",
        "permanent_id": 106259,
        "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/profile-images/1600489516",
        "team_only": false,
        "twitter_screen_name": "yktakaha4",
        "website_url": "https://yktakaha4.github.io/"
      },
      "page_views_count": null,
      "team_membership": null,
      "organization_url_name": null,
      "slide": false
    },
    {
      "rendered_body": "<p>こちらは、<a href=\"https://qiita.com/advent-calendar/2018/handslab\">ハンズラボ Advent Calendar 2018</a> 20日目の記事になります！</p>\n\n<h1>\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n\n<p>2018年9月にハンズラボに入社しました<a href=\"/yktakaha4\" class=\"user-mention js-hovercard\" title=\"yktakaha4\" data-hovercard-target-type=\"user\" data-hovercard-target-name=\"yktakaha4\">@yktakaha4</a>です</p>\n\n<p>配属されたチームにて開発環境の構築にDockerを使っているのですが、<br>\n過去触ったことがなかったため当初何が起きてるのか全くわからず、やばいじゃん...😨と思って勉強することにしました</p>\n\n<p><a href=\"https://www.amazon.co.jp/Docker-Kubernetes-%E5%AE%9F%E8%B7%B5%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E9%96%8B%E7%99%BA%E5%85%A5%E9%96%80-%E5%B1%B1%E7%94%B0-%E6%98%8E%E6%86%B2-ebook/dp/B07GP1Q3VT\" rel=\"nofollow noopener\" target=\"_blank\">Docker/Kubernetes 実践コンテナ開発入門</a>のDocker周りの章を読んで多少整理がついたので、<br>\n何事も実践が一番！ということで、実際にDocker Composeを使って作業環境を作ってみることにしました</p>\n\n<h1>\n<span id=\"どんなものを作るか\" class=\"fragment\"></span><a href=\"#%E3%81%A9%E3%82%93%E3%81%AA%E3%82%82%E3%81%AE%E3%82%92%E4%BD%9C%E3%82%8B%E3%81%8B\"><i class=\"fa fa-link\"></i></a>どんなものを作るか</h1>\n\n<p>世間ではデータ分析の重要性が説かれて久しいですね📈</p>\n\n<p>東急ハンズにおいても、BIツールや各種分析システムが導入されていますが、<br>\n時として、個人レベルでちょっとした分析作業をやってみたい/しなければならないということもあるものと思います<br>\n遊びだったらいいですが、あまり手作業&amp;ノリでやると、定型作業化したり、案件化した際に他者へ展開するのが辛くなりそうです</p>\n\n<p>そこで、以下のような要件を仮定して、個人向けデータ分析基盤をDockerで作ることに挑戦します✨</p>\n\n<ol>\n<li>RDBやストレージ、Web等からデータを集めてくる</li>\n<li>データを整形・集計する</li>\n<li>集計した結果を可視化する</li>\n<li>思いついたことをパッと試せる</li>\n</ol>\n\n<h1>\n<span id=\"どのように作るか\" class=\"fragment\"></span><a href=\"#%E3%81%A9%E3%81%AE%E3%82%88%E3%81%86%E3%81%AB%E4%BD%9C%E3%82%8B%E3%81%8B\"><i class=\"fa fa-link\"></i></a>どのように作るか</h1>\n\n<p>弊社でも導入している<a href=\"https://cacoo.com/ja/\" rel=\"nofollow noopener\" target=\"_blank\">Cacoo</a>を使って、図にしてみました<br>\n上に書いた要件と対比してひとつずつ見ていきます</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/dc6727454ccf78b94d9eb192bc6e1702756c086e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130363235392f64363365326633362d343834312d623061362d616261342d3234306333333238363734662e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2Fd63e2f36-4841-b0a6-aba4-240c3328674f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=7d4c971fa5cf6233b71f955a2f254821\" alt=\"アーキテクチャ\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/d63e2f36-4841-b0a6-aba4-240c3328674f.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2Fd63e2f36-4841-b0a6-aba4-240c3328674f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=b0e78ebf1bfa4fb09b9ffe526d3e99c5 1x\" loading=\"lazy\"></a></p>\n\n<h2>\n<span id=\"rdbやストレージweb等からデータを集めてくる\" class=\"fragment\"></span><a href=\"#rdb%E3%82%84%E3%82%B9%E3%83%88%E3%83%AC%E3%83%BC%E3%82%B8web%E7%AD%89%E3%81%8B%E3%82%89%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E9%9B%86%E3%82%81%E3%81%A6%E3%81%8F%E3%82%8B\"><i class=\"fa fa-link\"></i></a>RDBやストレージ、Web等からデータを集めてくる</h2>\n\n<p>弊社はAWSを激推ししているので、データは基本AWSの各種サービス（Redshift、RDS、DynamoDB、S3など）に蓄積されています<br>\nマスタデータを管理するDBに好き勝手に繋ぎにいくのは避けたいので、データは稼働の低い時間帯にアクセスし、TSVなどのファイルに落としておくのがよさそうです</p>\n\n<p>また、弊社が採用している技術のひとつである<a href=\"https://www.usp-lab.com/methodology.html\" rel=\"nofollow noopener\" target=\"_blank\">ユニケージ開発手法</a>は基本的にファイル文化なのですが、<br>\nユニケージ形式のファイルはSSV(って言うんですね...半角スペース区切り)、ヘッダなし、空値は _ で表現という書式のため、よくあるファイルと同様に扱うにはちょっとした加工が必要になります</p>\n\n<div class=\"code-frame\" data-lang=\"shell\">\n<div class=\"code-lang\"><span class=\"bold\">ユニケージファイルのイメージ</span></div>\n<div class=\"highlight\"><pre><code><span class=\"c\"># 1:ID 2:商品名 3:価格 4:種別</span>\n001 りんご 100 1\n002 みかん 50 2\n003 きゅうり 80 _\n</code></pre></div>\n</div>\n\n<p>データの鮮度についても、最初はスクリプトを書いて手実行...でよいものと思いますが、<br>\n定型化・自動化を見据えてcrontabを使えるようにしておきたいです</p>\n\n<h2>\n<span id=\"データを整形集計する\" class=\"fragment\"></span><a href=\"#%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E6%95%B4%E5%BD%A2%E9%9B%86%E8%A8%88%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>データを整形・集計する</h2>\n\n<p>ネットで　データ分析基盤　で調べると企業レベルの事例の話が沢山出てきますが、<br>\nデータソースから生データを取ってきて整形・集計...という流れを自動化するのがセオリーのようです<br>\n今回は、バッチフレームワークの<a href=\"https://github.com/spotify/luigi\" rel=\"nofollow noopener\" target=\"_blank\">Luigi</a>を使ってデータパイプラインを構築します。シンプルでいい感じです</p>\n\n<p>データの加工・集計にはデータフレームのライブラリである<a href=\"https://pandas.pydata.org/\" rel=\"nofollow noopener\" target=\"_blank\">Pandas</a>を使います<br>\n以下のように、元のデータがTSVであってもユニケージ形式であっても、うまいこと扱うことができます<br>\nというか大抵のデータ操作は<a href=\"https://qiita.com/s_katagiri/items/4cd7dee37aae7a1e1fc0\" id=\"reference-b9b9e5ea268a99c723bd\">まずできます</a>。すごい...</p>\n\n<div class=\"code-frame\" data-lang=\"python\">\n<div class=\"code-lang\"><span class=\"bold\">ファイルの読み込み</span></div>\n<div class=\"highlight\"><pre><code><span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"n\">pd</span>\n\n<span class=\"c1\"># ユニケージファイルの読み込み\n</span><span class=\"n\">items_unicage</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s\">'./ITEMS'</span><span class=\"p\">,</span> <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s\">' '</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">).</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s\">'_'</span><span class=\"p\">,</span> <span class=\"s\">''</span><span class=\"p\">)</span>\n<span class=\"n\">items_unicage</span><span class=\"p\">.</span><span class=\"n\">columns</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">'id'</span><span class=\"p\">,</span> <span class=\"s\">'name'</span><span class=\"p\">,</span> <span class=\"s\">'price'</span><span class=\"p\">,</span> <span class=\"s\">'type'</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># TSVの読み込み\n</span><span class=\"n\">items_tsv</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s\">'./items.tsv'</span><span class=\"p\">,</span> <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s\">'</span><span class=\"se\">\\t</span><span class=\"s\">'</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n</code></pre></div>\n</div>\n\n<p>Pythonを本格的に使い始めたのは入社してからなのですが、<br>\nこうした諸々を手軽にやれるのは、舗装された道路を走っているようなものでありがたいですね...</p>\n\n<h2>\n<span id=\"集計した結果を可視化する\" class=\"fragment\"></span><a href=\"#%E9%9B%86%E8%A8%88%E3%81%97%E3%81%9F%E7%B5%90%E6%9E%9C%E3%82%92%E5%8F%AF%E8%A6%96%E5%8C%96%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>集計した結果を可視化する</h2>\n\n<p>データの整形・集計が済んだら、次は可視化です<br>\n今回は、これまたシンプルにやりたいことが実現できそうだったので、ダッシュボードツールの<a href=\"https://redash.io/\" rel=\"nofollow noopener\" target=\"_blank\">Redash</a>を使えるようにします（<a href=\"https://qiita.com/watarukura/items/aebe0adf5a5ecc994c93\" id=\"reference-caebf2b7e381a7bc1b83\">watarukura</a>さんに勧めて頂きました）</p>\n\n<p>Redashは基本的にSQLでデータを取り出してグラフ化する...というものなので、<br>\n今までの工程で生成してきた各種集計ファイルをプールする集計結果保持用のDB（PostgreSQL）を用意します🐘</p>\n\n<p>また、今までは定型化された分析処理の話ばかりしていましたが、<br>\n初期段階では分析用DBにアドホックにクエリを打って、複数のデータを作ってそれを結合するクエリを打って...のような柔軟な操作ができると使い勝手がよさそうです<br>\nRedashではそうした要望を実現するために<a href=\"https://redash.io/help/user-guide/querying/query-results-data-source\" rel=\"nofollow noopener\" target=\"_blank\">Query Results</a>という機能がベータ版で提供されていますが、<br>\n複雑なクエリだとエラーを吐くケースもありちょっと不審だったので、今回は違う方法で実現します（後述）</p>\n\n<h2>\n<span id=\"思いついたことをパッと試せる\" class=\"fragment\"></span><a href=\"#%E6%80%9D%E3%81%84%E3%81%A4%E3%81%84%E3%81%9F%E3%81%93%E3%81%A8%E3%82%92%E3%83%91%E3%83%83%E3%81%A8%E8%A9%A6%E3%81%9B%E3%82%8B\"><i class=\"fa fa-link\"></i></a>思いついたことをパッと試せる</h2>\n\n<p>前項で、分析をアドホックに試したいという話がありましたが、<br>\n他のツールやライブラリを使ってみるとか、機械学習はどうかとか、分析の手法はいくらでも考えられそうです<br>\nデータパイプラインに処理を落とし込む前に、ファイルの整形・集計処理のコードを検討するためにも、対話型の環境があると便利でしょう</p>\n\n<p>そうした要件に取り組みやすくなるよう、<a href=\"https://github.com/jupyterlab/jupyterlab\" rel=\"nofollow noopener\" target=\"_blank\">JupyterLab</a>を導入しておきます<br>\nこっちは<a href=\"https://qiita.com/thimi0412/items/6fb41dd00178753185c9\" id=\"reference-8c43a3fed919144500ce\">thimi0412</a>さんに教えてもらいましたが、各種ライブラリを試しつつ&amp;結果を残しつつ作業できるのでだいぶよさげです</p>\n\n<h3>\n<span id=\"パッと試してそれからどうする\" class=\"fragment\"></span><a href=\"#%E3%83%91%E3%83%83%E3%81%A8%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%9D%E3%82%8C%E3%81%8B%E3%82%89%E3%81%A9%E3%81%86%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>パッと試して、それからどうする？</h3>\n\n<p>最終的には分析結果を店舗で働いてる業務部門の方々に見せることにもなりそうですが、<br>\nその際に話が弾んで、分析の軸を変えてほしいとか、対象のデータを増減させたい...と意見がもらえた時に、柔軟に対処できるとよさそうです<br>\n具体的には、以下のようなフローがスムーズに実現できるか、ということになるでしょうか</p>\n\n<ol>\n<li>何かしらの方法で元データファイルを作る\n\n<ul>\n<li>Jupyterでファイルの生成スクリプトを書く</li>\n<li>RedashでSQL書いて、生成した結果表をCSVエクスポートする（標準機能で付いてます）</li>\n<li>S3やネットなどからファイルを落としてくる</li>\n<li>\n<a href=\"https://github.com/usp-engineers-community/Open-usp-Tukubai\" rel=\"nofollow noopener\" target=\"_blank\">ユニケージコマンド</a>を駆使して手作業で作る\n\n<ul>\n<li>余談ですが、ちょっとしたデータ加工においてユニケージはだいぶ有用です。筆者は特に<code>yarr</code>が好きです...</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>元データファイルを集計用DBに取り込む。できるだけ手軽に🤗</li>\n<li>Redashで可視化する</li>\n</ol>\n\n<p>上記の２.について、何かファイルをいじる度にバッチを叩いたり、cronがポーリングしてくれるのを待ったりなどはしたくないので、<br>\n<a href=\"https://qiita.com/stc1988/items/464410382f8425681c20\" id=\"reference-cc7beb804fe5356841c8\">inotifywait</a>を使ってコンテナ内の所定のディレクトリを監視し、ファイルが更新されたら集計用DBにデータをロードするようにします</p>\n\n<p>今回は、こんな定義ファイルをyamlでたくさん用意しておき、処理対象のファイル名とマッチしたら集計用DBにDDLを発行...という<a href=\"https://github.com/yktakaha4/analysis-docker/blob/master/volumes/analysis-batch/batch/analysis/load_files.py\" rel=\"nofollow noopener\" target=\"_blank\">Luigiタスクを作って</a>、実行するようにしました</p>\n\n<div class=\"code-frame\" data-lang=\"yaml\">\n<div class=\"code-lang\"><span class=\"bold\">定義ファイルイメージ（ユニケージ用）</span></div>\n<div class=\"highlight\"><pre><code><span class=\"na\">pattern</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">/ITEMS$\"</span>\n<span class=\"na\">format</span><span class=\"pi\">:</span>\n  <span class=\"na\">encoding</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">utf-8\"</span>\n  <span class=\"na\">newline</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span>\n  <span class=\"na\">skip</span><span class=\"pi\">:</span> <span class=\"m\">0</span>\n  <span class=\"na\">delimiter</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"nv\"> </span><span class=\"s\">\"</span>\n  <span class=\"na\">doublequote</span><span class=\"pi\">:</span> <span class=\"no\">false</span>\n  <span class=\"na\">escapechar</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">\"</span>\n  <span class=\"na\">skipinitialspace</span><span class=\"pi\">:</span> <span class=\"no\">false</span>\n  <span class=\"na\">replacers</span><span class=\"pi\">:</span>\n    <span class=\"pi\">-</span> <span class=\"na\">pattern</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">^_$\"</span>\n      <span class=\"na\">newvalue</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">\"</span>\n<span class=\"na\">table_name</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">items\"</span>\n<span class=\"na\">ddl</span><span class=\"pi\">:</span> <span class=\"pi\">|</span>\n  <span class=\"s\">drop table if exists {table_name};</span>\n  <span class=\"s\">create table {table_name} (</span>\n    <span class=\"s\">item_id varchar(3) not null,</span>\n    <span class=\"s\">name varchar(255) not null,</span>\n    <span class=\"s\">price int not null,</span>\n    <span class=\"s\">item_type varchar(1) not null,</span>\n    <span class=\"s\">primary key(item_id)</span>\n  <span class=\"s\">);</span>\n</code></pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"yaml\">\n<div class=\"code-lang\"><span class=\"bold\">オマケ：CSVファイルの読み込み定義</span></div>\n<div class=\"highlight\"><pre><code><span class=\"na\">format</span><span class=\"pi\">:</span>\n  <span class=\"na\">encoding</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">utf-8\"</span>\n  <span class=\"na\">newline</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span>\n  <span class=\"na\">skip</span><span class=\"pi\">:</span> <span class=\"m\">1</span>\n  <span class=\"na\">delimiter</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">,\"</span>\n  <span class=\"na\">doublequote</span><span class=\"pi\">:</span> <span class=\"no\">true</span>\n  <span class=\"na\">escapechar</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"se\">\\\"</span><span class=\"s\">\"</span>\n  <span class=\"na\">skipinitialspace</span><span class=\"pi\">:</span> <span class=\"no\">false</span>\n</code></pre></div>\n</div>\n\n<h1>\n<span id=\"作ったもの\" class=\"fragment\"></span><a href=\"#%E4%BD%9C%E3%81%A3%E3%81%9F%E3%82%82%E3%81%AE\"><i class=\"fa fa-link\"></i></a>作ったもの</h1>\n\n<p><qiita-embed-ogp src=\"https://github.com/yktakaha4/analysis-docker\"></qiita-embed-ogp></p>\n\n<p>社内で使っているものをそのまま公開はアレでしたので、今回説明した内容に機能を絞ったものをGithubに公開しました<img alt=\":octocat:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/octocat.png\" title=\":octocat:\" width=\"20\" loading=\"lazy\"><br>\n以下、簡単に解説していきます</p>\n\n<h2>\n<span id=\"初期構築起動停止\" class=\"fragment\"></span><a href=\"#%E5%88%9D%E6%9C%9F%E6%A7%8B%E7%AF%89%E8%B5%B7%E5%8B%95%E5%81%9C%E6%AD%A2\"><i class=\"fa fa-link\"></i></a>初期構築・起動・停止</h2>\n\n<p>任意のディレクトリで以下のコマンドを実行してください</p>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><code><span class=\"go\">~❯ git clone https://github.com/yktakaha4/analysis-docker.git\n~❯ cd analysis-docker\n\n</span><span class=\"gp\">#</span><span class=\"w\"> </span>ビルド実行後、Redash用、集計結果保持用のDBをそれぞれ作成\n<span class=\"go\">❯ docker-compose build\n❯ docker-compose run --rm server create_db\n❯ docker-compose run --rm luigi create_db\n\n</span><span class=\"gp\">#</span><span class=\"w\"> </span>起動・停止（２回目以降は以下のみでOK）\n<span class=\"go\">❯ docker-compose up\n❯ docker-compose down\n</span></code></pre></div></div>\n\n<h2>\n<span id=\"jupyter確認\" class=\"fragment\"></span><a href=\"#jupyter%E7%A2%BA%E8%AA%8D\"><i class=\"fa fa-link\"></i></a>Jupyter確認</h2>\n\n<p>localhost:25002にアクセスすると、JupyterLabが起動します<br>\ndata/watch配下を確認すると、サンプルファイルが入っているのが確認できます</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/2fbef35c5b5ffaf3908d39e9e364508ce0c9a400/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130363235392f64313964323564632d393736392d613132622d613836622d3962323764303335366261612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2Fd19d25dc-9769-a12b-a86b-9b27d0356baa.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=8857752b4b23f60b367605543a20a937\" alt=\"JupyterLab\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/d19d25dc-9769-a12b-a86b-9b27d0356baa.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2Fd19d25dc-9769-a12b-a86b-9b27d0356baa.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=3d0f09c614a6bc584c488f2660d2d411 1x\" loading=\"lazy\"></a></p>\n\n<p>使い方などは話がそれるので割愛</p>\n\n<h2>\n<span id=\"luigiとinotifywait確認\" class=\"fragment\"></span><a href=\"#luigi%E3%81%A8inotifywait%E7%A2%BA%E8%AA%8D\"><i class=\"fa fa-link\"></i></a>Luigiとinotifywait確認</h2>\n\n<p>別のターミナルを立ち上げて、テスト用ファイルを更新してみます<br>\ninotifywaitにより更新が検知され、集計DBにデータがロードされます</p>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><code><span class=\"gp\">#</span><span class=\"w\"> </span>先ほどと同じディレクトリに移動して実行すること\n<span class=\"go\">❯ ll volumes/analysis-data/watch/ITEMS\n-rw-r--r--  1 tkhs  staff    61B Dec 16 13:00 volumes/analysis-data/watch/ITEMS\n❯ touch volumes/analysis-data/watch/ITEMS\n\n</span><span class=\"gp\">#</span><span class=\"w\"> </span>docker-composeを実行した方のターミナルに、タスクの実行ログが表示される\n<span class=\"go\">（略）\nluigi_1       | ===== Luigi Execution Summary =====\nluigi_1       |\nluigi_1       | Scheduled 1 tasks of which:\nluigi_1       | * 1 ran successfully:\nluigi_1       |     - 1 analysis.LoadFilesTask(source_files_path=/root/analysis/data/watch/ITEMS, definition_files_path=/root/analysis/batch/configs/load_files)\nluigi_1       |\nluigi_1       | This progress looks :) because there were no failed tasks or missing dependencies\nluigi_1       |\nluigi_1       | ===== Luigi Execution Summary =====\n（略）\n</span></code></pre></div></div>\n\n<p>localhost:25001にアクセスすると、タスクの実行結果を確認することができます</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/ecc674708e2089f7e2774718948847b0090d10e3/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130363235392f39613763613832392d373232652d393461392d653664302d6462646364313834363566362e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F9a7ca829-722e-94a9-e6d0-dbdcd18465f6.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=07603880b87715f9b326070fff373f19\" alt=\"LuigiWebコンソール\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/9a7ca829-722e-94a9-e6d0-dbdcd18465f6.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F9a7ca829-722e-94a9-e6d0-dbdcd18465f6.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=89215f243f7c08a929f159155786ce54 1x\" loading=\"lazy\"></a></p>\n\n<h2>\n<span id=\"redash確認\" class=\"fragment\"></span><a href=\"#redash%E7%A2%BA%E8%AA%8D\"><i class=\"fa fa-link\"></i></a>Redash確認</h2>\n\n<p>最後に、localhost:25000にアクセスしてRedashを起動し、データが正しく登録されたか確認します</p>\n\n<p>初期設定をして...（ローカルアカウントの設定なので、忘れなければ任意のもので多分よいです）</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/e2899ca3ce3afede73a2b641ba58074eb7d87297/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130363235392f31336437643135612d323234382d643736392d393338652d6366383365323034346563662e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F13d7d15a-2248-d769-938e-cf83e2044ecf.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=3a7c1014be2fad45a0d1573f6c4bd6a7\" alt=\"Redash初期設定\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/13d7d15a-2248-d769-938e-cf83e2044ecf.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F13d7d15a-2248-d769-938e-cf83e2044ecf.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=997dbc56b01240972169bff92837f480 1x\" loading=\"lazy\"></a></p>\n\n<p>Connect a Data Source &gt; New Data Source &gt; PostgreSQL からデータソースを作成して...</p>\n\n<table>\n<thead>\n<tr>\n<th>名前</th>\n<th>値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Name</td>\n<td>summary（任意）</td>\n</tr>\n<tr>\n<td>Host</td>\n<td>postgres</td>\n</tr>\n<tr>\n<td>User</td>\n<td>postgres</td>\n</tr>\n<tr>\n<td>Database Name</td>\n<td>summary</td>\n</tr>\n</tbody>\n</table>\n\n<p><a href=\"https://camo.qiitausercontent.com/01b562233e801eddb580da30b38ba591fc65bebc/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130363235392f38353166306165632d613935302d323262332d353535382d6364393062333963663832662e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"1072\" alt=\"Redashデータソース作成\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F851f0aec-a950-22b3-5558-cd90b39cf82f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=fd2c9912d652231895729045433269c9\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/851f0aec-a950-22b3-5558-cd90b39cf82f.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F851f0aec-a950-22b3-5558-cd90b39cf82f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=c75632a69d9490bafdbf690a3825076d 1x\" loading=\"lazy\"></a></p>\n\n<p>summaryのitemsテーブルにクエリを打ってみます<br>\nユニケージ形式だったファイルが正しく読み込めていることが確認できますね！</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/ff0c63f243b0b8c324998669e3ce8cd28c0cf4ce/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130363235392f62373034396136382d356666382d303738622d613538322d3965373531363665623635322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"1072\" alt=\"Redashクエリ\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2Fb7049a68-5ff8-078b-a582-9e75166eb652.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=e423d5303749570973ea3ec64fda9a39\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/b7049a68-5ff8-078b-a582-9e75166eb652.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2Fb7049a68-5ff8-078b-a582-9e75166eb652.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=2bef9b66b5ea86a5c876532c046d32ca 1x\" loading=\"lazy\"></a></p>\n\n<p>取得したデータを元に棒グラフを作り、りんごの価格が一番高いことを視覚的に明らかにした瞬間です📊🤔</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/68edd44df166d4dda68e85c16e48349a48c69a1e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130363235392f32316464363631612d356361372d383531302d326536362d3837656537353539633062632e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"1072\" alt=\"Redashグラフ\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F21dd661a-5ca7-8510-2e66-87ee7559c0bc.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=c77de70bc2fe94e3988914682e8ad252\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/21dd661a-5ca7-8510-2e66-87ee7559c0bc.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F21dd661a-5ca7-8510-2e66-87ee7559c0bc.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=b6987a977586bc6f260e6f1951d3d6a8 1x\" loading=\"lazy\"></a></p>\n\n<p>ファイルを更新後クエリを再実行すれば、直ちにグラフを再生成することもできます<br>\nちょっとしたことではありますが、分析作業を繰り返すうちにきっとジャブのように効いてくるものと思います</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/59e9b1f9da60b23cb62fa9dc32c6b591500507fd/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130363235392f61653331663332652d613236642d353062662d653639632d3935383165373930306561392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"990\" alt=\"Redashグラフ2\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2Fae31f32e-a26d-50bf-e69c-9581e7900ea9.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=a853867c8d4a2a31ab221faa4b020a95\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/ae31f32e-a26d-50bf-e69c-9581e7900ea9.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2Fae31f32e-a26d-50bf-e69c-9581e7900ea9.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=198e07158c4d82fd873888c4f46c62ea 1x\" loading=\"lazy\"></a></p>\n\n<h2>\n<span id=\"docker-composeymlについて\" class=\"fragment\"></span><a href=\"#docker-composeyml%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"><i class=\"fa fa-link\"></i></a>docker-compose.ymlについて</h2>\n\n<p><qiita-embed-ogp src=\"https://github.com/yktakaha4/analysis-docker/blob/master/docker-compose.yml\"></qiita-embed-ogp></p>\n\n<p>コンテナと役割についてまとめてみました<br>\n実物としては、<a href=\"https://github.com/getredash/redash/blob/master/docker-compose.production.yml\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a>や<a href=\"https://github.com/axiom-data-science/docker-luigi/blob/master/Dockerfile.alpine\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a>や<a href=\"https://qiita.com/tsnb/items/4893bc46bbdff4f97dfb\" id=\"reference-703d5ed673cc88ca27d3\">こちら</a>、<a href=\"https://github.com/docker-library/postgres/blob/master/Dockerfile-alpine.template\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a>など、既にある実装を <del>パクリ</del> 調べながら読んで内容理解に努めました</p>\n\n<table>\n<thead>\n<tr>\n<th>コンテナ名</th>\n<th>役割</th>\n<th>備考</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>server、<br>worker、<br> redis</td>\n<td>Redashが使うやつです（適当）</td>\n<td><a href=\"http://localhost:25000/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">http://localhost:25000/</a></td>\n</tr>\n<tr>\n<td>postgres</td>\n<td>Redash内部データと集計データ保持を兼ねたDB</td>\n<td>　</td>\n</tr>\n<tr>\n<td>luigi</td>\n<td>Luigiとinotifywait</td>\n<td>\n<a href=\"http://localhost:25001/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">http://localhost:25001/</a><br>複数プロセス実行のため<a href=\"http://www.itmedia.co.jp/enterprise/articles/1602/17/news004.html\" rel=\"nofollow noopener\" target=\"_blank\">supervisord</a>を使用</td>\n</tr>\n<tr>\n<td>jupyterlab</td>\n<td>JupyterLab</td>\n<td><a href=\"http://localhost:25002/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">http://localhost:25002/</a></td>\n</tr>\n</tbody>\n</table>\n\n<p>動くこと優先で作ったためイケてない部分も色々ありそうなので、使いながらよくしていきたいと思っています</p>\n\n<h1>\n<span id=\"所感\" class=\"fragment\"></span><a href=\"#%E6%89%80%E6%84%9F\"><i class=\"fa fa-link\"></i></a>所感</h1>\n\n<p>思ったことを箇条書きで...</p>\n\n<ul>\n<li>当初は大量のコマンドと定義ファイルの書式、スケールの大きな概要の説明に圧倒されていましたが、１コンテナ≒1プロセスなど、原則が頭に入ってくるとイメージが掴みやすくなったように思います\n\n<ul>\n<li>まずは、概要の話を読んでから取り組むことをお勧めします</li>\n</ul>\n</li>\n<li>情報を上から読んでいってできるようになる、というよりも、実現したい機能を洗い出して、それぞれについてどのようなコンテナがあれば実現可能か考えるのが大事です。<a href=\"https://hub.docker.com/\" rel=\"nofollow noopener\" target=\"_blank\">DockerHub</a>に既存のものがないか調べるのも重要です</li>\n<li>それにつけても、こうやって一度定義を書いてしまえば誰でも/どこでも環境構築ができて、それが無料で自分でも使うことができるというのは、本当にすごい時代になったなあ...と思います</li>\n</ul>\n\n<h1>\n<span id=\"今後の展望\" class=\"fragment\"></span><a href=\"#%E4%BB%8A%E5%BE%8C%E3%81%AE%E5%B1%95%E6%9C%9B\"><i class=\"fa fa-link\"></i></a>今後の展望</h1>\n\n<p>現時点でまだできてない部分をまとめます</p>\n\n<ul>\n<li>crontabの導入\n\n<ul>\n<li>データ分析作業がまだ試行錯誤の段階で定型作業にしたいものがなかったため、後回しにしてたら公開に間に合いませんでした...</li>\n<li>\n<a href=\"https://qiita.com/YuukiMiyoshi/items/bb7f14436d60d4bd8a8b\" id=\"reference-b2b80a53b7c2d0980e41\">こちら</a>などを見てもいくつか選択肢がありそうなので、調べつつ近く実装したいと思います</li>\n</ul>\n</li>\n<li>環境変数/資格情報の渡し方\n\n<ul>\n<li>AWSの各種サービスに繋ぎに行くために何かしら渡す必要がありますが、起動時にいい感じに注入する方法が確立できておらず、今回はバッサリはしょりました...</li>\n</ul>\n</li>\n<li>AWS上での運用\n\n<ul>\n<li>特にRedashはアカウント管理ができるということもあり、サーバで運用できるとデータ共有の面でメリットが大きいので、<a href=\"https://dev.classmethod.jp/cloud/aws-docker-service-catalog/\" rel=\"nofollow noopener\" target=\"_blank\">色々調べつつ</a>是非ともチャレンジしたいです！</li>\n</ul>\n</li>\n<li>データ分析をガンガンやる\n\n<ul>\n<li>正直やっとスタートラインに立った、という話なので、環境を作って満足...とならないよう、頑張りたいと思います😇</li>\n</ul>\n</li>\n</ul>\n\n<hr>\n\n<p><a href=\"https://qiita.com/advent-calendar/2018/handslab\">ハンズラボ Advent Calendar 2018</a> 明日は、<a href=\"https://www.hands-lab.com/contents/\" rel=\"nofollow noopener\" target=\"_blank\">弊社ブログ</a>でも活躍されている<a href=\"/yuka_jyotei\" class=\"user-mention js-hovercard\" title=\"yuka_jyotei\" data-hovercard-target-type=\"user\" data-hovercard-target-name=\"yuka_jyotei\">@yuka_jyotei</a>さんです！</p>\n",
      "body": "こちらは、[ハンズラボ Advent Calendar 2018](https://qiita.com/advent-calendar/2018/handslab) 20日目の記事になります！\n\n# はじめに\n\n2018年9月にハンズラボに入社しました@yktakaha4です\n\n配属されたチームにて開発環境の構築にDockerを使っているのですが、\n過去触ったことがなかったため当初何が起きてるのか全くわからず、やばいじゃん...😨と思って勉強することにしました\n\n[Docker/Kubernetes 実践コンテナ開発入門](https://www.amazon.co.jp/Docker-Kubernetes-%E5%AE%9F%E8%B7%B5%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E9%96%8B%E7%99%BA%E5%85%A5%E9%96%80-%E5%B1%B1%E7%94%B0-%E6%98%8E%E6%86%B2-ebook/dp/B07GP1Q3VT)のDocker周りの章を読んで多少整理がついたので、\n何事も実践が一番！ということで、実際にDocker Composeを使って作業環境を作ってみることにしました\n\n# どんなものを作るか\n\n世間ではデータ分析の重要性が説かれて久しいですね📈\n\n東急ハンズにおいても、BIツールや各種分析システムが導入されていますが、\n時として、個人レベルでちょっとした分析作業をやってみたい/しなければならないということもあるものと思います\n遊びだったらいいですが、あまり手作業&ノリでやると、定型作業化したり、案件化した際に他者へ展開するのが辛くなりそうです\n\nそこで、以下のような要件を仮定して、個人向けデータ分析基盤をDockerで作ることに挑戦します✨\n\n1. RDBやストレージ、Web等からデータを集めてくる\n2. データを整形・集計する\n3. 集計した結果を可視化する\n4. 思いついたことをパッと試せる\n\n# どのように作るか\n\n弊社でも導入している[Cacoo](https://cacoo.com/ja/)を使って、図にしてみました\n上に書いた要件と対比してひとつずつ見ていきます\n\n![アーキテクチャ](https://qiita-image-store.s3.amazonaws.com/0/106259/d63e2f36-4841-b0a6-aba4-240c3328674f.png)\n\n## RDBやストレージ、Web等からデータを集めてくる\n\n弊社はAWSを激推ししているので、データは基本AWSの各種サービス（Redshift、RDS、DynamoDB、S3など）に蓄積されています\nマスタデータを管理するDBに好き勝手に繋ぎにいくのは避けたいので、データは稼働の低い時間帯にアクセスし、TSVなどのファイルに落としておくのがよさそうです\n\nまた、弊社が採用している技術のひとつである[ユニケージ開発手法](https://www.usp-lab.com/methodology.html)は基本的にファイル文化なのですが、\nユニケージ形式のファイルはSSV(って言うんですね...半角スペース区切り)、ヘッダなし、空値は _ で表現という書式のため、よくあるファイルと同様に扱うにはちょっとした加工が必要になります\n\n```shell:ユニケージファイルのイメージ\n# 1:ID 2:商品名 3:価格 4:種別\n001 りんご 100 1\n002 みかん 50 2\n003 きゅうり 80 _\n```\n\nデータの鮮度についても、最初はスクリプトを書いて手実行...でよいものと思いますが、\n定型化・自動化を見据えてcrontabを使えるようにしておきたいです\n\n## データを整形・集計する\n\nネットで　データ分析基盤　で調べると企業レベルの事例の話が沢山出てきますが、\nデータソースから生データを取ってきて整形・集計...という流れを自動化するのがセオリーのようです\n今回は、バッチフレームワークの[Luigi](https://github.com/spotify/luigi)を使ってデータパイプラインを構築します。シンプルでいい感じです\n\nデータの加工・集計にはデータフレームのライブラリである[Pandas](https://pandas.pydata.org/)を使います\n以下のように、元のデータがTSVであってもユニケージ形式であっても、うまいこと扱うことができます\nというか大抵のデータ操作は[まずできます](https://qiita.com/s_katagiri/items/4cd7dee37aae7a1e1fc0)。すごい...\n\n```python:ファイルの読み込み\nimport pandas as pd\n\n# ユニケージファイルの読み込み\nitems_unicage = pd.read_csv('./ITEMS', sep=' ', dtype=str, header=None).replace('_', '')\nitems_unicage.columns = ['id', 'name', 'price', 'type']\n\n# TSVの読み込み\nitems_tsv = pd.read_csv('./items.tsv', sep='\\t', dtype=str)\n```\n\nPythonを本格的に使い始めたのは入社してからなのですが、\nこうした諸々を手軽にやれるのは、舗装された道路を走っているようなものでありがたいですね...\n\n## 集計した結果を可視化する\n\nデータの整形・集計が済んだら、次は可視化です\n今回は、これまたシンプルにやりたいことが実現できそうだったので、ダッシュボードツールの[Redash](https://redash.io/)を使えるようにします（[watarukura](https://qiita.com/watarukura/items/aebe0adf5a5ecc994c93)さんに勧めて頂きました）\n\nRedashは基本的にSQLでデータを取り出してグラフ化する...というものなので、\n今までの工程で生成してきた各種集計ファイルをプールする集計結果保持用のDB（PostgreSQL）を用意します🐘\n\nまた、今までは定型化された分析処理の話ばかりしていましたが、\n初期段階では分析用DBにアドホックにクエリを打って、複数のデータを作ってそれを結合するクエリを打って...のような柔軟な操作ができると使い勝手がよさそうです\nRedashではそうした要望を実現するために[Query Results](https://redash.io/help/user-guide/querying/query-results-data-source)という機能がベータ版で提供されていますが、\n複雑なクエリだとエラーを吐くケースもありちょっと不審だったので、今回は違う方法で実現します（後述）\n\n## 思いついたことをパッと試せる\n\n前項で、分析をアドホックに試したいという話がありましたが、\n他のツールやライブラリを使ってみるとか、機械学習はどうかとか、分析の手法はいくらでも考えられそうです\nデータパイプラインに処理を落とし込む前に、ファイルの整形・集計処理のコードを検討するためにも、対話型の環境があると便利でしょう\n\nそうした要件に取り組みやすくなるよう、[JupyterLab](https://github.com/jupyterlab/jupyterlab)を導入しておきます\nこっちは[thimi0412](https://qiita.com/thimi0412/items/6fb41dd00178753185c9)さんに教えてもらいましたが、各種ライブラリを試しつつ&結果を残しつつ作業できるのでだいぶよさげです\n\n### パッと試して、それからどうする？\n\n最終的には分析結果を店舗で働いてる業務部門の方々に見せることにもなりそうですが、\nその際に話が弾んで、分析の軸を変えてほしいとか、対象のデータを増減させたい...と意見がもらえた時に、柔軟に対処できるとよさそうです\n具体的には、以下のようなフローがスムーズに実現できるか、ということになるでしょうか\n\n1. 何かしらの方法で元データファイルを作る\n    - Jupyterでファイルの生成スクリプトを書く\n    - RedashでSQL書いて、生成した結果表をCSVエクスポートする（標準機能で付いてます）\n    - S3やネットなどからファイルを落としてくる\n    - [ユニケージコマンド](https://github.com/usp-engineers-community/Open-usp-Tukubai)を駆使して手作業で作る\n        - 余談ですが、ちょっとしたデータ加工においてユニケージはだいぶ有用です。筆者は特に`yarr`が好きです...\n2. 元データファイルを集計用DBに取り込む。できるだけ手軽に🤗\n3. Redashで可視化する\n\n上記の２.について、何かファイルをいじる度にバッチを叩いたり、cronがポーリングしてくれるのを待ったりなどはしたくないので、\n[inotifywait](https://qiita.com/stc1988/items/464410382f8425681c20)を使ってコンテナ内の所定のディレクトリを監視し、ファイルが更新されたら集計用DBにデータをロードするようにします\n\n今回は、こんな定義ファイルをyamlでたくさん用意しておき、処理対象のファイル名とマッチしたら集計用DBにDDLを発行...という[Luigiタスクを作って](https://github.com/yktakaha4/analysis-docker/blob/master/volumes/analysis-batch/batch/analysis/load_files.py)、実行するようにしました\n\n```yaml:定義ファイルイメージ（ユニケージ用）\npattern: \"/ITEMS$\"\nformat:\n  encoding: \"utf-8\"\n  newline: \"\\n\"\n  skip: 0\n  delimiter: \" \"\n  doublequote: false\n  escapechar: \"\"\n  skipinitialspace: false\n  replacers:\n    - pattern: \"^_$\"\n      newvalue: \"\"\ntable_name: \"items\"\nddl: |\n  drop table if exists {table_name};\n  create table {table_name} (\n    item_id varchar(3) not null,\n    name varchar(255) not null,\n    price int not null,\n    item_type varchar(1) not null,\n    primary key(item_id)\n  );\n```\n\n```yaml:オマケ：CSVファイルの読み込み定義\nformat:\n  encoding: \"utf-8\"\n  newline: \"\\n\"\n  skip: 1\n  delimiter: \",\"\n  doublequote: true\n  escapechar: \"\\\"\"\n  skipinitialspace: false\n```\n\n# 作ったもの\n\nhttps://github.com/yktakaha4/analysis-docker\n\n社内で使っているものをそのまま公開はアレでしたので、今回説明した内容に機能を絞ったものをGithubに公開しました:octocat:\n以下、簡単に解説していきます\n\n## 初期構築・起動・停止\n\n任意のディレクトリで以下のコマンドを実行してください\n\n```terminal\n~❯ git clone https://github.com/yktakaha4/analysis-docker.git\n~❯ cd analysis-docker\n\n# ビルド実行後、Redash用、集計結果保持用のDBをそれぞれ作成\n❯ docker-compose build\n❯ docker-compose run --rm server create_db\n❯ docker-compose run --rm luigi create_db\n\n# 起動・停止（２回目以降は以下のみでOK）\n❯ docker-compose up\n❯ docker-compose down\n```\n\n## Jupyter確認\n\nlocalhost:25002にアクセスすると、JupyterLabが起動します\ndata/watch配下を確認すると、サンプルファイルが入っているのが確認できます\n\n![JupyterLab](https://qiita-image-store.s3.amazonaws.com/0/106259/d19d25dc-9769-a12b-a86b-9b27d0356baa.png)\n\n使い方などは話がそれるので割愛\n\n## Luigiとinotifywait確認\n\n別のターミナルを立ち上げて、テスト用ファイルを更新してみます\ninotifywaitにより更新が検知され、集計DBにデータがロードされます\n\n```terminal\n# 先ほどと同じディレクトリに移動して実行すること\n❯ ll volumes/analysis-data/watch/ITEMS\n-rw-r--r--  1 tkhs  staff    61B Dec 16 13:00 volumes/analysis-data/watch/ITEMS\n❯ touch volumes/analysis-data/watch/ITEMS\n\n# docker-composeを実行した方のターミナルに、タスクの実行ログが表示される\n（略）\nluigi_1       | ===== Luigi Execution Summary =====\nluigi_1       |\nluigi_1       | Scheduled 1 tasks of which:\nluigi_1       | * 1 ran successfully:\nluigi_1       |     - 1 analysis.LoadFilesTask(source_files_path=/root/analysis/data/watch/ITEMS, definition_files_path=/root/analysis/batch/configs/load_files)\nluigi_1       |\nluigi_1       | This progress looks :) because there were no failed tasks or missing dependencies\nluigi_1       |\nluigi_1       | ===== Luigi Execution Summary =====\n（略）\n```\n\nlocalhost:25001にアクセスすると、タスクの実行結果を確認することができます\n\n![LuigiWebコンソール](https://qiita-image-store.s3.amazonaws.com/0/106259/9a7ca829-722e-94a9-e6d0-dbdcd18465f6.png)\n\n## Redash確認\n\n最後に、localhost:25000にアクセスしてRedashを起動し、データが正しく登録されたか確認します\n\n初期設定をして...（ローカルアカウントの設定なので、忘れなければ任意のもので多分よいです）\n\n![Redash初期設定](https://qiita-image-store.s3.amazonaws.com/0/106259/13d7d15a-2248-d769-938e-cf83e2044ecf.png)\n\nConnect a Data Source > New Data Source > PostgreSQL からデータソースを作成して...\n\n| 名前 | 値 |\n| --- | --- |\n| Name | summary（任意） |\n| Host | postgres |\n| User | postgres |\n| Database Name | summary |\n\n<img width=\"1072\" alt=\"Redashデータソース作成\" src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/851f0aec-a950-22b3-5558-cd90b39cf82f.png\">\n\nsummaryのitemsテーブルにクエリを打ってみます\nユニケージ形式だったファイルが正しく読み込めていることが確認できますね！\n\n<img width=\"1072\" alt=\"Redashクエリ\" src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/b7049a68-5ff8-078b-a582-9e75166eb652.png\">\n\n取得したデータを元に棒グラフを作り、りんごの価格が一番高いことを視覚的に明らかにした瞬間です📊🤔\n\n<img width=\"1072\" alt=\"Redashグラフ\" src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/21dd661a-5ca7-8510-2e66-87ee7559c0bc.png\">\n\nファイルを更新後クエリを再実行すれば、直ちにグラフを再生成することもできます\nちょっとしたことではありますが、分析作業を繰り返すうちにきっとジャブのように効いてくるものと思います\n\n<img width=\"990\" alt=\"Redashグラフ2\" src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/ae31f32e-a26d-50bf-e69c-9581e7900ea9.png\">\n\n## docker-compose.ymlについて\n\nhttps://github.com/yktakaha4/analysis-docker/blob/master/docker-compose.yml\n\nコンテナと役割についてまとめてみました\n実物としては、[こちら](https://github.com/getredash/redash/blob/master/docker-compose.production.yml)や[こちら](https://github.com/axiom-data-science/docker-luigi/blob/master/Dockerfile.alpine)や[こちら](https://qiita.com/tsnb/items/4893bc46bbdff4f97dfb)、[こちら](https://github.com/docker-library/postgres/blob/master/Dockerfile-alpine.template)など、既にある実装を ~~パクリ~~ 調べながら読んで内容理解に努めました\n\n| コンテナ名 | 役割 | 備考 |\n| --- | --- | --- |\n| server、<br>worker、<br> redis | Redashが使うやつです（適当） | http://localhost:25000/ |\n| postgres | Redash内部データと集計データ保持を兼ねたDB |　 |\n| luigi | Luigiとinotifywait | http://localhost:25001/<br>複数プロセス実行のため[supervisord](http://www.itmedia.co.jp/enterprise/articles/1602/17/news004.html)を使用 |\n| jupyterlab | JupyterLab | http://localhost:25002/ |\n\n動くこと優先で作ったためイケてない部分も色々ありそうなので、使いながらよくしていきたいと思っています\n\n# 所感\n\n思ったことを箇条書きで...\n\n- 当初は大量のコマンドと定義ファイルの書式、スケールの大きな概要の説明に圧倒されていましたが、１コンテナ≒1プロセスなど、原則が頭に入ってくるとイメージが掴みやすくなったように思います\n    - まずは、概要の話を読んでから取り組むことをお勧めします\n- 情報を上から読んでいってできるようになる、というよりも、実現したい機能を洗い出して、それぞれについてどのようなコンテナがあれば実現可能か考えるのが大事です。[DockerHub](https://hub.docker.com/)に既存のものがないか調べるのも重要です\n- それにつけても、こうやって一度定義を書いてしまえば誰でも/どこでも環境構築ができて、それが無料で自分でも使うことができるというのは、本当にすごい時代になったなあ...と思います\n\n# 今後の展望\n\n現時点でまだできてない部分をまとめます\n\n- crontabの導入\n    - データ分析作業がまだ試行錯誤の段階で定型作業にしたいものがなかったため、後回しにしてたら公開に間に合いませんでした...\n    - [こちら](https://qiita.com/YuukiMiyoshi/items/bb7f14436d60d4bd8a8b)などを見てもいくつか選択肢がありそうなので、調べつつ近く実装したいと思います\n- 環境変数/資格情報の渡し方\n    - AWSの各種サービスに繋ぎに行くために何かしら渡す必要がありますが、起動時にいい感じに注入する方法が確立できておらず、今回はバッサリはしょりました...\n- AWS上での運用\n    - 特にRedashはアカウント管理ができるということもあり、サーバで運用できるとデータ共有の面でメリットが大きいので、[色々調べつつ](https://dev.classmethod.jp/cloud/aws-docker-service-catalog/)是非ともチャレンジしたいです！\n- データ分析をガンガンやる\n    - 正直やっとスタートラインに立った、という話なので、環境を作って満足...とならないよう、頑張りたいと思います😇\n\n---\n\n[ハンズラボ Advent Calendar 2018](https://qiita.com/advent-calendar/2018/handslab) 明日は、[弊社ブログ](https://www.hands-lab.com/contents/)でも活躍されている@yuka_jyoteiさんです！\n",
      "coediting": false,
      "comments_count": 0,
      "created_at": "2018-12-16T21:23:04+09:00",
      "group": null,
      "id": "ebc8aa6987de82f93fba",
      "likes_count": 21,
      "private": false,
      "reactions_count": 0,
      "stocks_count": 16,
      "tags": [
        {
          "name": "Python",
          "versions": []
        },
        {
          "name": "Docker",
          "versions": []
        },
        {
          "name": "Jupyter",
          "versions": []
        },
        {
          "name": "redash",
          "versions": []
        },
        {
          "name": "Luigi",
          "versions": []
        }
      ],
      "title": "Docker + Python + Redashでおひとり様データ分析基盤を作る",
      "updated_at": "2018-12-20T07:01:07+09:00",
      "url": "https://qiita.com/yktakaha4/items/ebc8aa6987de82f93fba",
      "user": {
        "description": "",
        "facebook_id": "",
        "followees_count": 26,
        "followers_count": 23,
        "github_login_name": "yktakaha4",
        "id": "yktakaha4",
        "items_count": 27,
        "linkedin_id": "",
        "location": "",
        "name": "Yuuki Takahashi",
        "organization": "LAPRAS株式会社",
        "permanent_id": 106259,
        "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/profile-images/1600489516",
        "team_only": false,
        "twitter_screen_name": "yktakaha4",
        "website_url": "https://yktakaha4.github.io/"
      },
      "page_views_count": null,
      "team_membership": null,
      "organization_url_name": null,
      "slide": false
    },
    {
      "rendered_body": "\n<h1>\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n\n<p>勉強で作ったWebアプリのご紹介兼備忘録となります<br>\n参考にした資料を多く貼るよう心がけたので、似たような構成で何か作ろうとされてる方の一助になれば幸いです</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/bdb3c11eb8bdf51c3f75697fa6171254ada3f06c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130363235392f63353665376561362d376433392d336435302d643236392d6562396534666337366432392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2Fc56e7ea6-7d39-3d50-d269-eb9e4fc76d29.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=bf047012a73efdac27cc302382b61fa7\" alt=\"Watson Music\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/c56e7ea6-7d39-3d50-d269-eb9e4fc76d29.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2Fc56e7ea6-7d39-3d50-d269-eb9e4fc76d29.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=3d5ade0fb98b8ce9ff453d41492a6eee 1x\" loading=\"lazy\"></a></p>\n\n<h2>\n<span id=\"どんなアプリ\" class=\"fragment\"></span><a href=\"#%E3%81%A9%E3%82%93%E3%81%AA%E3%82%A2%E3%83%97%E3%83%AA\"><i class=\"fa fa-link\"></i></a>どんなアプリ？</h2>\n\n<p>🤔 オフィスにBGMを流したいけど、音楽の趣味はみんな違う...公平にシャッフルしても脈絡のない選曲になるし、何かいい方法はないかな...</p>\n\n<p>😃 そうだ! Watsonに曲調や今の気分をリクエストして、流す曲を決めてもらえばいいんだ!<br>\n🤗 仕事が忙しすぎて手が離せない人も、音声でリクエストを送れるようにすれば万事解決ですね!!</p>\n\n<ul>\n<li>一応調べたのですが、<a href=\"http://www.jasrac.or.jp/info/bgm/\" rel=\"nofollow noopener\" target=\"_blank\">事務所、工場等での主として従業員のみを対象としたBGM利用は無料</a>らしいです</li>\n<li>各自イヤホンで好きなもの聴けばいいじゃん...と思った方は鋭い、あなたは正しいです😭</li>\n</ul>\n\n<h2>\n<span id=\"経緯\" class=\"fragment\"></span><a href=\"#%E7%B5%8C%E7%B7%AF\"><i class=\"fa fa-link\"></i></a>経緯</h2>\n\n<ul>\n<li>\n<a href=\"https://qiita.com/yktakaha4/items/d14d643db28bc63c7b3f\" id=\"reference-7693289b70507d48250f\">先日いじった</a>Retrieve And Rankが<a href=\"https://www.ibm.com/watson/services/retrieve-and-rank/\" rel=\"nofollow noopener\" target=\"_blank\">Deprecatedとなり</a>、後継として<a href=\"https://www.ibm.com/watson/jp-ja/developercloud/discovery.html\" rel=\"nofollow noopener\" target=\"_blank\">Discovery</a>が出てきたので、使ってみようと思った\n\n<ul>\n<li>\n<a href=\"https://qiita.com/ishida330/items/b823d7c5b55806f04242\" id=\"reference-b6be757038e707c5a664\">この投稿</a>を読んで、使うだけならそこまで難しくなさそうと思えたのが大きかったです</li>\n</ul>\n</li>\n<li>長らくjQueryしか使えなかったが、<a href=\"https://qiita.com/mizchi/items/4d25bc26def1719d52e6\" id=\"reference-9158d178967026b076fb\">こちらの投稿</a>を読んで<del>魂が震えた</del>React(とその周辺技術)を知りたくなった\n\n<ul>\n<li>AngularJSと迷いましたが、なんとなく敷居が低そうなこっちを選びました</li>\n</ul>\n</li>\n<li>フロントからバックエンドまでひとりで設計/実装したらどのようなものが作れるか試したかった\n\n<ul>\n<li>最後まで読んでいただくと分かりますが、Watsonはそこまで使い込めていません...</li>\n<li>役に立つアプリを作る &lt; 未経験技術のキャッチアップ の優先度で取り組みました</li>\n</ul>\n</li>\n</ul>\n\n<h2>\n<span id=\"開発ポリシー\" class=\"fragment\"></span><a href=\"#%E9%96%8B%E7%99%BA%E3%83%9D%E3%83%AA%E3%82%B7%E3%83%BC\"><i class=\"fa fa-link\"></i></a>開発ポリシー</h2>\n\n<h3>\n<span id=\"個々のサービスについて深掘りするよりシステムとしてちゃんとまとまるように作る\" class=\"fragment\"></span><a href=\"#%E5%80%8B%E3%80%85%E3%81%AE%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E6%B7%B1%E6%8E%98%E3%82%8A%E3%81%99%E3%82%8B%E3%82%88%E3%82%8A%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%81%A8%E3%81%97%E3%81%A6%E3%81%A1%E3%82%83%E3%82%93%E3%81%A8%E3%81%BE%E3%81%A8%E3%81%BE%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E4%BD%9C%E3%82%8B\"><i class=\"fa fa-link\"></i></a>✨個々のサービスについて深掘り🕳するより、システムとしてちゃんとまとまる👪ように作る✨</h3>\n\n<ul>\n<li>例えば、<a href=\"https://qiita.com/yktakaha4/items/d14d643db28bc63c7b3f\">前回</a>はWatsonへのデータ取り込みなどに手操作(Curlコマンド打つ)が介在してしまったので、全部バッチ化&amp;Web画面からキックできるようにしました</li>\n<li>構成についても、<del>前回のように訳も分からずNode-REDを使って消耗したりせず、</del>フロント：JS、バックエンド：Javaでできるだけ統一しました</li>\n<li>Discoveryに対するカスタム辞書適用や、MP3格納ディレクトリおよびアプリサーバーのクラウド化など、押さえておきたかったところもあるのですが、実装よりも環境構築の側面が強そうだったので、上記方針よりスコープから外しました</li>\n</ul>\n\n<h1>\n<span id=\"ユースケース\" class=\"fragment\"></span><a href=\"#%E3%83%A6%E3%83%BC%E3%82%B9%E3%82%B1%E3%83%BC%E3%82%B9\"><i class=\"fa fa-link\"></i></a>ユースケース</h1>\n\n<p>1. ユーザー(オフィスの人々)が、ファイルサーバーに各自MP3を格納する</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/f82fcb7f2e1783d15a3f9d03cb1a542be74e07a3/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130363235392f33396266623433302d303939622d386665622d626335642d6362353766633465626534382e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F39bfb430-099b-8feb-bc5d-cb57fc4ebe48.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=c8bfba96439fcbb76fcbb4a5fb0f60da\" alt=\"MP3ファイル\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/39bfb430-099b-8feb-bc5d-cb57fc4ebe48.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F39bfb430-099b-8feb-bc5d-cb57fc4ebe48.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=e4660535d173eccf11db31df4d196ef2 1x\" loading=\"lazy\"></a></p>\n\n<p>2. ブラウザからWatson Musicにアクセスし、音楽取り込みボタンを押すと、ファイルサーバーのMP3がWatsonに取り込まれ、検索可能となる</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/1589dbd0cf463c16daa92d30c6245670c6afe920/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130363235392f61373366626633392d313435622d613936652d363036342d3039343263636535393832382e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2Fa73fbf39-145b-a96e-6064-0942cce59828.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=2dae8788ae464366dc867e577510216a\" alt=\"バッチ実行\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/a73fbf39-145b-a96e-6064-0942cce59828.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2Fa73fbf39-145b-a96e-6064-0942cce59828.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=bdd2b68d3dccf2f72736c535b043c430 1x\" loading=\"lazy\"></a></p>\n\n<p>3. Watson Musicに選曲のリクエストを投稿すると、Watsonが流す曲を決めて再生する。リクエストの投稿や曲の再生状況は、Watson Musicを開いている全てのユーザーのブラウザに即座に反映される</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/2273a6af4406ea7e9657db0d5896a91fdcb80a64/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130363235392f39613833663134392d366664652d386238362d613465662d3737373563363562623163652e676966\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/9a83f149-6fde-8b86-a4ef-7775c65bb1ce.gif\" alt=\"即時反映\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/9a83f149-6fde-8b86-a4ef-7775c65bb1ce.gif\" loading=\"lazy\"></a></p>\n\n<p>4. 再生中の曲が気に入った/気に入らなかった場合、ボタンを押してWatsonにフィードバックを行うことができる。学習ボタンを押すと、Watsonにフィードバックが取り込まれ、検索結果が改善される</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/c426ed9b3f262bb23de7c41f26f7931f195db254/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130363235392f61636337653666322d373837312d663436342d643933652d3965343035353964653334382e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2Facc7e6f2-7871-f464-d93e-9e40559de348.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=ecd77511b0e4fe2ea5280101111b3132\" alt=\"フィードバック\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/acc7e6f2-7871-f464-d93e-9e40559de348.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2Facc7e6f2-7871-f464-d93e-9e40559de348.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=8e794ac3828e273c2b61a687d6eb93ce 1x\" loading=\"lazy\"></a></p>\n\n<p>5. 選曲のリクエストおよびフィードバックはGoogle Homeからも行うことができる</p>\n\n<table>\n<thead>\n<tr>\n<th style=\"text-align: left\">呼びかけ方</th>\n<th style=\"text-align: left\">アクション</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: left\">Watsonに投稿 XXXXX</td>\n<td style=\"text-align: left\">XXXXXで選曲リクエストを投稿</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">Watsonにフィードバック 気に入った</td>\n<td style=\"text-align: left\">流れている曲にフィードバック(気に入った)</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">Watsonにフィードバック 気に入らない</td>\n<td style=\"text-align: left\">流れている曲にフィードバック(気に入らない)</td>\n</tr>\n</tbody>\n</table>\n\n<h1>\n<span id=\"システム構成\" class=\"fragment\"></span><a href=\"#%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E6%A7%8B%E6%88%90\"><i class=\"fa fa-link\"></i></a>システム構成</h1>\n\n<p>Javaと他レイヤとのインターフェースとなっているものまで書いたらだいぶゴチャッとしてしまいましたが、<br>\n基本的にMySQLとEclipseを用意して、IBM Cloud上にWatsonの環境を用意すれば動かせます</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/3919578262e9b63a787fb0999f580da4acc6ea16/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130363235392f30363836633032622d653235312d316530312d663537622d6364626435643862666464332e6a706567\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F0686c02b-e251-1e01-f57b-cdbd5d8bfdd3.jpeg?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=a77750ca78ffe6a6c85c703faf900c90\" alt=\"構成図.jpeg\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/0686c02b-e251-1e01-f57b-cdbd5d8bfdd3.jpeg\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F0686c02b-e251-1e01-f57b-cdbd5d8bfdd3.jpeg?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=05db0c5b8c0c317edb9c2cbc89765fb4 1x\" loading=\"lazy\"></a></p>\n\n<h2>\n<span id=\"サーバサイド\" class=\"fragment\"></span><a href=\"#%E3%82%B5%E3%83%BC%E3%83%90%E3%82%B5%E3%82%A4%E3%83%89\"><i class=\"fa fa-link\"></i></a>サーバサイド</h2>\n\n<p>Spring Bootを中心に構築しました。DBアクセスには<a href=\"http://www.mybatis.org/mybatis-3/ja/\" rel=\"nofollow noopener\" target=\"_blank\">MyBatis</a>を使いましたが、Connectionのことなど考えずによく、楽でした(正しくトランザクション制御できているのか若干不安ではありますが...)</p>\n\n<h3>\n<span id=\"バッチ\" class=\"fragment\"></span><a href=\"#%E3%83%90%E3%83%83%E3%83%81\"><i class=\"fa fa-link\"></i></a>バッチ</h3>\n\n<ul>\n<li>\n<a href=\"https://projects.spring.io/spring-batch/\" rel=\"nofollow noopener\" target=\"_blank\">Spring Batch</a>で延々とコーディングしました...色々試行錯誤したせいもあり、工数の2/3くらいこちらに掛かりました\n\n<ul>\n<li>概念については<a href=\"https://sites.google.com/site/soracane/home/springnitsuite/spring-batch\" rel=\"nofollow noopener\" target=\"_blank\">こちらのページ</a>がよくまとまっておりおすすめです</li>\n</ul>\n</li>\n<li>\n<a href=\"http://www.jthink.net/jaudiotagger/\" rel=\"nofollow noopener\" target=\"_blank\">Jaudiotagger</a>で抽出したMP3タグ情報を使って、以下のような文章を生成しました\n\n<ol>\n<li>アーティスト名、アルバム名、ジャンル等にてWikipediaを検索し、記事を取得\n\n<ul>\n<li>MediaWiki API経由でアクセスしました。<a href=\"https://qiita.com/yubessy/items/16d2a074be84ee67c01f\" id=\"reference-8c80ad1448587d8806d9\">こちらの投稿</a>がわかりやすいです</li>\n<li>レスポンスは<a href=\"http://www.akirakoyasu.net/2012/02/05/jerey-client-useful-http-client/\" rel=\"nofollow noopener\" target=\"_blank\">Jersey Clientを使って</a>HTMLで受け取り、<a href=\"https://jsoup.org/\" rel=\"nofollow noopener\" target=\"_blank\">jsoup</a>でテキストを抽出しました</li>\n<li>\n<a href=\"https://qiita.com/yktakaha4/items/8cf9bc4b1910f0b5ca45\" id=\"reference-879c6431bc377b69e34a\">先日の投稿</a>でも少し書きましたが、どうしても化けてしまうタグが少しばかりあり、諦めました...</li>\n</ul>\n</li>\n<li>MP3に設定されているアルバムアートワークにて、<a href=\"https://www.ibm.com/watson/jp-ja/developercloud/visual-recognition.html\" rel=\"nofollow noopener\" target=\"_blank\">Watson Visual Recognition</a>にアクセスし、画像分析結果を取得し、クラス分類でWikipediaの記事を取得\n\n<ul>\n<li>\n<a href=\"https://www.ibm.com/watson/developercloud/visual-recognition/api/v3/java.html?java\" rel=\"nofollow noopener\" target=\"_blank\">Java SDK</a>が提供されているので、思ってたより簡単にできました。(クラス等の説明がほぼ無いのはなんですが...)</li>\n</ul>\n</li>\n<li>曲名にて歌詞検索サイトの<a href=\"http://j-lyric.net/\" rel=\"nofollow noopener\" target=\"_blank\">J-Lyric.net</a>から歌詞を取得\n\n<ul>\n<li>\n<a href=\"http://j-lyric.net/info/e374.html\" rel=\"nofollow noopener\" target=\"_blank\">利用規約</a>を読んだ感じダメという感じでもなさそうだったので、jsoupでやってみました。<a href=\"https://qiita.com/nezuq/items/c5e827e1827e7cb29011\" id=\"reference-d51042e8d71e816376a6\">この投稿</a>も読むと良いと思います</li>\n</ul>\n</li>\n<li>1.で取得したWikipediaの記事について、MP3タグと類似度の高い記事を紐付け\n\n<ul>\n<li>1.だけだと、Wikipediaの検索エンジン依存になってしまうので、<a href=\"https://qiita.com/ssaito/items/aae5522618d4296c5178\" id=\"reference-ba41ad11047b865bba21\">こちらの投稿のように</a>レーベンシュタイン距離を使って、表記ぶれがあっても記事を紐付けられるようにしました</li>\n</ul>\n</li>\n<li>1.で取得したWikipediaの記事内の各リンク(=別のWikipedia記事のタイトル)に対して、<a href=\"http://sonickun.hatenablog.com/entry/2014/11/12/122806\" rel=\"nofollow noopener\" target=\"_blank\">BM25</a>を用いて重み付けを行い、記事ごとに数値の高いものも関連記事として紐付け\n\n<ul>\n<li>申し訳程度の機械学習要素になります...<a href=\"https://github.com/yktakaha4/watson-music/blob/master/src/main/java/com/github/yktakaha4/watsonmusic/service/TextSimilarityService.java\" rel=\"nofollow noopener\" target=\"_blank\">TextSimilarityServiceクラス</a>がそれにあたります</li>\n</ul>\n</li>\n<li>MP3タグ情報をそのまま文章として登録\n\n<ul>\n<li>本当は<a href=\"https://developer.gracenote.com/ja/web-api\" rel=\"nofollow noopener\" target=\"_blank\">Gracenote Web API</a>を使いたかったのですが、いつ試しても<a href=\"https://developer.gracenote.com/user/register\" rel=\"nofollow noopener\" target=\"_blank\">API Keyを発行してもらえず</a>断念しました...</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>生成された各文章を結合し、Watson Discoveryに登録\n\n<ul>\n<li>こちらも<a href=\"https://www.ibm.com/watson/developercloud/discovery/api/v1/java.html?java\" rel=\"nofollow noopener\" target=\"_blank\">Java SDK</a>があるので、Visual Recognition同様に手軽に使えます</li>\n<li>ドキュメント形式は幾つかから選べますが、扱いやすそうなJSONにしました</li>\n</ul>\n</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">Discoveryに投入するJSON</span></div>\n<div class=\"highlight\"><pre><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"path\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"I LOVE U</span><span class=\"se\">\\/</span><span class=\"s2\">03 03. 未来.mp3\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"trackLength\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">322</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"encoding\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"mp3\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"musicTags\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nl\">\"ALBUM_ARTIST_SORT\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"ミスターチルドレン\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"TITLE\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"未来\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"YEAR\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"2005\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"TRACK\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"3\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"ARTIST\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Mr.Children\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"ALBUM_ARTIST\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Mr.Children\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"ENCODER\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"iTunes v6.0.0.18\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"ARTIST_SORT\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"ミスターチルドレン\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"GENRE\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Pop\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"ALBUM\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"I LOVE U\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"COVER_ART\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"image</span><span class=\"se\">\\/</span><span class=\"s2\">png::474078\"</span><span class=\"w\">\n  </span><span class=\"p\">},</span><span class=\"w\">\n  </span><span class=\"nl\">\"musicId\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">821</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"text\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"2005 3  I LOVE U Mr.Children Pop iTunes v6.0.0.18 image</span><span class=\"se\">\\/</span><span class=\"s2\">png::474078 ミスターチルドレン Mr.Children &gt; I ♥ U 本来の表記は「I ♥ U」です。この記事に付けられた題名は、技術的な制限により、記事名の制約から不正確なものとなっています。 『I ♥ U』 Mr.Children の スタジオ・アルバム リリース 2005年9月21日 ジャンル ロック 時間 63分58秒 レーベル トイズファクトリー プロデュース 小林武史 チャート最高順位 週間1位（オリコン） 2005年10月度月間2位（オリコン） 2005年度年間8位（オリコン） オリコン歴代アルバムランキング226位 ゴールドディスク ミリオン（日本レコード協会） Mr.Children 年表 シフクノオト （2004年） ...\"</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"text\">\n<div class=\"code-lang\"><span class=\"bold\">BM25で関連するドキュメントを抽出</span></div>\n<div class=\"highlight\"><pre><code>2018-05-15 21:41:18.209  INFO SimpleStepHandler     : Executing step: [enrichTextsByWikipedia]\n2018-05-15 21:41:21.288  INFO TextSimilarityService    : text similarity service initialized: k1 = 2.0, b = 0.75, avgdl = 507.0\n2018-05-15 21:41:21.288  INFO RelatedWikiPageProcessor  : similarity threshold: relevance &gt; 0.05 and top 5 pages\n2018-05-15 21:41:21.555  INFO RelatedWikiPageProcessor  : related wikipages: /05 -&gt; (坂本龍一,0.060225320883512914), (アウト・オブ・ノイズ,0.05005133843882276)\n2018-05-15 21:41:23.769  INFO RelatedWikiPageProcessor  : related wikipages: B.A.N.D. -&gt; (YOUR SONG IS GOOD,0.12316413842154202), (THE ACTION,0.07945721944782655), (NAYUTAWAVE RECORDS,0.06290821951833057), (3月3日,0.06056176459670045), (カクバリズム,0.06056176459670045)\n2018-05-15 21:41:23.943  INFO RelatedWikiPageProcessor  : related wikipages: CAR SONGS OF THE YEARS -&gt; (奥田民生,0.0633027466742595)\n2018-05-15 21:41:24.129  INFO RelatedWikiPageProcessor  : related wikipages: BETTER SONGS OF THE YEARS -&gt; (奥田民生,0.064631488592711), (2008年,0.05039573681355406), (Fantastic OT9,0.05024107009270254), (僕らのワンダフルデイズ サウンドトラック,0.05024107009270254), (10月29日,0.05011415549211778)\n2018-05-15 21:41:24.321  INFO RelatedWikiPageProcessor  : related wikipages: 井上陽水奥田民生 -&gt; (井上陽水,0.05551309994270471), (奥田民生,0.05410484019209229)\n2018-05-15 21:41:27.536  INFO RelatedWikiPageProcessor  : related wikipages: COBALT HOUR -&gt; (1975年,0.05014774776777056)\n2018-05-15 21:41:28.770  INFO RelatedWikiPageProcessor  : related wikipages: Cymbals -&gt; (沖井礼二,0.09956893392254533), (矢野博康,0.05183281021348527), (土岐麻子,0.05076091736900876)\n2018-05-15 21:41:28.922  INFO RelatedWikiPageProcessor  : related wikipages: The band apart -&gt; (1,0.05656246896271063)\n2018-05-15 21:41:29.520  INFO RelatedWikiPageProcessor  : related wikipages: 東京事変 -&gt; (椎名林檎,0.05006418542278235)\n2018-05-15 21:41:29.643  INFO RelatedWikiPageProcessor  : related wikipages: Cornelius -&gt; (コーネリアス・ヴァンダービルト,0.11629418762801481), (猿の惑星,0.07515443060345392)\n2018-05-15 21:41:30.052  INFO RelatedWikiPageProcessor  : related wikipages: FOR YOU -&gt; (フォー・ユー,0.09920778243902893)\n2018-05-15 21:41:30.305  INFO RelatedWikiPageProcessor  : related wikipages: The Fantastic Plastic Machine -&gt; (Fantastic Plastic Machine,0.14436623255578224), (1997年,0.05321008399144652), (10月10日,0.0515236509976896), (日本コロムビア,0.05103357778415948), (スタジオ・アルバム,0.050605023893409457)\n2018-05-15 21:41:30.607  INFO RelatedWikiPageProcessor  : related wikipages: Fantôme -&gt; (宇多田ヒカル,0.05042149540012731), (2016年,0.050066569362434594)\n2018-05-15 21:41:31.399  INFO RelatedWikiPageProcessor  : related wikipages: 小袋成彬 -&gt; (宇多田ヒカル,0.050095502755357096)\n2018-05-15 21:41:31.884  INFO RelatedWikiPageProcessor  : related wikipages: Fishmans -&gt; (ボーカル,0.05003627945421543)\n2018-05-15 21:41:31.936  INFO RelatedWikiPageProcessor  : related wikipages: 宇宙 日本 世田谷 -&gt; (佐藤伸治,0.342280868725777), (フィッシュマンズ,0.07414079951506487), (LONG SEASON,0.05398063786198843), (スタジオ・アルバム,0.05126803822945513), (オリコンチャート,0.050995225603264395)\n2018-05-15 21:41:32.087  INFO RelatedWikiPageProcessor  : related wikipages: FreeTEMPO -&gt; (DJ,0.0502637876950748)\n2018-05-15 21:41:32.153  INFO RelatedWikiPageProcessor  : related wikipages: 空気公団 -&gt; (トイズファクトリー,0.05230039242246507), (SPACE SHOWER NETWORK,0.050821297098439105), (ポップ・ロック,0.05036436461861145), (ピアノ,0.050052459677419246)\n2018-05-15 21:41:50.949  INFO RelatedWikiPageProcessor  : related wikipages: スピッツ -&gt; (犬,0.14141142226123585), (プラネタリウム,0.06426989664685567)\n2018-05-15 21:41:51.107  INFO RelatedWikiPageProcessor  : related wikipages: ハイファイ新書 -&gt; (ハイファイ,0.14901153285452806), (オリコン,0.09449390740803565), (2009年,0.0702335178109741), (シンクロニシティーン,0.06670556020884505), (シフォン主義,0.05874506473049359)\n2018-05-15 21:41:51.149  INFO RelatedWikiPageProcessor  : related wikipages: メグ -&gt; (MEG,0.2621526213897821), (Meg,0.09827216190077466), (MEGU,0.05723108345597966), (めぐみ,0.05723108345597966)\n2018-05-15 21:41:51.220  INFO RelatedWikiPageProcessor  : related wikipages: 夢みる惑星 -&gt; (佐藤史生,0.09846793349530256), (小学館,0.08587651861800526), (プチフラワー,0.08097989398268286), (小学館文庫,0.05744113400613156), (少女漫画,0.05149429975735787)\n2018-05-15 21:41:51.310  INFO RelatedWikiPageProcessor  : related wikipages: 安全地帯 -&gt; (ゲーメスト,0.3562589491573924), (吉野二郎,0.3562589491573924), (緩衝地帯,0.3562589491573924), (路面電車,0.3066400828610433), (日本映画,0.2776149067493823)\n2018-05-15 21:41:51.399  INFO RelatedWikiPageProcessor  : related wikipages: 岸田メル -&gt; (イラストレーター,0.05039222495893547)\n2018-05-15 21:41:51.651  INFO RelatedWikiPageProcessor  : related wikipages: 比屋定篤子 -&gt; (1997年,0.05454346478565931), (笹子重治,0.054119433283179794), (那覇市,0.05110278474996579), (沖縄県,0.050697418856247733), (12月24日,0.050466135833929004)\n2018-05-15 21:41:51.674  INFO RelatedWikiPageProcessor  : related wikipages: 流線形 -&gt; (流れ,0.11173271371226531)\n2018-05-15 21:42:06.699  INFO RelatedWikiPageProcessor  : related wikipages: 相対性理論 -&gt; (時間,0.050505449840522756)\n2018-05-15 21:42:07.772  INFO RelatedWikiPageProcessor  : related wikipages: 青空百景 -&gt; (ムーンライダーズ,0.1363140503236836), (鈴木博文,0.054001764173099404), (1982年,0.05217094703759643), (MANIA MANIERA,0.05209252299043802), (鈴木慶一,0.050752580964901504)\n2018-05-15 21:42:07.874  INFO RelatedWikiPageProcessor  : related wikipages: 風街ろまん -&gt; (はっぴいえんど,0.05395896768196796)\n</code></pre></div>\n</div>\n\n<p>Cymbalsなんかうまくいってますが、スピッツや安全地帯はWikipediaの元記事の選択を失敗してるっぽいですね...</p>\n\n<h3>\n<span id=\"オンライン\" class=\"fragment\"></span><a href=\"#%E3%82%AA%E3%83%B3%E3%83%A9%E3%82%A4%E3%83%B3\"><i class=\"fa fa-link\"></i></a>オンライン</h3>\n\n<ul>\n<li>一画面構成でセッション管理等も不要のため、<a href=\"https://spring.io/guides/gs/rest-service/\" rel=\"nofollow noopener\" target=\"_blank\">REST APIを作成</a>しReact + Reduxからfetchするように設計\n\n<ul>\n<li>\n<a href=\"https://qiita.com/TEBASAKI/items/267c261db17f178e33eb\" id=\"reference-5dd27541ef7c100e7325\">こちらの記事</a>のように、<a href=\"/RestController\" class=\"user-mention js-hovercard\" title=\"RestController\" data-hovercard-target-type=\"user\" data-hovercard-target-name=\"RestController\">@RestController</a>を付けるだけでPOJOへのマッピングまでやってもらえるので大変爽快でした</li>\n<li>パスやI/Fの定義は<a href=\"http://wp.tech-style.info/archives/683\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a>が参考になりました。（予定は無いですが）例えばフロントにネイティブアプリが増えても使えるような設計ができたと思います</li>\n<li>APIの動作確認には<a href=\"https://insomnia.rest/\" rel=\"nofollow noopener\" target=\"_blank\">Insomnia</a>を使用しました。使いやすくていい感じです</li>\n</ul>\n</li>\n<li>ユーザーからの選曲リクエストを元にWatson Discoveryを検索し、返却されたドキュメントに紐づくファイルをローカルから取得して<a href=\"http://www.javazoom.net/javalayer/javalayer.html\" rel=\"nofollow noopener\" target=\"_blank\">JLayer</a>で再生\n\n<ul>\n<li>全て手で作ると大変なようですが、<a href=\"http://akameco.hatenablog.com/entry/2014/12/26/070721\" rel=\"nofollow noopener\" target=\"_blank\">BasicPlayerクラスを使う</a>と、何も考えなくても勝手に動きます。曲の順次再生も、再生終了時に呼び出されるコールバックを仕掛けておくだけで簡単に実現できました</li>\n</ul>\n</li>\n<li>新しくリクエストが登録されたり、次の曲が再生されるタイミングで画面を更新したかったので、<a href=\"http://jmesnil.net/stomp-websocket/doc/\" rel=\"nofollow noopener\" target=\"_blank\">STOMP Over WebSocket</a>にて適宜ソケット通信を実施\n\n<ul>\n<li>サーバーサイドは<a href=\"http://spring-boot-camp.readthedocs.io/ja/latest/06-STOMP.html\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a>および<a href=\"http://spring-boot-camp.readthedocs.io/ja/latest/07-STOMPOverWebSocket.html\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a>でできました。例えば、新しいリクエストが投稿された際には「GET_REQUESTS」という文字列を送り、クライアントに対応するREST APIを叩かせる...という形にしています</li>\n</ul>\n</li>\n<li>バッチ機能(音楽取り込み/フィードバック学習)を起動するREST APIを提供\n\n<ul>\n<li>バッチをそのままControllerから呼び出すと同期的に動いてしまうので、<a href=\"https://github.com/yktakaha4/watson-music/blob/master/src/main/resources/applicationContext.xml\" rel=\"nofollow noopener\" target=\"_blank\">applicationContext.xml</a>でSimpleAsyncTaskExecutorを管理Beanに加えておきます</li>\n</ul>\n</li>\n</ul>\n\n<h3>\n<span id=\"db\" class=\"fragment\"></span><a href=\"#db\"><i class=\"fa fa-link\"></i></a>DB</h3>\n\n<p><a href=\"http://ondras.zarovi.cz/sql/demo/\" rel=\"nofollow noopener\" target=\"_blank\">WWW SQL Designer</a>でER図ぽいものを書いてみました。ほんとに何でもブラウザでできますね...</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/c1404bb64c6e5250601a3581f5ad2111e69eaeca/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130363235392f36666135383833332d643131342d323365632d333961362d6334396432343537313765612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F6fa58833-d114-23ec-39a6-c49d245717ea.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=86fcb5dd39a24ea0c64b18df3cfca59a\" alt=\"ER図\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/6fa58833-d114-23ec-39a6-c49d245717ea.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F6fa58833-d114-23ec-39a6-c49d245717ea.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=be9fbe9c98871b2c2162b33d1d78dd6d 1x\" loading=\"lazy\"></a><br>\n※重要な列のみ抜粋</p>\n\n<ul>\n<li>Discoveryは、既存の文書ファイルをそのまま取り込んで検索するというアプローチも選択可能ですが、今回はMp3から文書を作る必要があったので、普通にRDBを使用</li>\n<li>music、music_tag、artworkに対して、Wikipedia等からtextとして取得した文字情報をtext_tagにて紐付け、music毎にdiscovery公開用のdocumentを生成\n\n<ul>\n<li>バッチ起動時にmissing_atに日付を入れ、走査中に見つかったもののみnull -&gt; 見つからなかったものはdiscoveryより削除など、それなりに実運用を考えて設計しました</li>\n<li>cacheは、WikipediaやVisual Recognitionへリクエストしまくって迷惑が掛かったり課金されないよう、HTTPレスポンスの生データを取っておくテーブルになります。実運用時はリクエスト後一定期間過ぎたものは消す...などしてもいいかも</li>\n</ul>\n</li>\n<li>requestは検索文を保持、trackは検索文により再生された曲を保持、feedbackは曲に対して気に入った/気に入らなかったが押された数を保持\n\n<ul>\n<li>学習処理時に「検索文に対して、あるドキュメント(今回は曲)がどれだけの関連度(Discoveryでは整数値)を持つか」というデータを作る必要があるため。関連度はバッチ内で気に入った/気に入らなかったの割合で計算します</li>\n</ul>\n</li>\n<li>DDL実行は、Spring Bootの起動時に<a href=\"https://github.com/yktakaha4/watson-music/blob/master/src/main/resources/applicationContext.xml\" rel=\"nofollow noopener\" target=\"_blank\">sqlファイルが呼ばれるように</a>して対応しました。今回のようにPoC的に開発するにはだいぶ便利に思えました</li>\n</ul>\n\n<h2>\n<span id=\"クライアントサイド\" class=\"fragment\"></span><a href=\"#%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E3%82%B5%E3%82%A4%E3%83%89\"><i class=\"fa fa-link\"></i></a>クライアントサイド</h2>\n\n<ul>\n<li>\n<a href=\"https://pingendo.com/\" rel=\"nofollow noopener\" target=\"_blank\">Pingendo</a>でレイアウトの枠組みを作成\n\n<ul>\n<li>今までHTMLとCSSは基本的に手で書いてたのですが、部品をドロップするだけでメキメキ画面が出来上がっていき大変楽でした\n\n<ul>\n<li>ただ、手で書いた経験がなかったら微修正などは難しいようにも思いました...</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>枠組みができたら、<a href=\"https://atom.io/\" rel=\"nofollow noopener\" target=\"_blank\">Atom</a>で開発サーバーを立ち上げて画面の部品ごとにReactに(勉強しながら)移植\n\n<ul>\n<li>初めて触れるものなので読み物から入りたいと思い、<a href=\"https://www.amazon.co.jp/dp/B07BBGSHJS/ref=dp-kindle-redirect?_encoding=UTF8&amp;btkr=1\" rel=\"nofollow noopener\" target=\"_blank\">React開発 現場の教科書</a>を買いました。概要や周辺知識を広く知るにはとてもよい本と思います</li>\n</ul>\n</li>\n<li>Reactに画面を移植したら、Reduxで動きを付ける\n\n<ul>\n<li>Redux-Sagaも導入したのですが、理解にあたり<a href=\"https://qiita.com/kuy/items/716affc808ebb3e1e8ac\" id=\"reference-218c723a84d2231fc8d2\">この投稿</a>に大変助けられました。これがなかったら諦めてたかもしれません...</li>\n<li>Node.jsの開発サーバーはlocalhost:3000、tomcatはlocalhost:8080で立ち上がるので、<a href=\"https://www.charlesproxy.com/\" rel=\"nofollow noopener\" target=\"_blank\">Charles</a>でリクエストのパス等を適宜変換しました\n\n<ul>\n<li>\n<a href=\"https://qiita.com/orzngo/items/76c95a4e3ff4c30b4d38\" id=\"reference-7d14abea7e0d5d325c8b\">こちらの投稿</a>を参考にしました。仕事で使っている<a href=\"https://www.telerik.com/fiddler\" rel=\"nofollow noopener\" target=\"_blank\">Fiddler</a>と比べても使いよく、<a href=\"https://www.charlesproxy.com/buy/purchase-charles-licenses/\" rel=\"nofollow noopener\" target=\"_blank\">つい購入</a>してしまいました💰</li>\n</ul>\n</li>\n<li>ステータスバーのアニメーションは<a href=\"https://reactcommunity.org/react-transition-group/\" rel=\"nofollow noopener\" target=\"_blank\">React Transition Group</a>、ソケット通信には<a href=\"https://github.com/sockjs/sockjs-client\" rel=\"nofollow noopener\" target=\"_blank\">SockJS-client</a>と<a href=\"https://github.com/jmesnil/stomp-websocket\" rel=\"nofollow noopener\" target=\"_blank\">STOMP.js</a>、時刻処理に<a href=\"https://github.com/moment/moment-timezone\" rel=\"nofollow noopener\" target=\"_blank\">Moment.js</a>、fetchのポリフィルに<a href=\"https://github.com/github/fetch\" rel=\"nofollow noopener\" target=\"_blank\">github/fetch</a>など、色々と触れて大変楽しかったです</li>\n</ul>\n</li>\n</ul>\n\n<h2>\n<span id=\"外部サービス\" class=\"fragment\"></span><a href=\"#%E5%A4%96%E9%83%A8%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9\"><i class=\"fa fa-link\"></i></a>外部サービス</h2>\n\n<h3>\n<span id=\"watson-discovery\" class=\"fragment\"></span><a href=\"#watson-discovery\"><i class=\"fa fa-link\"></i></a>Watson Discovery</h3>\n\n<ul>\n<li>環境構築については、<a href=\"https://qiita.com/ishida330/items/bb1bd4cf61da9b9c6da2\" id=\"reference-0d4bae2b5aaed86cfb84\">こちらの投稿</a>を参考に、環境作成 -&gt; コレクション作成 -&gt; 日本語化 &amp; エンリッチメント削除まではWebのツールから行いました</li>\n<li>Retrieve and Rankと比べて料金体系が変わっており、<a href=\"https://console.bluemix.net/docs/services/discovery/pricing-details.html#discovery-\" rel=\"nofollow noopener\" target=\"_blank\">ライトプラン</a>を使えばお金はかかりません</li>\n<li>\n<a href=\"https://console.bluemix.net/docs/services/discovery/getting-started.html#api-\" rel=\"nofollow noopener\" target=\"_blank\">ドキュメント</a>も日本語のちゃんとしたものが公開されているので、ご一読をお勧めします。<a href=\"https://console.bluemix.net/docs/services/discovery/query-reference.html#parameter-descriptions\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a>とか、結構役立つと思います\n\n<ul>\n<li>\n<a href=\"http://lucene.apache.org/solr/\" rel=\"nofollow noopener\" target=\"_blank\">Apache Solr</a>をカスタマイズした程度のものだったR&amp;Rと比べて、機能は絞られたのかもしれませんが、全体的な親切さはだいぶ向上したように感じます</li>\n</ul>\n</li>\n<li>一時期、全然ドキュメント入れてないのに以下の使用料の表示がぶっ壊れて容量オーバーみたいな警告が出てて、怖くなってサイズを減らしたのですが、今見たら直っててなんなんだ...と思いました</li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/91df2ed4c7606869f8e38b62c568efe17388350d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130363235392f37306239323430612d353435312d313262662d366636642d3261643936366566323564632e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F70b9240a-5451-12bf-6f6d-2ad966ef25dc.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=f0f2d7ec51adfbd87c10f24f0133c359\" alt=\"使用料\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/70b9240a-5451-12bf-6f6d-2ad966ef25dc.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F70b9240a-5451-12bf-6f6d-2ad966ef25dc.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=e6218a7cb9b6cbe83b9a59a6c70e6ade 1x\" loading=\"lazy\"></a></p>\n\n<h3>\n<span id=\"watson-visual-recognition\" class=\"fragment\"></span><a href=\"#watson-visual-recognition\"><i class=\"fa fa-link\"></i></a>Watson Visual Recognition</h3>\n\n<ul>\n<li>Discovery同様、<a href=\"https://www.ibm.com/watson/services/visual-recognition/pricing/index.html#pricing\" rel=\"nofollow noopener\" target=\"_blank\">ライトプラン</a>で十分なため無料で使えます</li>\n<li>Custom Classifierを作る要件でもなかったので、IBM Cloudにてサービス登録 -&gt; 資格情報の生成だけですぐに使えるようになりました</li>\n<li>肝心の戻り値はなんとも言えないものです...自分の使い方がよくないのも分かりますが、どういう使い方をするといいでしょうか...</li>\n</ul>\n\n<p>例：<br>\n<a href=\"https://camo.qiitausercontent.com/39e6a2f0a067dcafd8ea8dda135eed339ed75716/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130363235392f38346135316334312d383838312d656362622d303833612d3236313961316138626661382e6a706567\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F84a51c41-8881-ecbb-083a-2619a1a8bfa8.jpeg?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=21e5c7c9799b09c896410d48515a6a6a\" alt=\"c9f73f67.jpg\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/84a51c41-8881-ecbb-083a-2619a1a8bfa8.jpeg\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F84a51c41-8881-ecbb-083a-2619a1a8bfa8.jpeg?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=8becea57b337e7e4ed889d12f1d4c5a4 1x\" loading=\"lazy\"></a></p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">VisualRecognitionの戻り値</span></div>\n<div class=\"highlight\"><pre><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"images\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n    </span><span class=\"p\">{</span><span class=\"w\">\n      </span><span class=\"nl\">\"image\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"90C031B45C058E5F56A002ADEC186787\"</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"classifiers\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n        </span><span class=\"p\">{</span><span class=\"w\">\n          </span><span class=\"nl\">\"classes\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n            </span><span class=\"p\">{</span><span class=\"w\">\n              </span><span class=\"nl\">\"score\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">0.61599999999999999</span><span class=\"p\">,</span><span class=\"w\">\n              </span><span class=\"nl\">\"type_hierarchy\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"</span><span class=\"se\">\\/</span><span class=\"s2\">人</span><span class=\"se\">\\/</span><span class=\"s2\">人</span><span class=\"se\">\\/</span><span class=\"s2\">大人\"</span><span class=\"p\">,</span><span class=\"w\">\n              </span><span class=\"nl\">\"class\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"大人\"</span><span class=\"w\">\n            </span><span class=\"p\">},</span><span class=\"w\">\n            </span><span class=\"p\">{</span><span class=\"w\">\n              </span><span class=\"nl\">\"score\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">0.85499999999999998</span><span class=\"p\">,</span><span class=\"w\">\n              </span><span class=\"nl\">\"class\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"人\"</span><span class=\"w\">\n            </span><span class=\"p\">},</span><span class=\"w\">\n            </span><span class=\"p\">{</span><span class=\"w\">\n              </span><span class=\"nl\">\"score\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">0.51500000000000001</span><span class=\"p\">,</span><span class=\"w\">\n              </span><span class=\"nl\">\"type_hierarchy\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"</span><span class=\"se\">\\/</span><span class=\"s2\">人</span><span class=\"se\">\\/</span><span class=\"s2\">外交官\"</span><span class=\"p\">,</span><span class=\"w\">\n              </span><span class=\"nl\">\"class\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"外交官\"</span><span class=\"w\">\n            </span><span class=\"p\">},</span><span class=\"w\">\n            </span><span class=\"p\">{</span><span class=\"w\">\n              </span><span class=\"nl\">\"score\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">0.5</span><span class=\"p\">,</span><span class=\"w\">\n              </span><span class=\"nl\">\"type_hierarchy\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"</span><span class=\"se\">\\/</span><span class=\"s2\">人</span><span class=\"se\">\\/</span><span class=\"s2\">官公吏\"</span><span class=\"p\">,</span><span class=\"w\">\n              </span><span class=\"nl\">\"class\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"官公吏\"</span><span class=\"w\">\n            </span><span class=\"p\">},</span><span class=\"w\">\n            </span><span class=\"p\">{</span><span class=\"w\">\n              </span><span class=\"nl\">\"score\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">0.81599999999999995</span><span class=\"p\">,</span><span class=\"w\">\n              </span><span class=\"nl\">\"class\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"橙赤色\"</span><span class=\"w\">\n            </span><span class=\"p\">},</span><span class=\"w\">\n            </span><span class=\"p\">{</span><span class=\"w\">\n              </span><span class=\"nl\">\"score\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">0.39900000000000002</span><span class=\"p\">,</span><span class=\"w\">\n              </span><span class=\"nl\">\"class\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"群青色\"</span><span class=\"w\">\n            </span><span class=\"p\">}</span><span class=\"w\">\n          </span><span class=\"p\">],</span><span class=\"w\">\n          </span><span class=\"nl\">\"classifier_id\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"default\"</span><span class=\"p\">,</span><span class=\"w\">\n          </span><span class=\"nl\">\"name\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"default\"</span><span class=\"w\">\n        </span><span class=\"p\">}</span><span class=\"w\">\n      </span><span class=\"p\">]</span><span class=\"w\">\n    </span><span class=\"p\">}</span><span class=\"w\">\n  </span><span class=\"p\">],</span><span class=\"w\">\n  </span><span class=\"nl\">\"custom_classes\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"images_processed\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div>\n</div>\n\n<h3>\n<span id=\"google-home関連\" class=\"fragment\"></span><a href=\"#google-home%E9%96%A2%E9%80%A3\"><i class=\"fa fa-link\"></i></a>Google Home関連</h3>\n\n<p>一通りできたところで、最後に半日ほどいじったら普通に動いてびっくりしました😲<br>\nMP3を再生しているサーバーがクラウド上に乗っていたら、IFTTTから直接REST APIを叩く...でもよかったかもしれませんが、<br>\n今回はLAN(localhost)上にあるサーバーにリクエストを回していく必要がある(けど、固定IPなんて持ってないしましてやポートなんて開けたくない)ということだったので、IoTの世界で使われているらしい<a href=\"http://devcenter.magellanic-clouds.com/learning/mqtt-spec.html\" rel=\"nofollow noopener\" target=\"_blank\">MQTT</a>の仕組みを使ってリクエストを受け取るようにしました<br>\n(今書きながら調べてたら、<a href=\"https://pusher.com/\" rel=\"nofollow noopener\" target=\"_blank\">こういうもの</a>もあるんですね...機会があれば触ってみたいです)</p>\n\n<ul>\n<li>1. Google Homeを<a href=\"https://itunes.apple.com/jp/app/google-home/id680819774?mt=8\" rel=\"nofollow noopener\" target=\"_blank\">iOSアプリ</a>からGmailのアカウントに紐付け</li>\n<li>2. <a href=\"https://beebotte.com/\" rel=\"nofollow noopener\" target=\"_blank\">BeeBotte</a>にてXSプランでアカウント登録。watson_musicのchannelを作成</li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/bcc5e2ba4be4c6594c8b15841ac86826f6d44bd2/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130363235392f64646266336237622d646631322d376365392d643136662d6161396131646133643632322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2Fddbf3b7b-df12-7ce9-d16f-aa9a1da3d622.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=25eafea8b5ad0a9185d2e5c54042b36b\" alt=\"Beebotte\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/ddbf3b7b-df12-7ce9-d16f-aa9a1da3d622.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2Fddbf3b7b-df12-7ce9-d16f-aa9a1da3d622.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=ba8209304b75d8edbe58c9a0464ece22 1x\" loading=\"lazy\"></a></p>\n\n<ul>\n<li>3. 1.のアカウントで<a href=\"https://ifttt.com/discover\" rel=\"nofollow noopener\" target=\"_blank\">IFTTT</a>に登録し、Googleアシスタント -&gt; Webhooksで2.で作ったchannelにpublishするレシピを作成\n\n<ul>\n<li>2.と3.は<a href=\"https://qiita.com/msquare33/items/9f0312585bb4707c686b\" id=\"reference-fd4cd7e78a11e813bb2e\">こちら</a>の通りにやったらすぐできました</li>\n<li>「ワトソンミュージックに投稿 XXX」だと、長いせいか認識してくれなかったので、「ワトソンにXXX」にしました</li>\n</ul>\n</li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/be76737e4bd4bbfacceecfd57cfadedd56acca6d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130363235392f63373234333132622d656232352d623232302d666161332d3737313265633461366263362e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2Fc724312b-eb25-b220-faa3-7712ec4a6bc6.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=d6d965ca532fd2cb85deaaa96edcf60d\" alt=\"IFTTT\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/c724312b-eb25-b220-faa3-7712ec4a6bc6.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2Fc724312b-eb25-b220-faa3-7712ec4a6bc6.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=d535cafd1146a7641b07d12dda42d98b 1x\" loading=\"lazy\"></a></p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">投稿JSON</span></div>\n<div class=\"highlight\"><pre><code><span class=\"p\">{</span><span class=\"nl\">\"data\"</span><span class=\"p\">:[{</span><span class=\"w\"> </span><span class=\"nl\">\"text\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"{{TextField}}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nl\">\"type\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"google_assistant\"</span><span class=\"w\"> </span><span class=\"p\">}]}</span><span class=\"w\">\n</span></code></pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">気に入ったJSON</span></div>\n<div class=\"highlight\"><pre><code><span class=\"p\">{</span><span class=\"nl\">\"data\"</span><span class=\"p\">:[{</span><span class=\"w\"> </span><span class=\"nl\">\"feedback\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"LIKE\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nl\">\"type\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"google_assistant\"</span><span class=\"w\"> </span><span class=\"p\">}]}</span><span class=\"w\">\n</span></code></pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">気に入らなかったJSON</span></div>\n<div class=\"highlight\"><pre><code><span class=\"p\">{</span><span class=\"nl\">\"data\"</span><span class=\"p\">:[{</span><span class=\"w\"> </span><span class=\"nl\">\"feedback\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"DISLIKE\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nl\">\"type\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"google_assistant\"</span><span class=\"w\"> </span><span class=\"p\">}]}</span><span class=\"w\">\n</span></code></pre></div>\n</div>\n\n<ul>\n<li>4. Webアプリ起動時に3.のチャンネルをsubscribeする<a href=\"https://github.com/yktakaha4/watson-music/blob/master/src/main/java/com/github/yktakaha4/watsonmusic/api/util/Mqtt.java\" rel=\"nofollow noopener\" target=\"_blank\">Mqttクラス</a>を作成\n\n<ul>\n<li>実装は<a href=\"https://www.eclipse.org/paho/\" rel=\"nofollow noopener\" target=\"_blank\">paho</a>で行いました。<a href=\"https://qiita.com/shohei1913/items/b355ad7d1bb27141176b\" id=\"reference-cd2f0bf1685c675cf5e3\">この投稿</a>がわかりやすかったです</li>\n<li>\n<a href=\"https://beebotte.com/docs/mqtt\" rel=\"nofollow noopener\" target=\"_blank\">ここ</a>にも記載がありますが、URLに「ssl://mqtt.beebotte.com:8883」、ユーザー名に「token:{2.のChannel Tokenの値}」を指定すると接続可能です</li>\n</ul>\n</li>\n<li>5. Google Homeに「ワトソンに投稿 XXX」と話しかけるとリクエストが送信されます</li>\n</ul>\n\n<h1>\n<span id=\"所感\" class=\"fragment\"></span><a href=\"#%E6%89%80%E6%84%9F\"><i class=\"fa fa-link\"></i></a>所感</h1>\n\n<ul>\n<li>1月〜3月にバッチ、４月にWeb、５月に結合&amp;仕上げ、という感じでできました\n\n<ul>\n<li>時間は測ってませんが、体感15人日〜20人日くらいかかったような気がします...疲れました</li>\n</ul>\n</li>\n<li>前述の通り、よほど使わなければ費用はまずかからないと思います。Watsonのライトプランは一月放置するとインスタンスが削除されてしまうようですが...</li>\n<li>「なんでこの検索文でこの曲なんだろう...」というものもままありますが、とりあえずちゃんと動くものができたので満足です🍜\n\n<ul>\n<li>Wikipediaを<del>でたらめに</del>紐付けてるだけだから、当然の帰着とも言えます😞\n\n<ul>\n<li>次に音楽を扱うなら、楽曲から言語情報を抽出する...くらいのことを頑張らないといけないなと思いました</li>\n</ul>\n</li>\n<li>リクエストをしないとランダム選曲しますので、とりあえずしばらく使い続けようと思います（本末転倒）</li>\n</ul>\n</li>\n</ul>\n\n<h1>\n<span id=\"ソース\" class=\"fragment\"></span><a href=\"#%E3%82%BD%E3%83%BC%E3%82%B9\"><i class=\"fa fa-link\"></i></a>ソース</h1>\n\n<p>githubに公開しました<img alt=\":octocat:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/octocat.png\" title=\":octocat:\" width=\"20\" loading=\"lazy\"></p>\n\n<p><a href=\"https://github.com/yktakaha4/watson-music\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://github.com/yktakaha4/watson-music</a><br>\n<a href=\"https://github.com/yktakaha4/watson-music-web\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://github.com/yktakaha4/watson-music-web</a></p>\n",
      "body": "#はじめに\n勉強で作ったWebアプリのご紹介兼備忘録となります\n参考にした資料を多く貼るよう心がけたので、似たような構成で何か作ろうとされてる方の一助になれば幸いです\n\n![Watson Music](https://qiita-image-store.s3.amazonaws.com/0/106259/c56e7ea6-7d39-3d50-d269-eb9e4fc76d29.png)\n\n##どんなアプリ？\n🤔 オフィスにBGMを流したいけど、音楽の趣味はみんな違う...公平にシャッフルしても脈絡のない選曲になるし、何かいい方法はないかな...\n\n😃 そうだ! Watsonに曲調や今の気分をリクエストして、流す曲を決めてもらえばいいんだ!\n🤗 仕事が忙しすぎて手が離せない人も、音声でリクエストを送れるようにすれば万事解決ですね!!\n\n- 一応調べたのですが、[事務所、工場等での主として従業員のみを対象としたBGM利用は無料](http://www.jasrac.or.jp/info/bgm/)らしいです\n- 各自イヤホンで好きなもの聴けばいいじゃん...と思った方は鋭い、あなたは正しいです😭\n\n##経緯\n- [先日いじった](https://qiita.com/yktakaha4/items/d14d643db28bc63c7b3f)Retrieve And Rankが[Deprecatedとなり](https://www.ibm.com/watson/services/retrieve-and-rank/)、後継として[Discovery](https://www.ibm.com/watson/jp-ja/developercloud/discovery.html)が出てきたので、使ってみようと思った\n    - [この投稿](https://qiita.com/ishida330/items/b823d7c5b55806f04242)を読んで、使うだけならそこまで難しくなさそうと思えたのが大きかったです\n- 長らくjQueryしか使えなかったが、[こちらの投稿](https://qiita.com/mizchi/items/4d25bc26def1719d52e6)を読んで~~魂が震えた~~React(とその周辺技術)を知りたくなった\n    - AngularJSと迷いましたが、なんとなく敷居が低そうなこっちを選びました\n- フロントからバックエンドまでひとりで設計/実装したらどのようなものが作れるか試したかった\n    - 最後まで読んでいただくと分かりますが、Watsonはそこまで使い込めていません...\n    - 役に立つアプリを作る < 未経験技術のキャッチアップ の優先度で取り組みました\n\n##開発ポリシー\n###✨個々のサービスについて深掘り🕳するより、システムとしてちゃんとまとまる👪ように作る✨\n- 例えば、[前回](https://qiita.com/yktakaha4/items/d14d643db28bc63c7b3f)はWatsonへのデータ取り込みなどに手操作(Curlコマンド打つ)が介在してしまったので、全部バッチ化&Web画面からキックできるようにしました\n- 構成についても、~~前回のように訳も分からずNode-REDを使って消耗したりせず、~~フロント：JS、バックエンド：Javaでできるだけ統一しました\n- Discoveryに対するカスタム辞書適用や、MP3格納ディレクトリおよびアプリサーバーのクラウド化など、押さえておきたかったところもあるのですが、実装よりも環境構築の側面が強そうだったので、上記方針よりスコープから外しました\n\n#ユースケース\n1\\. ユーザー(オフィスの人々)が、ファイルサーバーに各自MP3を格納する\n\n![MP3ファイル](https://qiita-image-store.s3.amazonaws.com/0/106259/39bfb430-099b-8feb-bc5d-cb57fc4ebe48.png)\n\n2\\. ブラウザからWatson Musicにアクセスし、音楽取り込みボタンを押すと、ファイルサーバーのMP3がWatsonに取り込まれ、検索可能となる\n\n![バッチ実行](https://qiita-image-store.s3.amazonaws.com/0/106259/a73fbf39-145b-a96e-6064-0942cce59828.png)\n\n3\\. Watson Musicに選曲のリクエストを投稿すると、Watsonが流す曲を決めて再生する。リクエストの投稿や曲の再生状況は、Watson Musicを開いている全てのユーザーのブラウザに即座に反映される\n\n![即時反映](https://qiita-image-store.s3.amazonaws.com/0/106259/9a83f149-6fde-8b86-a4ef-7775c65bb1ce.gif)\n\n4\\. 再生中の曲が気に入った/気に入らなかった場合、ボタンを押してWatsonにフィードバックを行うことができる。学習ボタンを押すと、Watsonにフィードバックが取り込まれ、検索結果が改善される\n\n![フィードバック](https://qiita-image-store.s3.amazonaws.com/0/106259/acc7e6f2-7871-f464-d93e-9e40559de348.png)\n\n5\\. 選曲のリクエストおよびフィードバックはGoogle Homeからも行うことができる\n\n| 呼びかけ方 | アクション |\n|:--------------------------|:----------------------|\n| Watsonに投稿 XXXXX | XXXXXで選曲リクエストを投稿 |\n| Watsonにフィードバック 気に入った | 流れている曲にフィードバック(気に入った) |\n| Watsonにフィードバック 気に入らない | 流れている曲にフィードバック(気に入らない) |\n\n#システム構成\n\nJavaと他レイヤとのインターフェースとなっているものまで書いたらだいぶゴチャッとしてしまいましたが、\n基本的にMySQLとEclipseを用意して、IBM Cloud上にWatsonの環境を用意すれば動かせます\n\n![構成図.jpeg](https://qiita-image-store.s3.amazonaws.com/0/106259/0686c02b-e251-1e01-f57b-cdbd5d8bfdd3.jpeg)\n\n##サーバサイド\nSpring Bootを中心に構築しました。DBアクセスには[MyBatis](http://www.mybatis.org/mybatis-3/ja/)を使いましたが、Connectionのことなど考えずによく、楽でした(正しくトランザクション制御できているのか若干不安ではありますが...)\n\n###バッチ\n- [Spring Batch](https://projects.spring.io/spring-batch/)で延々とコーディングしました...色々試行錯誤したせいもあり、工数の2/3くらいこちらに掛かりました\n    - 概念については[こちらのページ](https://sites.google.com/site/soracane/home/springnitsuite/spring-batch)がよくまとまっておりおすすめです\n- [Jaudiotagger](http://www.jthink.net/jaudiotagger/)で抽出したMP3タグ情報を使って、以下のような文章を生成しました\n    1. アーティスト名、アルバム名、ジャンル等にてWikipediaを検索し、記事を取得\n        - MediaWiki API経由でアクセスしました。[こちらの投稿](https://qiita.com/yubessy/items/16d2a074be84ee67c01f)がわかりやすいです\n        - レスポンスは[Jersey Clientを使って](http://www.akirakoyasu.net/2012/02/05/jerey-client-useful-http-client/)HTMLで受け取り、[jsoup](https://jsoup.org/)でテキストを抽出しました\n        - [先日の投稿](https://qiita.com/yktakaha4/items/8cf9bc4b1910f0b5ca45)でも少し書きましたが、どうしても化けてしまうタグが少しばかりあり、諦めました...\n    2. MP3に設定されているアルバムアートワークにて、[Watson Visual Recognition](https://www.ibm.com/watson/jp-ja/developercloud/visual-recognition.html)にアクセスし、画像分析結果を取得し、クラス分類でWikipediaの記事を取得\n        - [Java SDK](https://www.ibm.com/watson/developercloud/visual-recognition/api/v3/java.html?java)が提供されているので、思ってたより簡単にできました。(クラス等の説明がほぼ無いのはなんですが...)\n    3. 曲名にて歌詞検索サイトの[J-Lyric.net](http://j-lyric.net/)から歌詞を取得\n        - [利用規約](http://j-lyric.net/info/e374.html)を読んだ感じダメという感じでもなさそうだったので、jsoupでやってみました。[この投稿](https://qiita.com/nezuq/items/c5e827e1827e7cb29011)も読むと良いと思います\n    4. 1.で取得したWikipediaの記事について、MP3タグと類似度の高い記事を紐付け\n        - 1.だけだと、Wikipediaの検索エンジン依存になってしまうので、[こちらの投稿のように](https://qiita.com/ssaito/items/aae5522618d4296c5178)レーベンシュタイン距離を使って、表記ぶれがあっても記事を紐付けられるようにしました\n    5. 1.で取得したWikipediaの記事内の各リンク(=別のWikipedia記事のタイトル)に対して、[BM25](http://sonickun.hatenablog.com/entry/2014/11/12/122806)を用いて重み付けを行い、記事ごとに数値の高いものも関連記事として紐付け\n        - 申し訳程度の機械学習要素になります...[TextSimilarityServiceクラス](https://github.com/yktakaha4/watson-music/blob/master/src/main/java/com/github/yktakaha4/watsonmusic/service/TextSimilarityService.java)がそれにあたります\n    6. MP3タグ情報をそのまま文章として登録\n        - 本当は[Gracenote Web API](https://developer.gracenote.com/ja/web-api)を使いたかったのですが、いつ試しても[API Keyを発行してもらえず](https://developer.gracenote.com/user/register)断念しました...\n- 生成された各文章を結合し、Watson Discoveryに登録\n    - こちらも[Java SDK](https://www.ibm.com/watson/developercloud/discovery/api/v1/java.html?java)があるので、Visual Recognition同様に手軽に使えます\n    - ドキュメント形式は幾つかから選べますが、扱いやすそうなJSONにしました\n\n```json:Discoveryに投入するJSON\n{\n  \"path\" : \"I LOVE U\\/03 03. 未来.mp3\",\n  \"trackLength\" : 322,\n  \"encoding\" : \"mp3\",\n  \"musicTags\" : {\n    \"ALBUM_ARTIST_SORT\" : \"ミスターチルドレン\",\n    \"TITLE\" : \"未来\",\n    \"YEAR\" : \"2005\",\n    \"TRACK\" : \"3\",\n    \"ARTIST\" : \"Mr.Children\",\n    \"ALBUM_ARTIST\" : \"Mr.Children\",\n    \"ENCODER\" : \"iTunes v6.0.0.18\",\n    \"ARTIST_SORT\" : \"ミスターチルドレン\",\n    \"GENRE\" : \"Pop\",\n    \"ALBUM\" : \"I LOVE U\",\n    \"COVER_ART\" : \"image\\/png::474078\"\n  },\n  \"musicId\" : 821,\n  \"text\" : \"2005 3  I LOVE U Mr.Children Pop iTunes v6.0.0.18 image\\/png::474078 ミスターチルドレン Mr.Children > I ♥ U 本来の表記は「I ♥ U」です。この記事に付けられた題名は、技術的な制限により、記事名の制約から不正確なものとなっています。 『I ♥ U』 Mr.Children の スタジオ・アルバム リリース 2005年9月21日 ジャンル ロック 時間 63分58秒 レーベル トイズファクトリー プロデュース 小林武史 チャート最高順位 週間1位（オリコン） 2005年10月度月間2位（オリコン） 2005年度年間8位（オリコン） オリコン歴代アルバムランキング226位 ゴールドディスク ミリオン（日本レコード協会） Mr.Children 年表 シフクノオト （2004年） ...\"\n}\n```\n\n```text:BM25で関連するドキュメントを抽出\n2018-05-15 21:41:18.209  INFO SimpleStepHandler     : Executing step: [enrichTextsByWikipedia]\n2018-05-15 21:41:21.288  INFO TextSimilarityService    : text similarity service initialized: k1 = 2.0, b = 0.75, avgdl = 507.0\n2018-05-15 21:41:21.288  INFO RelatedWikiPageProcessor  : similarity threshold: relevance > 0.05 and top 5 pages\n2018-05-15 21:41:21.555  INFO RelatedWikiPageProcessor  : related wikipages: /05 -> (坂本龍一,0.060225320883512914), (アウト・オブ・ノイズ,0.05005133843882276)\n2018-05-15 21:41:23.769  INFO RelatedWikiPageProcessor  : related wikipages: B.A.N.D. -> (YOUR SONG IS GOOD,0.12316413842154202), (THE ACTION,0.07945721944782655), (NAYUTAWAVE RECORDS,0.06290821951833057), (3月3日,0.06056176459670045), (カクバリズム,0.06056176459670045)\n2018-05-15 21:41:23.943  INFO RelatedWikiPageProcessor  : related wikipages: CAR SONGS OF THE YEARS -> (奥田民生,0.0633027466742595)\n2018-05-15 21:41:24.129  INFO RelatedWikiPageProcessor  : related wikipages: BETTER SONGS OF THE YEARS -> (奥田民生,0.064631488592711), (2008年,0.05039573681355406), (Fantastic OT9,0.05024107009270254), (僕らのワンダフルデイズ サウンドトラック,0.05024107009270254), (10月29日,0.05011415549211778)\n2018-05-15 21:41:24.321  INFO RelatedWikiPageProcessor  : related wikipages: 井上陽水奥田民生 -> (井上陽水,0.05551309994270471), (奥田民生,0.05410484019209229)\n2018-05-15 21:41:27.536  INFO RelatedWikiPageProcessor  : related wikipages: COBALT HOUR -> (1975年,0.05014774776777056)\n2018-05-15 21:41:28.770  INFO RelatedWikiPageProcessor  : related wikipages: Cymbals -> (沖井礼二,0.09956893392254533), (矢野博康,0.05183281021348527), (土岐麻子,0.05076091736900876)\n2018-05-15 21:41:28.922  INFO RelatedWikiPageProcessor  : related wikipages: The band apart -> (1,0.05656246896271063)\n2018-05-15 21:41:29.520  INFO RelatedWikiPageProcessor  : related wikipages: 東京事変 -> (椎名林檎,0.05006418542278235)\n2018-05-15 21:41:29.643  INFO RelatedWikiPageProcessor  : related wikipages: Cornelius -> (コーネリアス・ヴァンダービルト,0.11629418762801481), (猿の惑星,0.07515443060345392)\n2018-05-15 21:41:30.052  INFO RelatedWikiPageProcessor  : related wikipages: FOR YOU -> (フォー・ユー,0.09920778243902893)\n2018-05-15 21:41:30.305  INFO RelatedWikiPageProcessor  : related wikipages: The Fantastic Plastic Machine -> (Fantastic Plastic Machine,0.14436623255578224), (1997年,0.05321008399144652), (10月10日,0.0515236509976896), (日本コロムビア,0.05103357778415948), (スタジオ・アルバム,0.050605023893409457)\n2018-05-15 21:41:30.607  INFO RelatedWikiPageProcessor  : related wikipages: Fantôme -> (宇多田ヒカル,0.05042149540012731), (2016年,0.050066569362434594)\n2018-05-15 21:41:31.399  INFO RelatedWikiPageProcessor  : related wikipages: 小袋成彬 -> (宇多田ヒカル,0.050095502755357096)\n2018-05-15 21:41:31.884  INFO RelatedWikiPageProcessor  : related wikipages: Fishmans -> (ボーカル,0.05003627945421543)\n2018-05-15 21:41:31.936  INFO RelatedWikiPageProcessor  : related wikipages: 宇宙 日本 世田谷 -> (佐藤伸治,0.342280868725777), (フィッシュマンズ,0.07414079951506487), (LONG SEASON,0.05398063786198843), (スタジオ・アルバム,0.05126803822945513), (オリコンチャート,0.050995225603264395)\n2018-05-15 21:41:32.087  INFO RelatedWikiPageProcessor  : related wikipages: FreeTEMPO -> (DJ,0.0502637876950748)\n2018-05-15 21:41:32.153  INFO RelatedWikiPageProcessor  : related wikipages: 空気公団 -> (トイズファクトリー,0.05230039242246507), (SPACE SHOWER NETWORK,0.050821297098439105), (ポップ・ロック,0.05036436461861145), (ピアノ,0.050052459677419246)\n2018-05-15 21:41:50.949  INFO RelatedWikiPageProcessor  : related wikipages: スピッツ -> (犬,0.14141142226123585), (プラネタリウム,0.06426989664685567)\n2018-05-15 21:41:51.107  INFO RelatedWikiPageProcessor  : related wikipages: ハイファイ新書 -> (ハイファイ,0.14901153285452806), (オリコン,0.09449390740803565), (2009年,0.0702335178109741), (シンクロニシティーン,0.06670556020884505), (シフォン主義,0.05874506473049359)\n2018-05-15 21:41:51.149  INFO RelatedWikiPageProcessor  : related wikipages: メグ -> (MEG,0.2621526213897821), (Meg,0.09827216190077466), (MEGU,0.05723108345597966), (めぐみ,0.05723108345597966)\n2018-05-15 21:41:51.220  INFO RelatedWikiPageProcessor  : related wikipages: 夢みる惑星 -> (佐藤史生,0.09846793349530256), (小学館,0.08587651861800526), (プチフラワー,0.08097989398268286), (小学館文庫,0.05744113400613156), (少女漫画,0.05149429975735787)\n2018-05-15 21:41:51.310  INFO RelatedWikiPageProcessor  : related wikipages: 安全地帯 -> (ゲーメスト,0.3562589491573924), (吉野二郎,0.3562589491573924), (緩衝地帯,0.3562589491573924), (路面電車,0.3066400828610433), (日本映画,0.2776149067493823)\n2018-05-15 21:41:51.399  INFO RelatedWikiPageProcessor  : related wikipages: 岸田メル -> (イラストレーター,0.05039222495893547)\n2018-05-15 21:41:51.651  INFO RelatedWikiPageProcessor  : related wikipages: 比屋定篤子 -> (1997年,0.05454346478565931), (笹子重治,0.054119433283179794), (那覇市,0.05110278474996579), (沖縄県,0.050697418856247733), (12月24日,0.050466135833929004)\n2018-05-15 21:41:51.674  INFO RelatedWikiPageProcessor  : related wikipages: 流線形 -> (流れ,0.11173271371226531)\n2018-05-15 21:42:06.699  INFO RelatedWikiPageProcessor  : related wikipages: 相対性理論 -> (時間,0.050505449840522756)\n2018-05-15 21:42:07.772  INFO RelatedWikiPageProcessor  : related wikipages: 青空百景 -> (ムーンライダーズ,0.1363140503236836), (鈴木博文,0.054001764173099404), (1982年,0.05217094703759643), (MANIA MANIERA,0.05209252299043802), (鈴木慶一,0.050752580964901504)\n2018-05-15 21:42:07.874  INFO RelatedWikiPageProcessor  : related wikipages: 風街ろまん -> (はっぴいえんど,0.05395896768196796)\n```\nCymbalsなんかうまくいってますが、スピッツや安全地帯はWikipediaの元記事の選択を失敗してるっぽいですね...\n\n###オンライン\n- 一画面構成でセッション管理等も不要のため、[REST APIを作成](https://spring.io/guides/gs/rest-service/)しReact + Reduxからfetchするように設計\n    - [こちらの記事](https://qiita.com/TEBASAKI/items/267c261db17f178e33eb)のように、@RestControllerを付けるだけでPOJOへのマッピングまでやってもらえるので大変爽快でした\n    - パスやI/Fの定義は[こちら](http://wp.tech-style.info/archives/683)が参考になりました。（予定は無いですが）例えばフロントにネイティブアプリが増えても使えるような設計ができたと思います\n    - APIの動作確認には[Insomnia](https://insomnia.rest/)を使用しました。使いやすくていい感じです\n- ユーザーからの選曲リクエストを元にWatson Discoveryを検索し、返却されたドキュメントに紐づくファイルをローカルから取得して[JLayer](http://www.javazoom.net/javalayer/javalayer.html)で再生\n    - 全て手で作ると大変なようですが、[BasicPlayerクラスを使う](http://akameco.hatenablog.com/entry/2014/12/26/070721)と、何も考えなくても勝手に動きます。曲の順次再生も、再生終了時に呼び出されるコールバックを仕掛けておくだけで簡単に実現できました\n- 新しくリクエストが登録されたり、次の曲が再生されるタイミングで画面を更新したかったので、[STOMP Over WebSocket](http://jmesnil.net/stomp-websocket/doc/)にて適宜ソケット通信を実施\n    - サーバーサイドは[こちら](http://spring-boot-camp.readthedocs.io/ja/latest/06-STOMP.html)および[こちら](http://spring-boot-camp.readthedocs.io/ja/latest/07-STOMPOverWebSocket.html)でできました。例えば、新しいリクエストが投稿された際には「GET_REQUESTS」という文字列を送り、クライアントに対応するREST APIを叩かせる...という形にしています\n- バッチ機能(音楽取り込み/フィードバック学習)を起動するREST APIを提供\n    - バッチをそのままControllerから呼び出すと同期的に動いてしまうので、[applicationContext.xml](https://github.com/yktakaha4/watson-music/blob/master/src/main/resources/applicationContext.xml)でSimpleAsyncTaskExecutorを管理Beanに加えておきます\n\n###DB\n[WWW SQL Designer](http://ondras.zarovi.cz/sql/demo/)でER図ぽいものを書いてみました。ほんとに何でもブラウザでできますね...\n\n![ER図](https://qiita-image-store.s3.amazonaws.com/0/106259/6fa58833-d114-23ec-39a6-c49d245717ea.png)\n※重要な列のみ抜粋\n\n- Discoveryは、既存の文書ファイルをそのまま取り込んで検索するというアプローチも選択可能ですが、今回はMp3から文書を作る必要があったので、普通にRDBを使用\n- music、music_tag、artworkに対して、Wikipedia等からtextとして取得した文字情報をtext_tagにて紐付け、music毎にdiscovery公開用のdocumentを生成\n    - バッチ起動時にmissing_atに日付を入れ、走査中に見つかったもののみnull -> 見つからなかったものはdiscoveryより削除など、それなりに実運用を考えて設計しました\n    - cacheは、WikipediaやVisual Recognitionへリクエストしまくって迷惑が掛かったり課金されないよう、HTTPレスポンスの生データを取っておくテーブルになります。実運用時はリクエスト後一定期間過ぎたものは消す...などしてもいいかも\n- requestは検索文を保持、trackは検索文により再生された曲を保持、feedbackは曲に対して気に入った/気に入らなかったが押された数を保持\n    - 学習処理時に「検索文に対して、あるドキュメント(今回は曲)がどれだけの関連度(Discoveryでは整数値)を持つか」というデータを作る必要があるため。関連度はバッチ内で気に入った/気に入らなかったの割合で計算します\n- DDL実行は、Spring Bootの起動時に[sqlファイルが呼ばれるように](https://github.com/yktakaha4/watson-music/blob/master/src/main/resources/applicationContext.xml)して対応しました。今回のようにPoC的に開発するにはだいぶ便利に思えました\n\n##クライアントサイド\n\n- [Pingendo](https://pingendo.com/)でレイアウトの枠組みを作成\n    - 今までHTMLとCSSは基本的に手で書いてたのですが、部品をドロップするだけでメキメキ画面が出来上がっていき大変楽でした\n        - ただ、手で書いた経験がなかったら微修正などは難しいようにも思いました...\n- 枠組みができたら、[Atom](https://atom.io/)で開発サーバーを立ち上げて画面の部品ごとにReactに(勉強しながら)移植\n    - 初めて触れるものなので読み物から入りたいと思い、[React開発 現場の教科書](https://www.amazon.co.jp/dp/B07BBGSHJS/ref=dp-kindle-redirect?_encoding=UTF8&btkr=1)を買いました。概要や周辺知識を広く知るにはとてもよい本と思います\n- Reactに画面を移植したら、Reduxで動きを付ける\n    - Redux-Sagaも導入したのですが、理解にあたり[この投稿](https://qiita.com/kuy/items/716affc808ebb3e1e8ac)に大変助けられました。これがなかったら諦めてたかもしれません...\n    - Node.jsの開発サーバーはlocalhost:3000、tomcatはlocalhost:8080で立ち上がるので、[Charles](https://www.charlesproxy.com/)でリクエストのパス等を適宜変換しました\n        - [こちらの投稿](https://qiita.com/orzngo/items/76c95a4e3ff4c30b4d38)を参考にしました。仕事で使っている[Fiddler](https://www.telerik.com/fiddler)と比べても使いよく、[つい購入](https://www.charlesproxy.com/buy/purchase-charles-licenses/)してしまいました💰\n    - ステータスバーのアニメーションは[React Transition Group](https://reactcommunity.org/react-transition-group/)、ソケット通信には[SockJS-client](https://github.com/sockjs/sockjs-client)と[STOMP.js](https://github.com/jmesnil/stomp-websocket)、時刻処理に[Moment.js](https://github.com/moment/moment-timezone)、fetchのポリフィルに[github/fetch](https://github.com/github/fetch)など、色々と触れて大変楽しかったです\n\n##外部サービス\n###Watson Discovery\n- 環境構築については、[こちらの投稿](https://qiita.com/ishida330/items/bb1bd4cf61da9b9c6da2)を参考に、環境作成 -> コレクション作成 -> 日本語化 & エンリッチメント削除まではWebのツールから行いました\n- Retrieve and Rankと比べて料金体系が変わっており、[ライトプラン](https://console.bluemix.net/docs/services/discovery/pricing-details.html#discovery-)を使えばお金はかかりません\n- [ドキュメント](https://console.bluemix.net/docs/services/discovery/getting-started.html#api-)も日本語のちゃんとしたものが公開されているので、ご一読をお勧めします。[こちら](https://console.bluemix.net/docs/services/discovery/query-reference.html#parameter-descriptions)とか、結構役立つと思います\n    - [Apache Solr](http://lucene.apache.org/solr/)をカスタマイズした程度のものだったR&Rと比べて、機能は絞られたのかもしれませんが、全体的な親切さはだいぶ向上したように感じます\n- 一時期、全然ドキュメント入れてないのに以下の使用料の表示がぶっ壊れて容量オーバーみたいな警告が出てて、怖くなってサイズを減らしたのですが、今見たら直っててなんなんだ...と思いました\n\n![使用料](https://qiita-image-store.s3.amazonaws.com/0/106259/70b9240a-5451-12bf-6f6d-2ad966ef25dc.png)\n\n###Watson Visual Recognition\n- Discovery同様、[ライトプラン](https://www.ibm.com/watson/services/visual-recognition/pricing/index.html#pricing)で十分なため無料で使えます\n- Custom Classifierを作る要件でもなかったので、IBM Cloudにてサービス登録 -> 資格情報の生成だけですぐに使えるようになりました\n- 肝心の戻り値はなんとも言えないものです...自分の使い方がよくないのも分かりますが、どういう使い方をするといいでしょうか...\n\n例：\n![c9f73f67.jpg](https://qiita-image-store.s3.amazonaws.com/0/106259/84a51c41-8881-ecbb-083a-2619a1a8bfa8.jpeg)\n\n```json:VisualRecognitionの戻り値\n{\n  \"images\" : [\n    {\n      \"image\" : \"90C031B45C058E5F56A002ADEC186787\",\n      \"classifiers\" : [\n        {\n          \"classes\" : [\n            {\n              \"score\" : 0.61599999999999999,\n              \"type_hierarchy\" : \"\\/人\\/人\\/大人\",\n              \"class\" : \"大人\"\n            },\n            {\n              \"score\" : 0.85499999999999998,\n              \"class\" : \"人\"\n            },\n            {\n              \"score\" : 0.51500000000000001,\n              \"type_hierarchy\" : \"\\/人\\/外交官\",\n              \"class\" : \"外交官\"\n            },\n            {\n              \"score\" : 0.5,\n              \"type_hierarchy\" : \"\\/人\\/官公吏\",\n              \"class\" : \"官公吏\"\n            },\n            {\n              \"score\" : 0.81599999999999995,\n              \"class\" : \"橙赤色\"\n            },\n            {\n              \"score\" : 0.39900000000000002,\n              \"class\" : \"群青色\"\n            }\n          ],\n          \"classifier_id\" : \"default\",\n          \"name\" : \"default\"\n        }\n      ]\n    }\n  ],\n  \"custom_classes\" : 0,\n  \"images_processed\" : 1\n}\n```\n\n###Google Home関連\n一通りできたところで、最後に半日ほどいじったら普通に動いてびっくりしました😲\nMP3を再生しているサーバーがクラウド上に乗っていたら、IFTTTから直接REST APIを叩く...でもよかったかもしれませんが、\n今回はLAN(localhost)上にあるサーバーにリクエストを回していく必要がある(けど、固定IPなんて持ってないしましてやポートなんて開けたくない)ということだったので、IoTの世界で使われているらしい[MQTT](http://devcenter.magellanic-clouds.com/learning/mqtt-spec.html)の仕組みを使ってリクエストを受け取るようにしました\n(今書きながら調べてたら、[こういうもの](https://pusher.com/)もあるんですね...機会があれば触ってみたいです)\n\n- 1. Google Homeを[iOSアプリ](https://itunes.apple.com/jp/app/google-home/id680819774?mt=8)からGmailのアカウントに紐付け\n- 2. [BeeBotte](https://beebotte.com/)にてXSプランでアカウント登録。watson_musicのchannelを作成\n\n![Beebotte](https://qiita-image-store.s3.amazonaws.com/0/106259/ddbf3b7b-df12-7ce9-d16f-aa9a1da3d622.png)\n\n- 3. 1.のアカウントで[IFTTT](https://ifttt.com/discover)に登録し、Googleアシスタント -> Webhooksで2.で作ったchannelにpublishするレシピを作成\n    - 2.と3.は[こちら](https://qiita.com/msquare33/items/9f0312585bb4707c686b)の通りにやったらすぐできました\n    - 「ワトソンミュージックに投稿 XXX」だと、長いせいか認識してくれなかったので、「ワトソンにXXX」にしました\n\n![IFTTT](https://qiita-image-store.s3.amazonaws.com/0/106259/c724312b-eb25-b220-faa3-7712ec4a6bc6.png)\n\n```json:投稿JSON\n{\"data\":[{ \"text\" : \"{{TextField}}\", \"type\" : \"google_assistant\" }]}\n```\n```json:気に入ったJSON\n{\"data\":[{ \"feedback\" : \"LIKE\", \"type\" : \"google_assistant\" }]}\n```\n```json:気に入らなかったJSON\n{\"data\":[{ \"feedback\" : \"DISLIKE\", \"type\" : \"google_assistant\" }]}\n```\n\n- 4. Webアプリ起動時に3.のチャンネルをsubscribeする[Mqttクラス](https://github.com/yktakaha4/watson-music/blob/master/src/main/java/com/github/yktakaha4/watsonmusic/api/util/Mqtt.java)を作成\n    - 実装は[paho](https://www.eclipse.org/paho/)で行いました。[この投稿](https://qiita.com/shohei1913/items/b355ad7d1bb27141176b)がわかりやすかったです\n    - [ここ](https://beebotte.com/docs/mqtt)にも記載がありますが、URLに「ssl://mqtt.beebotte.com:8883」、ユーザー名に「token:{2.のChannel Tokenの値}」を指定すると接続可能です\n- 5. Google Homeに「ワトソンに投稿 XXX」と話しかけるとリクエストが送信されます\n\n#所感\n- 1月〜3月にバッチ、４月にWeb、５月に結合&仕上げ、という感じでできました\n    - 時間は測ってませんが、体感15人日〜20人日くらいかかったような気がします...疲れました\n- 前述の通り、よほど使わなければ費用はまずかからないと思います。Watsonのライトプランは一月放置するとインスタンスが削除されてしまうようですが...\n- 「なんでこの検索文でこの曲なんだろう...」というものもままありますが、とりあえずちゃんと動くものができたので満足です🍜\n    - Wikipediaを~~でたらめに~~紐付けてるだけだから、当然の帰着とも言えます😞\n        - 次に音楽を扱うなら、楽曲から言語情報を抽出する...くらいのことを頑張らないといけないなと思いました\n    - リクエストをしないとランダム選曲しますので、とりあえずしばらく使い続けようと思います（本末転倒）\n\n#ソース\ngithubに公開しました:octocat:\n\nhttps://github.com/yktakaha4/watson-music\nhttps://github.com/yktakaha4/watson-music-web\n",
      "coediting": false,
      "comments_count": 0,
      "created_at": "2018-05-16T00:06:30+09:00",
      "group": null,
      "id": "e535c310f0532798e721",
      "likes_count": 23,
      "private": false,
      "reactions_count": 0,
      "stocks_count": 19,
      "tags": [
        {
          "name": "Java",
          "versions": []
        },
        {
          "name": "Watson",
          "versions": []
        },
        {
          "name": "React",
          "versions": []
        },
        {
          "name": "SpringBoot",
          "versions": []
        },
        {
          "name": "GoogleHome",
          "versions": []
        }
      ],
      "title": "Watson Discovery + Google Home + Spring Boot + Reactでミュージックアプリを作る（ソース付き）",
      "updated_at": "2018-05-16T21:25:05+09:00",
      "url": "https://qiita.com/yktakaha4/items/e535c310f0532798e721",
      "user": {
        "description": "",
        "facebook_id": "",
        "followees_count": 26,
        "followers_count": 23,
        "github_login_name": "yktakaha4",
        "id": "yktakaha4",
        "items_count": 27,
        "linkedin_id": "",
        "location": "",
        "name": "Yuuki Takahashi",
        "organization": "LAPRAS株式会社",
        "permanent_id": 106259,
        "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/profile-images/1600489516",
        "team_only": false,
        "twitter_screen_name": "yktakaha4",
        "website_url": "https://yktakaha4.github.io/"
      },
      "page_views_count": null,
      "team_membership": null,
      "organization_url_name": null,
      "slide": false
    },
    {
      "rendered_body": "\n<h1>\n<span id=\"経緯\" class=\"fragment\"></span><a href=\"#%E7%B5%8C%E7%B7%AF\"><i class=\"fa fa-link\"></i></a>経緯</h1>\n\n<p><a href=\"http://www.jthink.net/jaudiotagger/\" rel=\"nofollow noopener\" target=\"_blank\">jaudiotagger</a>を使ってMP3タグを読み込んでDBに登録するコードを書いたのですが、文字化けしてるケースがあったので、復元処理を書きました。</p>\n\n<h1>\n<span id=\"考え方\" class=\"fragment\"></span><a href=\"#%E8%80%83%E3%81%88%E6%96%B9\"><i class=\"fa fa-link\"></i></a>考え方</h1>\n\n<p><a href=\"http://ltside.com/enc/\" rel=\"nofollow noopener\" target=\"_blank\">このサイト</a>で試して、こういう事だと理解したんですが、違ったらすいません...</p>\n\n<ul>\n<li>\n<p>UTF-8でエンコードされた文字列データ(MP3タグ) → UTF-8でデコード(jaudiotagger) → 文字列(Javaの世界。UTF-8)</p>\n\n<ul>\n<li>OK 正しく読み込める</li>\n</ul>\n</li>\n<li>\n<p>MS932でエンコードされた文字列 → ISO-8859-1でデコード(バグ？) → 文字列</p>\n\n<ul>\n<li>NG 文字化けする（UTF-8で表現した場合の見た目に化ける）</li>\n<li>化けた文字列をISO-8859-1でデコードし、MS932でエンコードすればよい</li>\n</ul>\n</li>\n</ul>\n\n<p>元々Windowsを使っており、MP3タグエディタも色々試したように思うので、古いタグバージョンのものが紛れていて起こったものと思います。iTunesだと正しく表示されるのですが...</p>\n\n<h1>\n<span id=\"実装\" class=\"fragment\"></span><a href=\"#%E5%AE%9F%E8%A3%85\"><i class=\"fa fa-link\"></i></a>実装</h1>\n\n<ul>\n<li>\n<p>デコード/エンコードのパターンは無数に考えられるが、日本語を文字範囲に含むエンコードに絞れば高々数パターン ^ 2</p>\n\n<ul>\n<li>今回はUTF-8、MS932(Windows-31J)、ISO-8859-1を試せば十分でした</li>\n</ul>\n</li>\n<li>\n<p>デコード/エンコードのパターンでできた文字列のうち、どれが一番正しく変換できているか判定する必要がある</p>\n\n<ul>\n<li>今回はMP3タグの解析のため、MP3のファイル名（だいたい曲名）および格納パス（だいたいアルバム名やアーティスト名）に含まれる文字との類似度を計測し、もっとも高いものを採用\n\n<ul>\n<li>引数で渡してるhintsになります</li>\n</ul>\n</li>\n<li>類似度判定については、<a href=\"https://qiita.com/ssaito/items/aae5522618d4296c5178\" id=\"reference-66021a86dba71284eba6\">やはりライブラリ</a>を使用\n\n<ul>\n<li>今回は判定元の文字が簡単に用意できたからよかったですが、無い場合はどうすると良いでしょうかね...</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"java\">\n<div class=\"code-lang\"><span class=\"bold\">CharacterEncoder.java</span></div>\n<div class=\"highlight\"><pre><code><span class=\"kn\">package</span> <span class=\"nn\">com.github.yktakaha4.watsonmusic.util</span><span class=\"o\">;</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">java.nio.charset.Charset</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.Arrays</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.Collection</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.Comparator</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.List</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.stream.Collectors</span><span class=\"o\">;</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">org.apache.commons.lang3.tuple.Pair</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.apache.lucene.search.spell.LevensteinDistance</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.apache.lucene.search.spell.StringDistance</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.mozilla.universalchardet.UniversalDetector</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.springframework.stereotype.Component</span><span class=\"o\">;</span>\n\n<span class=\"nd\">@Component</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">CharacterEncoder</span> <span class=\"o\">{</span>\n  <span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">Charset</span><span class=\"o\">&gt;</span> <span class=\"n\">charsets</span> <span class=\"o\">=</span> <span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">asList</span><span class=\"o\">(</span><span class=\"s\">\"utf-8\"</span><span class=\"o\">,</span> <span class=\"s\">\"windows-31j\"</span><span class=\"o\">,</span> <span class=\"s\">\"iso-8859-1\"</span><span class=\"o\">).</span><span class=\"na\">stream</span><span class=\"o\">()</span>\n      <span class=\"o\">.</span><span class=\"na\">map</span><span class=\"o\">(</span><span class=\"nl\">Charset:</span><span class=\"o\">:</span><span class=\"n\">forName</span><span class=\"o\">)</span>\n      <span class=\"o\">.</span><span class=\"na\">collect</span><span class=\"o\">(</span><span class=\"nc\">Collectors</span><span class=\"o\">.</span><span class=\"na\">toList</span><span class=\"o\">());</span>\n\n  <span class=\"kd\">public</span> <span class=\"nc\">String</span> <span class=\"nf\">encodeWithHints</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">string</span><span class=\"o\">,</span> <span class=\"nc\">Collection</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">hints</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"nc\">StringDistance</span> <span class=\"n\">dist</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">LevensteinDistance</span><span class=\"o\">();</span>\n\n    <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"original: \"</span> <span class=\"o\">+</span> <span class=\"n\">string</span><span class=\"o\">);</span>\n    <span class=\"k\">return</span> <span class=\"n\">charsets</span><span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">().</span><span class=\"na\">flatMap</span><span class=\"o\">((</span><span class=\"n\">decode</span><span class=\"o\">)</span> <span class=\"o\">-&gt;</span> <span class=\"o\">{</span>\n      <span class=\"k\">return</span> <span class=\"n\">charsets</span><span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">().</span><span class=\"na\">map</span><span class=\"o\">((</span><span class=\"n\">encode</span><span class=\"o\">)</span> <span class=\"o\">-&gt;</span> <span class=\"o\">{</span>\n        <span class=\"nc\">String</span> <span class=\"n\">encoded</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">String</span><span class=\"o\">(</span><span class=\"n\">string</span><span class=\"o\">.</span><span class=\"na\">getBytes</span><span class=\"o\">(</span><span class=\"n\">decode</span><span class=\"o\">),</span> <span class=\"n\">encode</span><span class=\"o\">);</span>\n        <span class=\"nc\">Float</span> <span class=\"n\">distance</span> <span class=\"o\">=</span> <span class=\"n\">hints</span><span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">().</span><span class=\"na\">map</span><span class=\"o\">((</span><span class=\"n\">hint</span><span class=\"o\">)</span> <span class=\"o\">-&gt;</span> <span class=\"o\">{</span>\n          <span class=\"k\">return</span> <span class=\"n\">dist</span><span class=\"o\">.</span><span class=\"na\">getDistance</span><span class=\"o\">(</span><span class=\"n\">encoded</span><span class=\"o\">,</span> <span class=\"n\">hint</span><span class=\"o\">);</span>\n\n        <span class=\"o\">}).</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"nc\">Comparator</span><span class=\"o\">.</span><span class=\"na\">naturalOrder</span><span class=\"o\">()).</span><span class=\"na\">orElse</span><span class=\"o\">(</span><span class=\"mf\">0.0f</span><span class=\"o\">);</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"decode: \"</span> <span class=\"o\">+</span> <span class=\"n\">decode</span> <span class=\"o\">+</span> <span class=\"s\">\",encode: \"</span> <span class=\"o\">+</span> <span class=\"n\">encode</span> <span class=\"o\">+</span> <span class=\"s\">\", encoded: \"</span> <span class=\"o\">+</span> <span class=\"n\">encoded</span> <span class=\"o\">+</span> <span class=\"s\">\",distance: \"</span> <span class=\"o\">+</span> <span class=\"n\">distance</span><span class=\"o\">);</span>\n\n        <span class=\"k\">return</span> <span class=\"nc\">Pair</span><span class=\"o\">.</span><span class=\"na\">of</span><span class=\"o\">(</span><span class=\"n\">encoded</span><span class=\"o\">,</span> <span class=\"n\">distance</span><span class=\"o\">);</span>\n      <span class=\"o\">});</span>\n    <span class=\"o\">}).</span><span class=\"na\">max</span><span class=\"o\">((</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">-&gt;</span> <span class=\"o\">{</span>\n      <span class=\"k\">return</span> <span class=\"n\">l</span><span class=\"o\">.</span><span class=\"na\">getRight</span><span class=\"o\">().</span><span class=\"na\">compareTo</span><span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"na\">getRight</span><span class=\"o\">());</span>\n\n    <span class=\"o\">}).</span><span class=\"na\">get</span><span class=\"o\">().</span><span class=\"na\">getLeft</span><span class=\"o\">();</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"kd\">public</span> <span class=\"nc\">String</span> <span class=\"nf\">encode</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"kt\">byte</span><span class=\"o\">[]</span> <span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"n\">string</span><span class=\"o\">.</span><span class=\"na\">getBytes</span><span class=\"o\">();</span>\n    <span class=\"nc\">UniversalDetector</span> <span class=\"n\">universalDetector</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">UniversalDetector</span><span class=\"o\">(</span><span class=\"kc\">null</span><span class=\"o\">);</span>\n    <span class=\"n\">universalDetector</span><span class=\"o\">.</span><span class=\"na\">handleData</span><span class=\"o\">(</span><span class=\"n\">source</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">source</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">);</span>\n\n    <span class=\"nc\">String</span> <span class=\"n\">charsetName</span> <span class=\"o\">=</span> <span class=\"n\">universalDetector</span><span class=\"o\">.</span><span class=\"na\">getDetectedCharset</span><span class=\"o\">();</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">charsetName</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nf\">String</span><span class=\"o\">(</span><span class=\"n\">source</span><span class=\"o\">,</span> <span class=\"nc\">Charset</span><span class=\"o\">.</span><span class=\"na\">forName</span><span class=\"o\">(</span><span class=\"n\">charsetName</span><span class=\"o\">));</span>\n\n    <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n      <span class=\"k\">return</span> <span class=\"n\">string</span><span class=\"o\">;</span>\n\n    <span class=\"o\">}</span>\n\n  <span class=\"o\">}</span>\n\n<span class=\"o\">}</span>\n</code></pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"text\">\n<div class=\"code-lang\"><span class=\"bold\">処理結果</span></div>\n<div class=\"highlight\"><pre><code>original: ³© ªè~Toothache and Chocolate~\ndecode: UTF-8,encode: UTF-8, encoded: ³© ªè~Toothache and Chocolate~,distance: 0.64102566\ndecode: UTF-8,encode: windows-31j, encoded: ﾂつｳﾂつｩﾂつ�ﾂつｪﾂづｨ~Toothache and Chocolate~,distance: 0.525\ndecode: UTF-8,encode: ISO-8859-1, encoded: ÂÂ³ÂÂ©ÂÂ ÂÂªÂÃ¨~Toothache and Chocolate~,distance: 0.46666664\ndecode: windows-31j,encode: UTF-8, encoded: ??????????~Toothache and Chocolate~,distance: 0.64102566\ndecode: windows-31j,encode: windows-31j, encoded: ??????????~Toothache and Chocolate~,distance: 0.64102566\ndecode: windows-31j,encode: ISO-8859-1, encoded: ??????????~Toothache and Chocolate~,distance: 0.64102566\ndecode: ISO-8859-1,encode: UTF-8, encoded: ����������~Toothache and Chocolate~,distance: 0.64102566\ndecode: ISO-8859-1,encode: windows-31j, encoded: さかあがり~Toothache and Chocolate~,distance: 0.7692308\ndecode: ISO-8859-1,encode: ISO-8859-1, encoded: ³© ªè~Toothache and Chocolate~,distance: 0.64102566\n</code></pre></div>\n</div>\n\n<p>encode関数の方は関係ないので無視してください。</p>\n\n<h1>\n<span id=\"まとめ\" class=\"fragment\"></span><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"><i class=\"fa fa-link\"></i></a>まとめ</h1>\n\n<p>StreamAPIが使えたところが気持ちよかった（小並）</p>\n",
      "body": "# 経緯\n[jaudiotagger](http://www.jthink.net/jaudiotagger/)を使ってMP3タグを読み込んでDBに登録するコードを書いたのですが、文字化けしてるケースがあったので、復元処理を書きました。\n\n# 考え方\n[このサイト](http://ltside.com/enc/)で試して、こういう事だと理解したんですが、違ったらすいません...\n\n- UTF-8でエンコードされた文字列データ(MP3タグ) → UTF-8でデコード(jaudiotagger) → 文字列(Javaの世界。UTF-8)\n    - OK 正しく読み込める\n\n- MS932でエンコードされた文字列 → ISO-8859-1でデコード(バグ？) → 文字列\n    - NG 文字化けする（UTF-8で表現した場合の見た目に化ける）\n    - 化けた文字列をISO-8859-1でデコードし、MS932でエンコードすればよい\n\n元々Windowsを使っており、MP3タグエディタも色々試したように思うので、古いタグバージョンのものが紛れていて起こったものと思います。iTunesだと正しく表示されるのですが...\n\n# 実装\n- デコード/エンコードのパターンは無数に考えられるが、日本語を文字範囲に含むエンコードに絞れば高々数パターン ^ 2\n    - 今回はUTF-8、MS932(Windows-31J)、ISO-8859-1を試せば十分でした\n\n- デコード/エンコードのパターンでできた文字列のうち、どれが一番正しく変換できているか判定する必要がある\n    - 今回はMP3タグの解析のため、MP3のファイル名（だいたい曲名）および格納パス（だいたいアルバム名やアーティスト名）に含まれる文字との類似度を計測し、もっとも高いものを採用\n        - 引数で渡してるhintsになります\n    - 類似度判定については、[やはりライブラリ](https://qiita.com/ssaito/items/aae5522618d4296c5178)を使用\n        - 今回は判定元の文字が簡単に用意できたからよかったですが、無い場合はどうすると良いでしょうかね...\n\n```java:CharacterEncoder.java\npackage com.github.yktakaha4.watsonmusic.util;\n\nimport java.nio.charset.Charset;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Comparator;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nimport org.apache.commons.lang3.tuple.Pair;\nimport org.apache.lucene.search.spell.LevensteinDistance;\nimport org.apache.lucene.search.spell.StringDistance;\nimport org.mozilla.universalchardet.UniversalDetector;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class CharacterEncoder {\n  private final List<Charset> charsets = Arrays.asList(\"utf-8\", \"windows-31j\", \"iso-8859-1\").stream()\n      .map(Charset::forName)\n      .collect(Collectors.toList());\n\n  public String encodeWithHints(String string, Collection<String> hints) {\n    StringDistance dist = new LevensteinDistance();\n\n    System.out.println(\"original: \" + string);\n    return charsets.stream().flatMap((decode) -> {\n      return charsets.stream().map((encode) -> {\n        String encoded = new String(string.getBytes(decode), encode);\n        Float distance = hints.stream().map((hint) -> {\n          return dist.getDistance(encoded, hint);\n\n        }).max(Comparator.naturalOrder()).orElse(0.0f);\n        System.out.println(\"decode: \" + decode + \",encode: \" + encode + \", encoded: \" + encoded + \",distance: \" + distance);\n\n        return Pair.of(encoded, distance);\n      });\n    }).max((l, r) -> {\n      return l.getRight().compareTo(r.getRight());\n\n    }).get().getLeft();\n  }\n\n  public String encode(String string) {\n    byte[] source = string.getBytes();\n    UniversalDetector universalDetector = new UniversalDetector(null);\n    universalDetector.handleData(source, 0, source.length);\n\n    String charsetName = universalDetector.getDetectedCharset();\n    if (charsetName != null) {\n      return new String(source, Charset.forName(charsetName));\n\n    } else {\n      return string;\n\n    }\n\n  }\n\n}\n```\n\n\n\n```text:処理結果\noriginal: ³© ªè~Toothache and Chocolate~\ndecode: UTF-8,encode: UTF-8, encoded: ³© ªè~Toothache and Chocolate~,distance: 0.64102566\ndecode: UTF-8,encode: windows-31j, encoded: ﾂつｳﾂつｩﾂつ�ﾂつｪﾂづｨ~Toothache and Chocolate~,distance: 0.525\ndecode: UTF-8,encode: ISO-8859-1, encoded: ÂÂ³ÂÂ©ÂÂ ÂÂªÂÃ¨~Toothache and Chocolate~,distance: 0.46666664\ndecode: windows-31j,encode: UTF-8, encoded: ??????????~Toothache and Chocolate~,distance: 0.64102566\ndecode: windows-31j,encode: windows-31j, encoded: ??????????~Toothache and Chocolate~,distance: 0.64102566\ndecode: windows-31j,encode: ISO-8859-1, encoded: ??????????~Toothache and Chocolate~,distance: 0.64102566\ndecode: ISO-8859-1,encode: UTF-8, encoded: ����������~Toothache and Chocolate~,distance: 0.64102566\ndecode: ISO-8859-1,encode: windows-31j, encoded: さかあがり~Toothache and Chocolate~,distance: 0.7692308\ndecode: ISO-8859-1,encode: ISO-8859-1, encoded: ³© ªè~Toothache and Chocolate~,distance: 0.64102566\n```\n\nencode関数の方は関係ないので無視してください。\n\n# まとめ\nStreamAPIが使えたところが気持ちよかった（小並）\n",
      "coediting": false,
      "comments_count": 0,
      "created_at": "2018-02-11T12:25:24+09:00",
      "group": null,
      "id": "8cf9bc4b1910f0b5ca45",
      "likes_count": 1,
      "private": false,
      "reactions_count": 0,
      "stocks_count": 1,
      "tags": [
        {
          "name": "Java",
          "versions": []
        },
        {
          "name": "MP3",
          "versions": []
        }
      ],
      "title": "化けたMP3タグ文字を類似度測定ライブラリを使いつつ元に戻した",
      "updated_at": "2018-02-11T12:25:24+09:00",
      "url": "https://qiita.com/yktakaha4/items/8cf9bc4b1910f0b5ca45",
      "user": {
        "description": "",
        "facebook_id": "",
        "followees_count": 26,
        "followers_count": 23,
        "github_login_name": "yktakaha4",
        "id": "yktakaha4",
        "items_count": 27,
        "linkedin_id": "",
        "location": "",
        "name": "Yuuki Takahashi",
        "organization": "LAPRAS株式会社",
        "permanent_id": 106259,
        "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/profile-images/1600489516",
        "team_only": false,
        "twitter_screen_name": "yktakaha4",
        "website_url": "https://yktakaha4.github.io/"
      },
      "page_views_count": null,
      "team_membership": null,
      "organization_url_name": null,
      "slide": false
    },
    {
      "rendered_body": "<p><a href=\"https://itunes.apple.com/jp/app/comparemerge/id478570084\" rel=\"nofollow noopener\" target=\"_blank\">CompareMerge</a>をインストールの上、以下で動きました。<br>\n情報が見つからなかったので書いておきます。<br>\n（SVNなんて使わないということでしょうか...）</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>-a /Applications/CompareMerge.app ${base} ${mine}\n</code></pre></div></div>\n\n<p>環境設定 &gt; チーム &gt; SVN &gt; Diff ビューアー<br>\n<a href=\"https://camo.qiitausercontent.com/d1accad64993d97e67d55f1bd37b61b1c6d26551/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130363235392f62656133616563372d323432362d393739652d633866652d3963613433383463653433632e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"472\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2Fbea3aec7-2426-979e-c8fe-9ca4384ce43c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=5bcebfaa79da233a0f77e9d194459a69\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/bea3aec7-2426-979e-c8fe-9ca4384ce43c.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2Fbea3aec7-2426-979e-c8fe-9ca4384ce43c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=1771c776399e3330d1cc1126add2f619 1x\" loading=\"lazy\"></a></p>\n\n<p><a href=\"https://camo.qiitausercontent.com/d80389aab7f94542ab297618389717f123588e65/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130363235392f66363530383039622d343333662d636664612d353164372d6533356565643965326437312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"1255\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2Ff650809b-433f-cfda-51d7-e35eed9e2d71.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=5dab5af3cbd2027403822506212ad80f\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/f650809b-433f-cfda-51d7-e35eed9e2d71.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2Ff650809b-433f-cfda-51d7-e35eed9e2d71.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=ff59dbf53622b44412fe80c04a54ca9b 1x\" loading=\"lazy\"></a></p>\n",
      "body": "[CompareMerge](https://itunes.apple.com/jp/app/comparemerge/id478570084)をインストールの上、以下で動きました。\n情報が見つからなかったので書いておきます。\n（SVNなんて使わないということでしょうか...）\n\n```text\n-a /Applications/CompareMerge.app ${base} ${mine}\n```\n\n環境設定 > チーム > SVN > Diff ビューアー\n<img width=\"472\" src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/bea3aec7-2426-979e-c8fe-9ca4384ce43c.png\">\n\n<img width=\"1255\" src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/f650809b-433f-cfda-51d7-e35eed9e2d71.png\">\n",
      "coediting": false,
      "comments_count": 0,
      "created_at": "2017-12-29T12:55:54+09:00",
      "group": null,
      "id": "8cd0ddc993ff9b7cd502",
      "likes_count": 0,
      "private": false,
      "reactions_count": 0,
      "stocks_count": 1,
      "tags": [
        {
          "name": "Eclipse",
          "versions": []
        },
        {
          "name": "MacOSX",
          "versions": []
        },
        {
          "name": "CompareMerge",
          "versions": []
        }
      ],
      "title": "MacのEclipseにてCompareMergeでSVN比較する",
      "updated_at": "2017-12-29T12:55:54+09:00",
      "url": "https://qiita.com/yktakaha4/items/8cd0ddc993ff9b7cd502",
      "user": {
        "description": "",
        "facebook_id": "",
        "followees_count": 26,
        "followers_count": 23,
        "github_login_name": "yktakaha4",
        "id": "yktakaha4",
        "items_count": 27,
        "linkedin_id": "",
        "location": "",
        "name": "Yuuki Takahashi",
        "organization": "LAPRAS株式会社",
        "permanent_id": 106259,
        "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/profile-images/1600489516",
        "team_only": false,
        "twitter_screen_name": "yktakaha4",
        "website_url": "https://yktakaha4.github.io/"
      },
      "page_views_count": null,
      "team_membership": null,
      "organization_url_name": null,
      "slide": false
    },
    {
      "rendered_body": "\n<h1>\n<span id=\"発端\" class=\"fragment\"></span><a href=\"#%E7%99%BA%E7%AB%AF\"><i class=\"fa fa-link\"></i></a>発端</h1>\n\n<p>ちょっとした調べ物の度にChromeのタブが増えていくのを憂いで先日<a href=\"https://kapeli.com/dash\" rel=\"nofollow noopener\" target=\"_blank\">Dash</a>を導入したのですが、<br>\n英語のできない筆者にとって欠かせない<a href=\"https://chrome.google.com/webstore/detail/google-translate/aapbdbdomjkkjkaonfhkkikfgjllcleb?hl=ja\" rel=\"nofollow noopener\" target=\"_blank\">翻訳アドイン</a>的な機能がなかったので、作ってみました。</p>\n\n<h1>\n<span id=\"作り方\" class=\"fragment\"></span><a href=\"#%E4%BD%9C%E3%82%8A%E6%96%B9\"><i class=\"fa fa-link\"></i></a>作り方</h1>\n\n<h2>\n<span id=\"automator\" class=\"fragment\"></span><a href=\"#automator\"><i class=\"fa fa-link\"></i></a>Automator</h2>\n\n<ul>\n<li>Spotlight &gt; Automator &gt; <a href=\"http://nicomelmo.blog118.fc2.com/blog-entry-929.html\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a>や<a href=\"http://shellscript.sunone.me/filter_sed.html#%E8%A1%8C%E9%A0%AD%E3%81%AB%E6%96%87%E5%AD%97%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a>を参考にしつつ、以下のように設定して任意の名前で保存</li>\n<li>なお作成したワークフローファイルは以下にできる。わかりづらいぞ\n\n<ul>\n<li>/Users/ユーザ名/Library/Servicies/xxx.workflow</li>\n</ul>\n</li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/83da8b5d910d43e3cd29ad4e2ecec7fc106012f3/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130363235392f64343434626439382d303965612d373662662d336438302d3133373862323535313033352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"618\" alt=\"automator.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2Fd444bd98-09ea-76bf-3d80-1378b2551035.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=8e317f20854b64a6569d0c3dc40fdb11\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/d444bd98-09ea-76bf-3d80-1378b2551035.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2Fd444bd98-09ea-76bf-3d80-1378b2551035.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=2215936f9fce4a065e36fe788e70638a 1x\" loading=\"lazy\"></a></p>\n\n<div class=\"code-frame\" data-lang=\"bash\">\n<div class=\"code-lang\"><span class=\"bold\">bash</span></div>\n<div class=\"highlight\"><pre><code><span class=\"nb\">cat</span> | perl <span class=\"nt\">-MURI</span>::Escape <span class=\"nt\">-lne</span> <span class=\"s1\">'print uri_escape($_)'</span> | <span class=\"nb\">sed</span> <span class=\"nt\">-e</span> <span class=\"s1\">'s/^/https:\\/\\/translate.google.com\\/?source=gtx_c#auto\\/ja\\//g'</span>\n</code></pre></div>\n</div>\n\n<h2>\n<span id=\"ショートカット\" class=\"fragment\"></span><a href=\"#%E3%82%B7%E3%83%A7%E3%83%BC%E3%83%88%E3%82%AB%E3%83%83%E3%83%88\"><i class=\"fa fa-link\"></i></a>ショートカット</h2>\n\n<ul>\n<li>Spotlight &gt; ショートカット &gt; サービスに先ほど作った機能が出てくるので、任意のショートカットを指定</li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/67a451f6385ba7c7ac4b77191b3accdc2c2f8deb/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130363235392f38646565616333352d663033392d666630372d316434652d6365313361636237653563332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"780\" alt=\"shortcut.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F8deeac35-f039-ff07-1d4e-ce13acb7e5c3.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=b0642232b945ccd07ef60b592afb62f0\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/8deeac35-f039-ff07-1d4e-ce13acb7e5c3.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F8deeac35-f039-ff07-1d4e-ce13acb7e5c3.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=915a2806c5aaffb7eed62857c1bf6291 1x\" loading=\"lazy\"></a></p>\n\n<h2>\n<span id=\"できあがり\" class=\"fragment\"></span><a href=\"#%E3%81%A7%E3%81%8D%E3%81%82%E3%81%8C%E3%82%8A\"><i class=\"fa fa-link\"></i></a>できあがり</h2>\n\n<ul>\n<li>Dashにて翻訳したい文字を選択 &gt; 右クリック &gt; Servicies or ショートカットキーでポップアップが立ち上がる</li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/9d5cba88fef2f218d37860d98a8369c3de9b3ff3/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130363235392f65363762666331632d346534372d646661632d623363302d3631386631616465366665362e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"611\" alt=\"howto.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2Fe67bfc1c-4e47-dfac-b3c0-618f1ade6fe6.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=2cdc6b9c92541d58a506dbfa95e4ce09\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/e67bfc1c-4e47-dfac-b3c0-618f1ade6fe6.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2Fe67bfc1c-4e47-dfac-b3c0-618f1ade6fe6.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=67486367eaf2d5b8c0e0cfec9df60b13 1x\" loading=\"lazy\"></a></p>\n\n<p><a href=\"https://camo.qiitausercontent.com/146035c7c97668331e64ffc6b7d82d9f2783b4a3/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130363235392f34303363633033662d643334392d633639392d396539352d3566646633396564383739352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"399\" alt=\"translate.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F403cc03f-d349-c699-9e95-5fdf39ed8795.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=df7fb2045efbb542bb40fd7b383ef54e\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/403cc03f-d349-c699-9e95-5fdf39ed8795.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F403cc03f-d349-c699-9e95-5fdf39ed8795.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=41f93ef2bd35873ab6d09eb56dcc6689 1x\" loading=\"lazy\"></a></p>\n\n<h1>\n<span id=\"余談\" class=\"fragment\"></span><a href=\"#%E4%BD%99%E8%AB%87\"><i class=\"fa fa-link\"></i></a>余談</h1>\n\n<ul>\n<li>Automator初めて触ったんですが、入出力周りの作り(というか説明)が謎で若干詰まりました...</li>\n<li>大した苦労もしていない割に、ポップアップの見た目がそれっぽくってウキウキです<img alt=\":ramen:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/1f35c.png\" title=\":ramen:\" width=\"20\" loading=\"lazy\">\n</li>\n</ul>\n",
      "body": "# 発端\nちょっとした調べ物の度にChromeのタブが増えていくのを憂いで先日[Dash](https://kapeli.com/dash)を導入したのですが、\n英語のできない筆者にとって欠かせない[翻訳アドイン](https://chrome.google.com/webstore/detail/google-translate/aapbdbdomjkkjkaonfhkkikfgjllcleb?hl=ja)的な機能がなかったので、作ってみました。\n\n# 作り方\n## Automator\n- Spotlight > Automator > [こちら](http://nicomelmo.blog118.fc2.com/blog-entry-929.html)や[こちら](http://shellscript.sunone.me/filter_sed.html#行頭に文字を追加する)を参考にしつつ、以下のように設定して任意の名前で保存\n- なお作成したワークフローファイルは以下にできる。わかりづらいぞ\n    - /Users/ユーザ名/Library/Servicies/xxx.workflow\n\n<img width=\"618\" alt=\"automator.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/d444bd98-09ea-76bf-3d80-1378b2551035.png\">\n\n```bash:bash\ncat | perl -MURI::Escape -lne 'print uri_escape($_)' | sed -e 's/^/https:\\/\\/translate.google.com\\/?source=gtx_c#auto\\/ja\\//g'\n```\n## ショートカット\n- Spotlight > ショートカット > サービスに先ほど作った機能が出てくるので、任意のショートカットを指定\n\n<img width=\"780\" alt=\"shortcut.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/8deeac35-f039-ff07-1d4e-ce13acb7e5c3.png\">\n\n## できあがり\n- Dashにて翻訳したい文字を選択 > 右クリック > Servicies or ショートカットキーでポップアップが立ち上がる\n\n<img width=\"611\" alt=\"howto.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/e67bfc1c-4e47-dfac-b3c0-618f1ade6fe6.png\">\n\n<img width=\"399\" alt=\"translate.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/403cc03f-d349-c699-9e95-5fdf39ed8795.png\">\n\n# 余談\n- Automator初めて触ったんですが、入出力周りの作り(というか説明)が謎で若干詰まりました...\n- 大した苦労もしていない割に、ポップアップの見た目がそれっぽくってウキウキです:ramen:\n",
      "coediting": false,
      "comments_count": 0,
      "created_at": "2017-05-31T05:22:51+09:00",
      "group": null,
      "id": "557e2e3e8e49ab9ca951",
      "likes_count": 17,
      "private": false,
      "reactions_count": 0,
      "stocks_count": 10,
      "tags": [
        {
          "name": "Dash",
          "versions": []
        },
        {
          "name": "Automator",
          "versions": []
        },
        {
          "name": "google翻訳",
          "versions": []
        }
      ],
      "title": "Dashに日本語翻訳機能を付ける",
      "updated_at": "2017-05-31T05:22:51+09:00",
      "url": "https://qiita.com/yktakaha4/items/557e2e3e8e49ab9ca951",
      "user": {
        "description": "",
        "facebook_id": "",
        "followees_count": 26,
        "followers_count": 23,
        "github_login_name": "yktakaha4",
        "id": "yktakaha4",
        "items_count": 27,
        "linkedin_id": "",
        "location": "",
        "name": "Yuuki Takahashi",
        "organization": "LAPRAS株式会社",
        "permanent_id": 106259,
        "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/profile-images/1600489516",
        "team_only": false,
        "twitter_screen_name": "yktakaha4",
        "website_url": "https://yktakaha4.github.io/"
      },
      "page_views_count": null,
      "team_membership": null,
      "organization_url_name": null,
      "slide": false
    },
    {
      "rendered_body": "\n<h1>\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n\n<p>社内での発表会のネタとしてWatson Developer Cloudを使ったWebアプリ開発に挑戦したので、そのまとめと備忘録になります。</p>\n\n<h1>\n<span id=\"アプリについて\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"><i class=\"fa fa-link\"></i></a>アプリについて</h1>\n\n<h2>\n<span id=\"機能できるとは言っていない\" class=\"fragment\"></span><a href=\"#%E6%A9%9F%E8%83%BD%E3%81%A7%E3%81%8D%E3%82%8B%E3%81%A8%E3%81%AF%E8%A8%80%E3%81%A3%E3%81%A6%E3%81%84%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a>機能（できるとは言っていない）</h2>\n\n<p>テキストを入力 or しゃべって質問すると、ある地点から半径1kmほどの飲食店の中から、Watsonがオススメのお店を紹介してくれます。<br>\n「からあげ定食が食べたい」「予算4000円までで魚系の居酒屋」など、思いついた言葉で問いかけることができます。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/82393493d0cbc587e89bfc3c5b1cbb87629664d1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130363235392f38323461313130392d626133362d346562662d353562342d3131343164326530653237342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F824a1109-ba36-4ebf-55b4-1141d2e0e274.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=527345ea07fb9cefa63f85e24e28899a\" alt=\"search.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/824a1109-ba36-4ebf-55b4-1141d2e0e274.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F824a1109-ba36-4ebf-55b4-1141d2e0e274.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=e45a7045e7b61faafe097744629191f3 1x\" loading=\"lazy\"></a></p>\n\n<p>お店は一覧形式で表示されます。★が多いほどオススメの飲食店となります。<br>\n気になったお店は一覧にピン留めできるので、ぐるなびHPの情報や現在地からの距離・道順を確認しながら、訪れるお店を決めます。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/f8ea8c492f22dac8879aca2dc50409858794fbcb/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130363235392f66336665646337632d393964352d356662352d613337372d3638376461346537306437392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2Ff3fedc7c-99d5-5fb5-a377-687da4e70d79.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=556de92de3aa10637d562f4fe7bded4a\" alt=\"map.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/f3fedc7c-99d5-5fb5-a377-687da4e70d79.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2Ff3fedc7c-99d5-5fb5-a377-687da4e70d79.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=1bd2a0f62453518e7027eb90a7fdb782 1x\" loading=\"lazy\"></a></p>\n\n<p>お店に行ったら（昔行ったことがある、でも構いません）、是非感想をコメントしてください。<br>\n「とっても美味しかった」なら他の人にもオススメできるお店、「店員が口喧嘩していた」ならあまりオススメできないお店など、コメントの内容を分析・学習し、検索結果が改善されます。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/ad932efaac89bc5557a9648e2bec63801644d461/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130363235392f30626566643461622d623831332d396233362d623539642d6434366434326338383737632e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F0befd4ab-b813-9b36-b59d-d46d42c8877c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=7698165955d18cba71ea0ecd688c958c\" alt=\"comment.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/0befd4ab-b813-9b36-b59d-d46d42c8877c.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F0befd4ab-b813-9b36-b59d-d46d42c8877c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=ae05df4a04e407f79a8e031a41c450f2 1x\" loading=\"lazy\"></a></p>\n\n<p><a href=\"https://camo.qiitausercontent.com/464c44d86662c103837941f2970fdf6870cb1063/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130363235392f30653132353462642d306637622d336332662d636434352d6536653830316363613762302e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F0e1254bd-0f7b-3c2f-cd45-e6e801cca7b0.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=5eaa12cdb6f14fe274ab236941f1a49a\" alt=\"classify.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/0e1254bd-0f7b-3c2f-cd45-e6e801cca7b0.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F0e1254bd-0f7b-3c2f-cd45-e6e801cca7b0.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=3f4ef91c68a14e6592e90d98012df972 1x\" loading=\"lazy\"></a></p>\n\n<h2>\n<span id=\"構成図\" class=\"fragment\"></span><a href=\"#%E6%A7%8B%E6%88%90%E5%9B%B3\"><i class=\"fa fa-link\"></i></a>構成図</h2>\n\n<p>最初は全てBluemix上に構築しようとも考えたのですが、ClearDBの無料枠がこころもとなかった（5MB）のと、個人所有のPCの開発環境を整える意味も兼ねてこのようになりました。</p>\n\n<p>クライアントのJSから適宜Node-RED上に用意したREST APIを呼び出して、検索結果表示やユーザーコメントの評価を行います。<br>\n<a href=\"https://camo.qiitausercontent.com/960d567b1e6dd6014d45164a97769c990aef82a2/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130363235392f65386337383438662d663335332d646530362d613430382d3264653361653431333233342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"726\" alt=\"kousei.png\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2Fe8c7848f-f353-de06-a408-2de3ae413234.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=2161894db22744108e3a0a2c124af4d1\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/e8c7848f-f353-de06-a408-2de3ae413234.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2Fe8c7848f-f353-de06-a408-2de3ae413234.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=6e35895ab9f05d15b8b47789efe4a42d 1x\" loading=\"lazy\"></a></p>\n\n<p>以下のような運用をイメージしています。</p>\n\n<ol>\n<li>ローカルにてR&amp;R及びNLCのデータ作成・投入</li>\n<li>システムをユーザーが使うと、ClearDB上にログが蓄積される</li>\n<li>ログが溜まったらローカルにエクスポートしてきて、再度データ作成・投入</li>\n<li>検索結果が改善される（されるとは言ってない）</li>\n</ol>\n\n<h1>\n<span id=\"所感\" class=\"fragment\"></span><a href=\"#%E6%89%80%E6%84%9F\"><i class=\"fa fa-link\"></i></a>所感</h1>\n\n<h2>\n<span id=\"retrieve-and-rank\" class=\"fragment\"></span><a href=\"#retrieve-and-rank\"><i class=\"fa fa-link\"></i></a>Retrieve and Rank</h2>\n\n<ul>\n<li>\n<a href=\"http://qiita.com/takaha4/items/0a1dcad29162f02b3908\" id=\"reference-52f0a286b030f6758986\">先日使ったばかり</a>ということもあって調子に乗っており、誤って高可用性クラスタを立ち上げて（＝クラスタ作成時に、サイズを指定して作成）開発してしまいました。\n\n<ul>\n<li>数日作業したところで慌てて気づいて再作成したが、8000円ほど課金が発生…。</li>\n<li>以下の要領で作成しましょう（cluster_sizeを空）</li>\n</ul>\n</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><code><span class=\"go\">curl -k -X POST -u \"**username:**password**\" \"https://gateway.watsonplatform.net/retrieve-and-rank/api/v1/solr_clusters\" -d \"{\\\"cluster_size\\\":\\\"\\\",\\\"cluster_name\\\":\\\"WatsonRestaurantCluster\\\"}\"\n</span></code></pre></div></div>\n\n<ul>\n<li>コレクションは以下のようにしました。\n\n<ul>\n<li>先達を真似しているだけなのですが、記事を書くにあたってTutorialを見たところ、<a href=\"https://www.ibm.com/watson/developercloud/doc/retrieve-rank/configure.shtml\" rel=\"nofollow noopener\" target=\"_blank\">違う書き方</a>が例示されていたので、間違っているのかもしれません…</li>\n</ul>\n</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"xml\">\n<div class=\"code-lang\"><span class=\"bold\">schema.xml</span></div>\n<div class=\"highlight\"><pre><code>   <span class=\"nt\">&lt;field</span> <span class=\"na\">name=</span><span class=\"s\">\"id\"</span> <span class=\"na\">type=</span><span class=\"s\">\"string\"</span> <span class=\"na\">indexed=</span><span class=\"s\">\"true\"</span> <span class=\"na\">stored=</span><span class=\"s\">\"true\"</span> <span class=\"na\">required=</span><span class=\"s\">\"true\"</span> <span class=\"na\">multiValued=</span><span class=\"s\">\"false\"</span> <span class=\"nt\">/&gt;</span> \n\n   <span class=\"nt\">&lt;field</span> <span class=\"na\">name=</span><span class=\"s\">\"shop_id\"</span> <span class=\"na\">type=</span><span class=\"s\">\"string\"</span> <span class=\"na\">indexed=</span><span class=\"s\">\"false\"</span> <span class=\"na\">stored=</span><span class=\"s\">\"true\"</span> <span class=\"na\">required=</span><span class=\"s\">\"true\"</span> <span class=\"na\">multiValued=</span><span class=\"s\">\"false\"</span> <span class=\"nt\">/&gt;</span> \n   <span class=\"nt\">&lt;field</span> <span class=\"na\">name=</span><span class=\"s\">\"vote_id\"</span> <span class=\"na\">type=</span><span class=\"s\">\"string\"</span> <span class=\"na\">indexed=</span><span class=\"s\">\"false\"</span> <span class=\"na\">stored=</span><span class=\"s\">\"true\"</span> <span class=\"na\">required=</span><span class=\"s\">\"true\"</span> <span class=\"na\">multiValued=</span><span class=\"s\">\"false\"</span> <span class=\"nt\">/&gt;</span> \n   <span class=\"nt\">&lt;field</span> <span class=\"na\">name=</span><span class=\"s\">\"shop_name\"</span> <span class=\"na\">type=</span><span class=\"s\">\"string\"</span> <span class=\"na\">indexed=</span><span class=\"s\">\"false\"</span> <span class=\"na\">stored=</span><span class=\"s\">\"true\"</span> <span class=\"na\">required=</span><span class=\"s\">\"true\"</span> <span class=\"na\">multiValued=</span><span class=\"s\">\"false\"</span> <span class=\"nt\">/&gt;</span> \n   <span class=\"nt\">&lt;field</span> <span class=\"na\">name=</span><span class=\"s\">\"shop_name_kana\"</span> <span class=\"na\">type=</span><span class=\"s\">\"string\"</span> <span class=\"na\">indexed=</span><span class=\"s\">\"false\"</span> <span class=\"na\">stored=</span><span class=\"s\">\"true\"</span> <span class=\"na\">required=</span><span class=\"s\">\"true\"</span> <span class=\"na\">multiValued=</span><span class=\"s\">\"false\"</span> <span class=\"nt\">/&gt;</span> \n   <span class=\"nt\">&lt;field</span> <span class=\"na\">name=</span><span class=\"s\">\"menu_name\"</span> <span class=\"na\">type=</span><span class=\"s\">\"string\"</span> <span class=\"na\">indexed=</span><span class=\"s\">\"false\"</span> <span class=\"na\">stored=</span><span class=\"s\">\"true\"</span> <span class=\"na\">required=</span><span class=\"s\">\"true\"</span> <span class=\"na\">multiValued=</span><span class=\"s\">\"false\"</span> <span class=\"nt\">/&gt;</span> \n   <span class=\"nt\">&lt;field</span> <span class=\"na\">name=</span><span class=\"s\">\"menu_name_kana\"</span> <span class=\"na\">type=</span><span class=\"s\">\"string\"</span> <span class=\"na\">indexed=</span><span class=\"s\">\"false\"</span> <span class=\"na\">stored=</span><span class=\"s\">\"true\"</span> <span class=\"na\">required=</span><span class=\"s\">\"true\"</span> <span class=\"na\">multiValued=</span><span class=\"s\">\"false\"</span> <span class=\"nt\">/&gt;</span> \n   <span class=\"nt\">&lt;field</span> <span class=\"na\">name=</span><span class=\"s\">\"latitude\"</span> <span class=\"na\">type=</span><span class=\"s\">\"string\"</span> <span class=\"na\">indexed=</span><span class=\"s\">\"false\"</span> <span class=\"na\">stored=</span><span class=\"s\">\"true\"</span> <span class=\"na\">required=</span><span class=\"s\">\"true\"</span> <span class=\"na\">multiValued=</span><span class=\"s\">\"false\"</span> <span class=\"nt\">/&gt;</span> \n   <span class=\"nt\">&lt;field</span> <span class=\"na\">name=</span><span class=\"s\">\"longitude\"</span> <span class=\"na\">type=</span><span class=\"s\">\"string\"</span> <span class=\"na\">indexed=</span><span class=\"s\">\"false\"</span> <span class=\"na\">stored=</span><span class=\"s\">\"true\"</span> <span class=\"na\">required=</span><span class=\"s\">\"true\"</span> <span class=\"na\">multiValued=</span><span class=\"s\">\"false\"</span> <span class=\"nt\">/&gt;</span> \n   <span class=\"nt\">&lt;field</span> <span class=\"na\">name=</span><span class=\"s\">\"shop_url\"</span> <span class=\"na\">type=</span><span class=\"s\">\"string\"</span> <span class=\"na\">indexed=</span><span class=\"s\">\"false\"</span> <span class=\"na\">stored=</span><span class=\"s\">\"true\"</span> <span class=\"na\">required=</span><span class=\"s\">\"true\"</span> <span class=\"na\">multiValued=</span><span class=\"s\">\"false\"</span> <span class=\"nt\">/&gt;</span> \n   <span class=\"nt\">&lt;field</span> <span class=\"na\">name=</span><span class=\"s\">\"image_url\"</span> <span class=\"na\">type=</span><span class=\"s\">\"string\"</span> <span class=\"na\">indexed=</span><span class=\"s\">\"false\"</span> <span class=\"na\">stored=</span><span class=\"s\">\"true\"</span> <span class=\"na\">required=</span><span class=\"s\">\"true\"</span> <span class=\"na\">multiValued=</span><span class=\"s\">\"false\"</span> <span class=\"nt\">/&gt;</span> \n   <span class=\"nt\">&lt;field</span> <span class=\"na\">name=</span><span class=\"s\">\"pr_text\"</span> <span class=\"na\">type=</span><span class=\"s\">\"string\"</span> <span class=\"na\">indexed=</span><span class=\"s\">\"false\"</span> <span class=\"na\">stored=</span><span class=\"s\">\"true\"</span> <span class=\"na\">required=</span><span class=\"s\">\"true\"</span> <span class=\"na\">multiValued=</span><span class=\"s\">\"false\"</span> <span class=\"nt\">/&gt;</span> \n\n   <span class=\"nt\">&lt;field</span> <span class=\"na\">name=</span><span class=\"s\">\"shop_text\"</span> <span class=\"na\">type=</span><span class=\"s\">\"watson_text_ja\"</span> <span class=\"na\">indexed=</span><span class=\"s\">\"false\"</span> <span class=\"na\">stored=</span><span class=\"s\">\"true\"</span> <span class=\"na\">required=</span><span class=\"s\">\"true\"</span> <span class=\"na\">multiValued=</span><span class=\"s\">\"false\"</span> <span class=\"nt\">/&gt;</span> \n\n   <span class=\"nt\">&lt;field</span> <span class=\"na\">name=</span><span class=\"s\">\"budget\"</span> <span class=\"na\">type=</span><span class=\"s\">\"int\"</span> <span class=\"na\">indexed=</span><span class=\"s\">\"true\"</span> <span class=\"na\">stored=</span><span class=\"s\">\"true\"</span> <span class=\"na\">required=</span><span class=\"s\">\"true\"</span> <span class=\"na\">multiValued=</span><span class=\"s\">\"false\"</span> <span class=\"nt\">/&gt;</span>\n</code></pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"xml\">\n<div class=\"code-lang\"><span class=\"bold\">schema.xml</span></div>\n<div class=\"highlight\"><pre><code>  <span class=\"nt\">&lt;fieldType</span> <span class=\"na\">name=</span><span class=\"s\">\"watson_text_ja\"</span> <span class=\"na\">indexed=</span><span class=\"s\">\"true\"</span> <span class=\"na\">stored=</span><span class=\"s\">\"true\"</span> <span class=\"na\">class=</span><span class=\"s\">\"com.ibm.watson.hector.plugins.fieldtype.WatsonTextField\"</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;analyzer</span> <span class=\"na\">type=</span><span class=\"s\">\"index\"</span><span class=\"nt\">&gt;</span>\n          <span class=\"nt\">&lt;tokenizer</span> <span class=\"na\">class=</span><span class=\"s\">\"solr.JapaneseTokenizerFactory\"</span> <span class=\"na\">mode=</span><span class=\"s\">\"search\"</span> <span class=\"na\">userDictionary=</span><span class=\"s\">\"lang/userdict_ja.txt\"</span> <span class=\"nt\">/&gt;</span>\n          <span class=\"nt\">&lt;filter</span> <span class=\"na\">class=</span><span class=\"s\">\"solr.SynonymFilterFactory\"</span> <span class=\"na\">synonyms=</span><span class=\"s\">\"synonyms.txt\"</span> <span class=\"na\">ignoreCase=</span><span class=\"s\">\"true\"</span> <span class=\"na\">expand=</span><span class=\"s\">\"true\"</span> <span class=\"na\">tokenizerFactory=</span><span class=\"s\">\"solr.JapaneseTokenizerFactory\"</span> <span class=\"na\">userDictionary=</span><span class=\"s\">\"lang/userdict_ja.txt\"</span><span class=\"nt\">/&gt;</span>\n          <span class=\"nt\">&lt;filter</span> <span class=\"na\">class=</span><span class=\"s\">\"solr.JapaneseBaseFormFilterFactory\"</span><span class=\"nt\">/&gt;</span>\n          <span class=\"nt\">&lt;filter</span> <span class=\"na\">class=</span><span class=\"s\">\"solr.CJKWidthFilterFactory\"</span><span class=\"nt\">/&gt;</span>\n          <span class=\"nt\">&lt;filter</span> <span class=\"na\">class=</span><span class=\"s\">\"solr.JapaneseKatakanaStemFilterFactory\"</span> <span class=\"na\">minimumLength=</span><span class=\"s\">\"4\"</span><span class=\"nt\">/&gt;</span>\n          <span class=\"nt\">&lt;filter</span> <span class=\"na\">class=</span><span class=\"s\">\"solr.LowerCaseFilterFactory\"</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;/analyzer&gt;</span>\n      <span class=\"nt\">&lt;analyzer</span> <span class=\"na\">type=</span><span class=\"s\">\"query\"</span><span class=\"nt\">&gt;</span>\n          <span class=\"nt\">&lt;tokenizer</span> <span class=\"na\">class=</span><span class=\"s\">\"solr.JapaneseTokenizerFactory\"</span> <span class=\"na\">mode=</span><span class=\"s\">\"search\"</span> <span class=\"na\">userDictionary=</span><span class=\"s\">\"lang/userdict_ja.txt\"</span> <span class=\"nt\">/&gt;</span>\n          <span class=\"nt\">&lt;filter</span> <span class=\"na\">class=</span><span class=\"s\">\"solr.SynonymFilterFactory\"</span> <span class=\"na\">synonyms=</span><span class=\"s\">\"synonyms.txt\"</span> <span class=\"na\">ignoreCase=</span><span class=\"s\">\"true\"</span> <span class=\"na\">expand=</span><span class=\"s\">\"true\"</span> <span class=\"na\">tokenizerFactory=</span><span class=\"s\">\"solr.JapaneseTokenizerFactory\"</span> <span class=\"na\">userDictionary=</span><span class=\"s\">\"lang/userdict_ja.txt\"</span><span class=\"nt\">/&gt;</span>\n          <span class=\"nt\">&lt;filter</span> <span class=\"na\">class=</span><span class=\"s\">\"solr.JapaneseBaseFormFilterFactory\"</span><span class=\"nt\">/&gt;</span>\n          <span class=\"nt\">&lt;filter</span> <span class=\"na\">class=</span><span class=\"s\">\"solr.JapanesePartOfSpeechStopFilterFactory\"</span> <span class=\"na\">tags=</span><span class=\"s\">\"lang/stoptags_ja.txt\"</span><span class=\"nt\">/&gt;</span>\n          <span class=\"nt\">&lt;filter</span> <span class=\"na\">class=</span><span class=\"s\">\"solr.CJKWidthFilterFactory\"</span><span class=\"nt\">/&gt;</span>\n          <span class=\"nt\">&lt;filter</span> <span class=\"na\">class=</span><span class=\"s\">\"solr.StopFilterFactory\"</span> <span class=\"na\">ignoreCase=</span><span class=\"s\">\"true\"</span> <span class=\"na\">words=</span><span class=\"s\">\"lang/stopwords_ja.txt\"</span><span class=\"nt\">/&gt;</span>\n          <span class=\"nt\">&lt;filter</span> <span class=\"na\">class=</span><span class=\"s\">\"solr.JapaneseKatakanaStemFilterFactory\"</span> <span class=\"na\">minimumLength=</span><span class=\"s\">\"4\"</span><span class=\"nt\">/&gt;</span>\n          <span class=\"nt\">&lt;filter</span> <span class=\"na\">class=</span><span class=\"s\">\"solr.LowerCaseFilterFactory\"</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;/analyzer&gt;</span>\n  <span class=\"nt\">&lt;/fieldType&gt;</span>\n</code></pre></div>\n</div>\n\n<h3>\n<span id=\"ドキュメントデータをどのように生成したかretrieve\" class=\"fragment\"></span><a href=\"#%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E3%81%A9%E3%81%AE%E3%82%88%E3%81%86%E3%81%AB%E7%94%9F%E6%88%90%E3%81%97%E3%81%9F%E3%81%8Bretrieve\"><i class=\"fa fa-link\"></i></a>ドキュメントデータをどのように生成したか（Retrieve）</h3>\n\n<ul>\n<li>\n<a href=\"http://api.gnavi.co.jp/api/manual/\" rel=\"nofollow noopener\" target=\"_blank\">ぐるなびAPI</a>を元ネタに1500件ほど生成</li>\n</ul>\n\n<ol>\n<li>ぐるなびのお店のPR文からドキュメント生成\n\n<ul>\n<li>APIから連携される店舗ID毎に1ドキュメント</li>\n</ul>\n</li>\n<li>ぐるなびの応援口コミからドキュメント生成\n\n<ul>\n<li>店舗ID+応援口コミIDに1ドキュメント</li>\n</ul>\n</li>\n<li>システム利用者のコメントからドキュメント生成\n\n<ul>\n<li>店舗ID+ユーザーコメントからドキュメント生成（NLCにてポジティブ評価されたもののみ）</li>\n</ul>\n</li>\n</ol>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">rar_documents.json</span></div>\n<div class=\"highlight\"><pre><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"id\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"5497472\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"shop_id\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"5497472\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"vote_id\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"shop_name\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"天下一品 五反田店\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"shop_name_kana\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"テンカイッピンゴタンダテン\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"menu_name\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"menu_name_kana\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"latitude\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"35.624377\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"longitude\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"139.723394\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"shop_url\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"http://r.gnavi.co.jp/b5tzzw2g0000/\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"image_url\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"pr_text\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"鶏と数種類の素材を時間をかけて煮込んだスープです。美容と健康にいいコラーゲンがいっぱいです。\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"shop_text\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"天下一品五反田店。テンカイッピンゴタンダテン。ラーメン 麺料理 その他。美容と健康にいいコラーゲンを豊富に含んでおり、他では絶対に味わうことができないスープです。他にも半チャーハンと中華そばがセットになった定食。ギョウザ、半ライス、中華そばがセットになったギョウザ定食。半チャーハン、ギョウザ、中華そばがセットになったサービス定食などメニューも豊富に取り揃えています。\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"budget\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">-1</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div>\n</div>\n\n<h3>\n<span id=\"学習データをどのように生成したかrank\" class=\"fragment\"></span><a href=\"#%E5%AD%A6%E7%BF%92%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E3%81%A9%E3%81%AE%E3%82%88%E3%81%86%E3%81%AB%E7%94%9F%E6%88%90%E3%81%97%E3%81%9F%E3%81%8Brank\"><i class=\"fa fa-link\"></i></a>学習データをどのように生成したか（Rank）</h3>\n\n<ul>\n<li>初期移行（ユーザーのシステム利用に伴い発生する学習データなし）の段階で750件ほど作成</li>\n</ul>\n\n<ol>\n<li>カテゴリーから質問文を生成し、ドキュメントに加点\n\n<ul>\n<li>「イタリアン」という検索に対して、「イタリアン」を含むドキュメントに加点</li>\n</ul>\n</li>\n<li>メニュー名から質問文を生成し、ドキュメントに加点\n\n<ul>\n<li>「唐揚げ定食」という検索に対して、「唐揚げ定食」を含むドキュメントに加点</li>\n</ul>\n</li>\n<li>詳細情報が閲覧されたドキュメントに加点\n\n<ul>\n<li>ユーザーが検索したあるクエリに対する検索結果の中で、GoogleMap表示やぐるなびHPへのリンクが押下されたドキュメントに加点</li>\n</ul>\n</li>\n<li>コメントが実施されたドキュメントに加減点\n\n<ul>\n<li>コメントをNLCで解析した結果がポジティブ評価だった場合加点、ネガティブ評価だった場合減点</li>\n</ul>\n</li>\n<li>ユーザー評価の高いドキュメントに加点\n\n<ul>\n<li>ユーザーが検索した全てのクエリの検索結果の中で、ぐるなびで応援口コミが多くついているお店に加点</li>\n<li>NLCの判断結果に基づいて加減点</li>\n</ul>\n</li>\n</ol>\n\n<div class=\"code-frame\" data-lang=\"text\">\n<div class=\"code-lang\"><span class=\"bold\">rar_training.csv</span></div>\n<div class=\"highlight\"><pre><code>\"%E3%83%AF%E3%83%83%E3%83%91%E3%83%BC\",\"6364602.681550\",\"2\"\n\"%E3%82%BF%E3%82%A4%E3%82%AC%E3%83%91%E3%82%AA\",\"7255599\",\"1\",\"7255599.4618610\",\"3\"\n\"%E5%A1%A9%E3%83%AC%E3%83%A2%E3%83%B3%E3%82%AC%E3%83%91%E3%82%AA\",\"e584801.1192601\",\"2\",\"6408790.4601796\",\"2\",\"geyc200.4614278\",\"4\",\"g044108.4609358\",\"4\",\"6085706.1451291\",\"1\"\n</code></pre></div>\n</div>\n\n<h2>\n<span id=\"辞書データsolr機能\" class=\"fragment\"></span><a href=\"#%E8%BE%9E%E6%9B%B8%E3%83%87%E3%83%BC%E3%82%BFsolr%E6%A9%9F%E8%83%BD\"><i class=\"fa fa-link\"></i></a>　辞書データ（Solr機能）</h2>\n\n<ul>\n<li>辞書の生成にあたって<a href=\"https://github.com/codelibs/elasticsearch-analysis-kuromoji-neologd\" rel=\"nofollow noopener\" target=\"_blank\">Kuromoji neologd</a>を使ったのですが、Kuromojiと比較して色々な語を認識できており、これが無料で使えるなんて…と感じ入りました。</li>\n<li>お店の名前は、ぐるなびAPIから読みと合わせて取得できたので、それを用いています。</li>\n</ul>\n\n<ol>\n<li>店名、メニュー名、カテゴリ名からユーザー辞書を生成\n\n<ul>\n<li>「こってりラーメン」という語で天一が検索上位に出て欲しい。</li>\n</ul>\n</li>\n<li>カテゴリ大分類で検索された時に、内包されるカテゴリ小分類が検索されるように、シノニム辞書を生成\n\n<ul>\n<li>「イタリアン」で検索した時に「ピザ」を含むドキュメントが検索されるようにする。</li>\n</ul>\n</li>\n<li>ストップワード辞書を適当に編集\n\n<ul>\n<li>「美味しい」、「お店」などの語は取り除いた方が良いような気がします。</li>\n<li>（有無で結果比較してないのでなんとも言えませんが…）</li>\n</ul>\n</li>\n</ol>\n\n<div class=\"code-frame\" data-lang=\"text\">\n<div class=\"code-lang\"><span class=\"bold\">userdict_ja.txt</span></div>\n<div class=\"highlight\"><pre><code>天下一品,天下一品,テンカイッピン,カスタム名詞\n鶏々味鳥,鶏々味鳥,トリドリミドリ,カスタム名詞\n魚匠五反田店,魚匠五反田店,ウオショウゴタンダテン,カスタム名詞\n〆サバ,〆サバ,〆サバ,カスタム名詞\nラフテー,ラフテー,ラフテー,カスタム名詞\n</code></pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"text\">\n<div class=\"code-lang\"><span class=\"bold\">synonyms.txt</span></div>\n<div class=\"highlight\"><pre><code>オーガニック =&gt; 薬膳料理 オーガニック料理 野菜料理 オーガニック\n創作 創作料理 =&gt; 創作和食 創作料理 無国籍料理\nイタリアン =&gt;  イタリアン イタリア料理 パスタ ピザ\nフレンチ =&gt; フレンチ フランス料理 ビストロ\n</code></pre></div>\n</div>\n\n<h2>\n<span id=\"natural-language-classifier\" class=\"fragment\"></span><a href=\"#natural-language-classifier\"><i class=\"fa fa-link\"></i></a>Natural Language Classifier</h2>\n\n<ul>\n<li>R&amp;Rに比べれば、随分簡単に使えました。（ちゃんと判定されるとは言ってない）</li>\n</ul>\n\n<h3>\n<span id=\"ポジネガ判定用の学習データをどのように作成したか\" class=\"fragment\"></span><a href=\"#%E3%83%9D%E3%82%B8%E3%83%8D%E3%82%AC%E5%88%A4%E5%AE%9A%E7%94%A8%E3%81%AE%E5%AD%A6%E7%BF%92%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E3%81%A9%E3%81%AE%E3%82%88%E3%81%86%E3%81%AB%E4%BD%9C%E6%88%90%E3%81%97%E3%81%9F%E3%81%8B\"><i class=\"fa fa-link\"></i></a>ポジネガ判定用の学習データをどのように作成したか</h3>\n\n<ul>\n<li>ポジ、ネガの2クラスに対して合計1600件ほど学習データを生成。</li>\n<li>R&amp;Rは否定の言葉をうまく汲み取ってくれない（例：「美味しくない」という検索に「美味しい」が引っかかる）印象がありましたが、（学習データでカバーされていれば）ややこしい言い方でも正しく判定されるのが面白いと思いました。</li>\n</ul>\n\n<ol>\n<li>ポジティブ（yummy）\n\n<ul>\n<li>ぐるなびAPIの応援口コミから、点数が高かったりイイねが多くついているレビューを句点毎に一定の長さに分割して登録。</li>\n</ul>\n</li>\n<li>ネガティブ（yacky）\n\n<ul>\n<li>ポジティブの逆（応援口コミ低評価）で生成できるのが期待値でしたが、ネガティブな評価が口コミにほとんど登録されておらず困惑…検閲でしょうか？</li>\n<li>結局2ちゃんねるや飲食店のレビューブログから手コピペで登録。</li>\n</ul>\n</li>\n</ol>\n\n<div class=\"code-frame\" data-lang=\"text\">\n<div class=\"code-lang\"><span class=\"bold\">nlc_training.csv</span></div>\n<div class=\"highlight\"><pre><code>\"お腹も満足\",\"yummy\"\n\"息子の大好物です\",\"yummy\"\n\"新鮮職人さんたちの威勢のよさも、気持ちいい\",\"yummy\"\n\"でかいおなかいっぱい\",\"yummy\"\n\"懐かしい味\",\"yummy\"\n\"ひどい店でした\",\"yacky\"\n\"お刺身の鮮度が悪くまずかった\",\"yacky\"\n\"品質が悪い。微妙\",\"yacky\"\n\"中途半端で良いところがない\",\"yacky\"\n\"美味しくない。安っぽい\",\"yacky\"\n</code></pre></div>\n</div>\n\n<h2>\n<span id=\"クライアント周り\" class=\"fragment\"></span><a href=\"#%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E5%91%A8%E3%82%8A\"><i class=\"fa fa-link\"></i></a>クライアント周り</h2>\n\n<ul>\n<li>R&amp;R、NLCよりも、フォントやアイコンを整理したり、興味本位で導入したbootstrapやGoogleMapsAPIの理解に時間がかかりました…</li>\n<li>予算による検索の絞り込みは、作り込みで検索文より金額を取得し、Solrのフィルタ機能を使ってやりました。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">予算判定</span></div>\n<div class=\"highlight\"><pre><code><span class=\"kd\">function</span> <span class=\"nx\">getBudgets</span><span class=\"p\">(</span><span class=\"nx\">query</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">B_MIN</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">B_MAX</span> <span class=\"o\">=</span> <span class=\"mi\">100000</span><span class=\"p\">;</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">B_RANGE</span> <span class=\"o\">=</span> <span class=\"mi\">500</span><span class=\"p\">;</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">budgets</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n    <span class=\"nx\">query</span> <span class=\"o\">=</span> <span class=\"nx\">query</span><span class=\"p\">.</span><span class=\"nx\">replace</span><span class=\"p\">(</span><span class=\"sr\">/０-９/g</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">s</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"nb\">String</span><span class=\"p\">.</span><span class=\"nx\">fromCharCode</span><span class=\"p\">(</span><span class=\"nx\">s</span><span class=\"p\">.</span><span class=\"nx\">charCodeAt</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mh\">0xFEE0</span><span class=\"p\">);</span>\n    <span class=\"p\">});</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">matches</span> <span class=\"o\">=</span> <span class=\"nx\">query</span><span class=\"p\">.</span><span class=\"nx\">match</span><span class=\"p\">(</span><span class=\"sr\">/</span><span class=\"se\">\\d</span><span class=\"sr\">+</span><span class=\"se\">(?=</span><span class=\"sr\">円</span><span class=\"se\">)</span><span class=\"sr\">|</span><span class=\"se\">(</span><span class=\"sr\">から|以上</span><span class=\"se\">)</span><span class=\"sr\">|</span><span class=\"se\">(</span><span class=\"sr\">まで|以内|未満|以下|足らず</span><span class=\"se\">)</span><span class=\"sr\">/g</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">matches</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">yens</span> <span class=\"o\">=</span> <span class=\"nx\">matches</span><span class=\"p\">.</span><span class=\"nx\">filter</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">y</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">isFinite</span><span class=\"p\">(</span><span class=\"nx\">y</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n                <span class=\"k\">return</span> <span class=\"nx\">y</span> <span class=\"o\">&gt;</span> <span class=\"nx\">B_MIN</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">y</span> <span class=\"o\">&lt;</span> <span class=\"nx\">B_MAX</span>\n            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">});</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">yens</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kd\">var</span> <span class=\"nx\">condition</span><span class=\"p\">;</span>\n            <span class=\"k\">try</span> <span class=\"p\">{</span>\n                <span class=\"nx\">condition</span> <span class=\"o\">=</span> <span class=\"nx\">matches</span><span class=\"p\">[</span><span class=\"nx\">matches</span><span class=\"p\">.</span><span class=\"nx\">indexOf</span><span class=\"p\">(</span><span class=\"nx\">yens</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n            <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"nx\">condition</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            <span class=\"nx\">yens</span> <span class=\"o\">=</span> <span class=\"nx\">yens</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">y</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">return</span> <span class=\"nb\">Number</span><span class=\"p\">(</span><span class=\"nx\">y</span><span class=\"p\">.</span><span class=\"nx\">replace</span><span class=\"p\">(</span><span class=\"sr\">/^0+/g</span><span class=\"p\">,</span> <span class=\"dl\">\"\"</span><span class=\"p\">));</span>\n            <span class=\"p\">});</span>\n\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">condition</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"sr\">/から|以上/g</span><span class=\"p\">.</span><span class=\"nx\">test</span><span class=\"p\">(</span><span class=\"nx\">condition</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n                    <span class=\"nx\">budgets</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                        <span class=\"na\">budget_min</span><span class=\"p\">:</span> <span class=\"nx\">yens</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n                        <span class=\"na\">budget_max</span><span class=\"p\">:</span> <span class=\"nx\">B_MAX</span>\n                    <span class=\"p\">};</span>\n                <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                    <span class=\"nx\">budgets</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                        <span class=\"na\">budget_min</span><span class=\"p\">:</span> <span class=\"nx\">B_MIN</span><span class=\"p\">,</span>\n                        <span class=\"na\">budget_max</span><span class=\"p\">:</span> <span class=\"nx\">yens</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                    <span class=\"p\">};</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                <span class=\"nx\">budgets</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                    <span class=\"na\">budget_min</span><span class=\"p\">:</span> <span class=\"nx\">yens</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"nx\">B_RANGE</span><span class=\"p\">,</span>\n                    <span class=\"na\">budget_max</span><span class=\"p\">:</span> <span class=\"nx\">yens</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"nx\">B_RANGE</span>\n                <span class=\"p\">};</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">yens</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">budgets</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                <span class=\"na\">budget_min</span><span class=\"p\">:</span> <span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">min</span><span class=\"p\">(</span><span class=\"nx\">yens</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"nx\">yens</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]),</span>\n                <span class=\"na\">budget_max</span><span class=\"p\">:</span> <span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">max</span><span class=\"p\">(</span><span class=\"nx\">yens</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"nx\">yens</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n            <span class=\"p\">};</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">budgets</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">budgets</span><span class=\"p\">.</span><span class=\"nx\">budget_min</span> <span class=\"o\">=</span> <span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">max</span><span class=\"p\">(</span><span class=\"nx\">B_MIN</span><span class=\"p\">,</span> <span class=\"nx\">budgets</span><span class=\"p\">.</span><span class=\"nx\">budget_min</span><span class=\"p\">);</span>\n        <span class=\"nx\">budgets</span><span class=\"p\">.</span><span class=\"nx\">budget_max</span> <span class=\"o\">=</span> <span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">min</span><span class=\"p\">(</span><span class=\"nx\">B_MAX</span><span class=\"p\">,</span> <span class=\"nx\">budgets</span><span class=\"p\">.</span><span class=\"nx\">budget_max</span><span class=\"p\">);</span>\n\n        <span class=\"k\">return</span> <span class=\"nx\">budgets</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n</div>\n\n<h2>\n<span id=\"サーバ周り開発環境\" class=\"fragment\"></span><a href=\"#%E3%82%B5%E3%83%BC%E3%83%90%E5%91%A8%E3%82%8A%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83\"><i class=\"fa fa-link\"></i></a>サーバ周り、開発環境</h2>\n\n<ul>\n<li>Node-REDは以下のような感じ。\n\n<ul>\n<li>\n<del>R&amp;RはHTTPノード、NLCは専用ノードでないとちゃんと動いてくれませんでした…。</del>そもそもノードのフォームに資格情報を書いたのですが、今調べたところ、Bluemix側でサービス接続設定してれば専用ノードでそのまま動くんでしょうか？</li>\n</ul>\n</li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/d4acd27a746362387874899715d6c93c3ed61ae5/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130363235392f31306464383462382d636161332d393630352d363830612d6466633835613663663764652e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F10dd84b8-caa3-9605-680a-dfc85a6cf7de.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=8a2974e68ba0068a631462ee6b6447bf\" alt=\"nodered.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/10dd84b8-caa3-9605-680a-dfc85a6cf7de.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F10dd84b8-caa3-9605-680a-dfc85a6cf7de.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=de022efb94745a2f939092fd1aef24c3 1x\" loading=\"lazy\"></a></p>\n\n<ul>\n<li>\n<p>Javaは仕事であまり触れられてなかったのですが、REST呼び出し、JSON→DB、DB→JSONorCSVなど色々できて楽しかったです。</p>\n\n<ul>\n<li>EclipseのMavenが参照追加や削除のたびにエラーとなり、と思えば唐突に治り、よくわからず。</li>\n<li>作業中生じたストレスの3/5ほどはMaven起因の気がします…</li>\n</ul>\n</li>\n<li><p>Ranker作成用学習データの生成にあたって、ある検索文の検索結果に対して返却されないドキュメントに加減点しようとするとtrain.pyにてエラーとなるため、JavaからSolrに対して検索をかけて、返却されるドキュメントを選別しています。</p></li>\n</ul>\n\n<h2>\n<span id=\"雑記\" class=\"fragment\"></span><a href=\"#%E9%9B%91%E8%A8%98\"><i class=\"fa fa-link\"></i></a>雑記</h2>\n\n<ul>\n<li>年末年始にだらだらやって4~5人日ほどで完成。</li>\n<li>無料枠を考慮しなかった場合、維持費は〜5000円/月程度か？（Ranker1インスタンス1000円+NLC1インスタンス2000円+Node-RED〜1500円+学習API）\n\n<ul>\n<li>無料枠あり&amp;作成しているアプリがこれだけの場合は維持費は0円にできる（はず？）</li>\n<li>本番稼働時はこちらと言われている、<a href=\"https://www.google.co.jp/webhp?sourceid=chrome-instant&amp;ion=1&amp;espv=2&amp;ie=UTF-8#q=(0.3+*+24+*+30)%E3%83%89%E3%83%AB+%E6%97%A5%E6%9C%AC%E5%86%86\" rel=\"nofollow noopener\" target=\"_blank\">高可用性クラスタを使うと…</a>\n</li>\n</ul>\n</li>\n<li>肝心の学習の部分（RankerやNLCの仕組み・より良い作り方）については、よくわからず…。\n\n<ul>\n<li>特にR&amp;Rについては、見た目に納得のいく検索結果にはなりませんでした。Ranker生成がお粗末だからだと思います…。</li>\n<li>課金も気にしつつ、できれば近く改修したいと思います。</li>\n</ul>\n</li>\n</ul>\n\n<h1>\n<span id=\"ソースコード\" class=\"fragment\"></span><a href=\"#%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89\"><i class=\"fa fa-link\"></i></a>ソースコード</h1>\n\n<p><a href=\"https://github.com/yktakaha4/WatsonRestaurant\" rel=\"nofollow noopener\" target=\"_blank\">Github</a>に公開してみました。</p>\n",
      "body": "# はじめに\n社内での発表会のネタとしてWatson Developer Cloudを使ったWebアプリ開発に挑戦したので、そのまとめと備忘録になります。\n\n# アプリについて\n## 機能（できるとは言っていない）\nテキストを入力 or しゃべって質問すると、ある地点から半径1kmほどの飲食店の中から、Watsonがオススメのお店を紹介してくれます。\n「からあげ定食が食べたい」「予算4000円までで魚系の居酒屋」など、思いついた言葉で問いかけることができます。\n\n![search.png](https://qiita-image-store.s3.amazonaws.com/0/106259/824a1109-ba36-4ebf-55b4-1141d2e0e274.png)\n\nお店は一覧形式で表示されます。★が多いほどオススメの飲食店となります。\n気になったお店は一覧にピン留めできるので、ぐるなびHPの情報や現在地からの距離・道順を確認しながら、訪れるお店を決めます。\n\n![map.png](https://qiita-image-store.s3.amazonaws.com/0/106259/f3fedc7c-99d5-5fb5-a377-687da4e70d79.png)\n\nお店に行ったら（昔行ったことがある、でも構いません）、是非感想をコメントしてください。\n「とっても美味しかった」なら他の人にもオススメできるお店、「店員が口喧嘩していた」ならあまりオススメできないお店など、コメントの内容を分析・学習し、検索結果が改善されます。\n\n![comment.png](https://qiita-image-store.s3.amazonaws.com/0/106259/0befd4ab-b813-9b36-b59d-d46d42c8877c.png)\n\n![classify.png](https://qiita-image-store.s3.amazonaws.com/0/106259/0e1254bd-0f7b-3c2f-cd45-e6e801cca7b0.png)\n\n## 構成図\n最初は全てBluemix上に構築しようとも考えたのですが、ClearDBの無料枠がこころもとなかった（5MB）のと、個人所有のPCの開発環境を整える意味も兼ねてこのようになりました。\n\nクライアントのJSから適宜Node-RED上に用意したREST APIを呼び出して、検索結果表示やユーザーコメントの評価を行います。\n<img width=\"726\" alt=\"kousei.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/e8c7848f-f353-de06-a408-2de3ae413234.png\">\n\n以下のような運用をイメージしています。\n\n1. ローカルにてR&R及びNLCのデータ作成・投入\n2. システムをユーザーが使うと、ClearDB上にログが蓄積される\n3. ログが溜まったらローカルにエクスポートしてきて、再度データ作成・投入\n4. 検索結果が改善される（されるとは言ってない）\n\n# 所感\n## Retrieve and Rank\n- [先日使ったばかり](http://qiita.com/takaha4/items/0a1dcad29162f02b3908)ということもあって調子に乗っており、誤って高可用性クラスタを立ち上げて（＝クラスタ作成時に、サイズを指定して作成）開発してしまいました。\n    - 数日作業したところで慌てて気づいて再作成したが、8000円ほど課金が発生…。\n    - 以下の要領で作成しましょう（cluster_sizeを空）\n\n```shell-session\ncurl -k -X POST -u \"**username:**password**\" \"https://gateway.watsonplatform.net/retrieve-and-rank/api/v1/solr_clusters\" -d \"{\\\"cluster_size\\\":\\\"\\\",\\\"cluster_name\\\":\\\"WatsonRestaurantCluster\\\"}\"\n```\n\n- コレクションは以下のようにしました。\n    - 先達を真似しているだけなのですが、記事を書くにあたってTutorialを見たところ、[違う書き方](https://www.ibm.com/watson/developercloud/doc/retrieve-rank/configure.shtml)が例示されていたので、間違っているのかもしれません…\n\n```xml:schema.xml\n   <field name=\"id\" type=\"string\" indexed=\"true\" stored=\"true\" required=\"true\" multiValued=\"false\" /> \n\n   <field name=\"shop_id\" type=\"string\" indexed=\"false\" stored=\"true\" required=\"true\" multiValued=\"false\" /> \n   <field name=\"vote_id\" type=\"string\" indexed=\"false\" stored=\"true\" required=\"true\" multiValued=\"false\" /> \n   <field name=\"shop_name\" type=\"string\" indexed=\"false\" stored=\"true\" required=\"true\" multiValued=\"false\" /> \n   <field name=\"shop_name_kana\" type=\"string\" indexed=\"false\" stored=\"true\" required=\"true\" multiValued=\"false\" /> \n   <field name=\"menu_name\" type=\"string\" indexed=\"false\" stored=\"true\" required=\"true\" multiValued=\"false\" /> \n   <field name=\"menu_name_kana\" type=\"string\" indexed=\"false\" stored=\"true\" required=\"true\" multiValued=\"false\" /> \n   <field name=\"latitude\" type=\"string\" indexed=\"false\" stored=\"true\" required=\"true\" multiValued=\"false\" /> \n   <field name=\"longitude\" type=\"string\" indexed=\"false\" stored=\"true\" required=\"true\" multiValued=\"false\" /> \n   <field name=\"shop_url\" type=\"string\" indexed=\"false\" stored=\"true\" required=\"true\" multiValued=\"false\" /> \n   <field name=\"image_url\" type=\"string\" indexed=\"false\" stored=\"true\" required=\"true\" multiValued=\"false\" /> \n   <field name=\"pr_text\" type=\"string\" indexed=\"false\" stored=\"true\" required=\"true\" multiValued=\"false\" /> \n\n   <field name=\"shop_text\" type=\"watson_text_ja\" indexed=\"false\" stored=\"true\" required=\"true\" multiValued=\"false\" /> \n\n   <field name=\"budget\" type=\"int\" indexed=\"true\" stored=\"true\" required=\"true\" multiValued=\"false\" />\n```\n\n```xml:schema.xml\n  <fieldType name=\"watson_text_ja\" indexed=\"true\" stored=\"true\" class=\"com.ibm.watson.hector.plugins.fieldtype.WatsonTextField\">\n      <analyzer type=\"index\">\n          <tokenizer class=\"solr.JapaneseTokenizerFactory\" mode=\"search\" userDictionary=\"lang/userdict_ja.txt\" />\n          <filter class=\"solr.SynonymFilterFactory\" synonyms=\"synonyms.txt\" ignoreCase=\"true\" expand=\"true\" tokenizerFactory=\"solr.JapaneseTokenizerFactory\" userDictionary=\"lang/userdict_ja.txt\"/>\n          <filter class=\"solr.JapaneseBaseFormFilterFactory\"/>\n          <filter class=\"solr.CJKWidthFilterFactory\"/>\n          <filter class=\"solr.JapaneseKatakanaStemFilterFactory\" minimumLength=\"4\"/>\n          <filter class=\"solr.LowerCaseFilterFactory\"/>\n      </analyzer>\n      <analyzer type=\"query\">\n          <tokenizer class=\"solr.JapaneseTokenizerFactory\" mode=\"search\" userDictionary=\"lang/userdict_ja.txt\" />\n          <filter class=\"solr.SynonymFilterFactory\" synonyms=\"synonyms.txt\" ignoreCase=\"true\" expand=\"true\" tokenizerFactory=\"solr.JapaneseTokenizerFactory\" userDictionary=\"lang/userdict_ja.txt\"/>\n          <filter class=\"solr.JapaneseBaseFormFilterFactory\"/>\n          <filter class=\"solr.JapanesePartOfSpeechStopFilterFactory\" tags=\"lang/stoptags_ja.txt\"/>\n          <filter class=\"solr.CJKWidthFilterFactory\"/>\n          <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"lang/stopwords_ja.txt\"/>\n          <filter class=\"solr.JapaneseKatakanaStemFilterFactory\" minimumLength=\"4\"/>\n          <filter class=\"solr.LowerCaseFilterFactory\"/>\n      </analyzer>\n  </fieldType>\n```\n\n### ドキュメントデータをどのように生成したか（Retrieve）\n\n- [ぐるなびAPI](http://api.gnavi.co.jp/api/manual/)を元ネタに1500件ほど生成\n\n1. ぐるなびのお店のPR文からドキュメント生成\n    - APIから連携される店舗ID毎に1ドキュメント\n2. ぐるなびの応援口コミからドキュメント生成\n    - 店舗ID+応援口コミIDに1ドキュメント\n3. システム利用者のコメントからドキュメント生成\n    - 店舗ID+ユーザーコメントからドキュメント生成（NLCにてポジティブ評価されたもののみ）\n\n```json:rar_documents.json\n{\n  \"id\" : \"5497472\",\n  \"shop_id\" : \"5497472\",\n  \"vote_id\" : \"\",\n  \"shop_name\" : \"天下一品 五反田店\",\n  \"shop_name_kana\" : \"テンカイッピンゴタンダテン\",\n  \"menu_name\" : \"\",\n  \"menu_name_kana\" : \"\",\n  \"latitude\" : \"35.624377\",\n  \"longitude\" : \"139.723394\",\n  \"shop_url\" : \"http://r.gnavi.co.jp/b5tzzw2g0000/\",\n  \"image_url\" : \"\",\n  \"pr_text\" : \"鶏と数種類の素材を時間をかけて煮込んだスープです。美容と健康にいいコラーゲンがいっぱいです。\",\n  \"shop_text\" : \"天下一品五反田店。テンカイッピンゴタンダテン。ラーメン 麺料理 その他。美容と健康にいいコラーゲンを豊富に含んでおり、他では絶対に味わうことができないスープです。他にも半チャーハンと中華そばがセットになった定食。ギョウザ、半ライス、中華そばがセットになったギョウザ定食。半チャーハン、ギョウザ、中華そばがセットになったサービス定食などメニューも豊富に取り揃えています。\",\n  \"budget\" : -1\n}\n```\n\n### 学習データをどのように生成したか（Rank）\n\n- 初期移行（ユーザーのシステム利用に伴い発生する学習データなし）の段階で750件ほど作成\n\n1. カテゴリーから質問文を生成し、ドキュメントに加点\n    - 「イタリアン」という検索に対して、「イタリアン」を含むドキュメントに加点\n2. メニュー名から質問文を生成し、ドキュメントに加点\n    - 「唐揚げ定食」という検索に対して、「唐揚げ定食」を含むドキュメントに加点\n3. 詳細情報が閲覧されたドキュメントに加点\n    - ユーザーが検索したあるクエリに対する検索結果の中で、GoogleMap表示やぐるなびHPへのリンクが押下されたドキュメントに加点\n4. コメントが実施されたドキュメントに加減点\n    - コメントをNLCで解析した結果がポジティブ評価だった場合加点、ネガティブ評価だった場合減点\n5. ユーザー評価の高いドキュメントに加点\n    - ユーザーが検索した全てのクエリの検索結果の中で、ぐるなびで応援口コミが多くついているお店に加点\n    - NLCの判断結果に基づいて加減点\n\n```text:rar_training.csv\n\"%E3%83%AF%E3%83%83%E3%83%91%E3%83%BC\",\"6364602.681550\",\"2\"\n\"%E3%82%BF%E3%82%A4%E3%82%AC%E3%83%91%E3%82%AA\",\"7255599\",\"1\",\"7255599.4618610\",\"3\"\n\"%E5%A1%A9%E3%83%AC%E3%83%A2%E3%83%B3%E3%82%AC%E3%83%91%E3%82%AA\",\"e584801.1192601\",\"2\",\"6408790.4601796\",\"2\",\"geyc200.4614278\",\"4\",\"g044108.4609358\",\"4\",\"6085706.1451291\",\"1\"\n```\n\n##　辞書データ（Solr機能）\n\n- 辞書の生成にあたって[Kuromoji neologd](https://github.com/codelibs/elasticsearch-analysis-kuromoji-neologd)を使ったのですが、Kuromojiと比較して色々な語を認識できており、これが無料で使えるなんて…と感じ入りました。\n- お店の名前は、ぐるなびAPIから読みと合わせて取得できたので、それを用いています。\n\n1. 店名、メニュー名、カテゴリ名からユーザー辞書を生成\n    - 「こってりラーメン」という語で天一が検索上位に出て欲しい。\n2. カテゴリ大分類で検索された時に、内包されるカテゴリ小分類が検索されるように、シノニム辞書を生成\n    - 「イタリアン」で検索した時に「ピザ」を含むドキュメントが検索されるようにする。\n3. ストップワード辞書を適当に編集\n    - 「美味しい」、「お店」などの語は取り除いた方が良いような気がします。\n    - （有無で結果比較してないのでなんとも言えませんが…）\n\n```text:userdict_ja.txt\n天下一品,天下一品,テンカイッピン,カスタム名詞\n鶏々味鳥,鶏々味鳥,トリドリミドリ,カスタム名詞\n魚匠五反田店,魚匠五反田店,ウオショウゴタンダテン,カスタム名詞\n〆サバ,〆サバ,〆サバ,カスタム名詞\nラフテー,ラフテー,ラフテー,カスタム名詞\n```\n\n```text:synonyms.txt\nオーガニック => 薬膳料理 オーガニック料理 野菜料理 オーガニック\n創作 創作料理 => 創作和食 創作料理 無国籍料理\nイタリアン =>  イタリアン イタリア料理 パスタ ピザ\nフレンチ => フレンチ フランス料理 ビストロ\n```\n\n## Natural Language Classifier\n\n- R&Rに比べれば、随分簡単に使えました。（ちゃんと判定されるとは言ってない）\n\n### ポジネガ判定用の学習データをどのように作成したか\n- ポジ、ネガの2クラスに対して合計1600件ほど学習データを生成。\n- R&Rは否定の言葉をうまく汲み取ってくれない（例：「美味しくない」という検索に「美味しい」が引っかかる）印象がありましたが、（学習データでカバーされていれば）ややこしい言い方でも正しく判定されるのが面白いと思いました。\n\n1. ポジティブ（yummy）\n    - ぐるなびAPIの応援口コミから、点数が高かったりイイねが多くついているレビューを句点毎に一定の長さに分割して登録。\n2. ネガティブ（yacky）\n    - ポジティブの逆（応援口コミ低評価）で生成できるのが期待値でしたが、ネガティブな評価が口コミにほとんど登録されておらず困惑…検閲でしょうか？\n    - 結局2ちゃんねるや飲食店のレビューブログから手コピペで登録。\n\n```text:nlc_training.csv\n\"お腹も満足\",\"yummy\"\n\"息子の大好物です\",\"yummy\"\n\"新鮮職人さんたちの威勢のよさも、気持ちいい\",\"yummy\"\n\"でかいおなかいっぱい\",\"yummy\"\n\"懐かしい味\",\"yummy\"\n\"ひどい店でした\",\"yacky\"\n\"お刺身の鮮度が悪くまずかった\",\"yacky\"\n\"品質が悪い。微妙\",\"yacky\"\n\"中途半端で良いところがない\",\"yacky\"\n\"美味しくない。安っぽい\",\"yacky\"\n```\n\n## クライアント周り\n\n- R&R、NLCよりも、フォントやアイコンを整理したり、興味本位で導入したbootstrapやGoogleMapsAPIの理解に時間がかかりました…\n- 予算による検索の絞り込みは、作り込みで検索文より金額を取得し、Solrのフィルタ機能を使ってやりました。\n\n```js:予算判定\nfunction getBudgets(query) {\n    var B_MIN = 0;\n    var B_MAX = 100000;\n    var B_RANGE = 500;\n    var budgets = null;\n    query = query.replace(/０-９/g, function(s) {\n        return String.fromCharCode(s.charCodeAt(0) - 0xFEE0);\n    });\n    var matches = query.match(/\\d+(?=円)|(から|以上)|(まで|以内|未満|以下|足らず)/g);\n    if (matches) {\n        var yens = matches.filter(function(y) {\n            if (isFinite(y)) {\n                return y > B_MIN && y < B_MAX\n            } else {\n                return false;\n            }\n        });\n        if (yens.length == 1) {\n            var condition;\n            try {\n                condition = matches[matches.indexOf(yens[0]) + 1];\n            } catch (e) {\n                condition = null;\n            }\n            yens = yens.map(function(y) {\n                return Number(y.replace(/^0+/g, \"\"));\n            });\n\n            if (condition) {\n                if (/から|以上/g.test(condition)) {\n                    budgets = {\n                        budget_min: yens[0],\n                        budget_max: B_MAX\n                    };\n                } else {\n                    budgets = {\n                        budget_min: B_MIN,\n                        budget_max: yens[0]\n                    };\n                }\n            } else {\n                budgets = {\n                    budget_min: yens[0] - B_RANGE,\n                    budget_max: yens[0] + B_RANGE\n                };\n            }\n        } else if (yens.length >= 2) {\n            budgets = {\n                budget_min: Math.min(yens[0], yens[1]),\n                budget_max: Math.max(yens[0], yens[1])\n            };\n        }\n    }\n    if (budgets) {\n        budgets.budget_min = Math.max(B_MIN, budgets.budget_min);\n        budgets.budget_max = Math.min(B_MAX, budgets.budget_max);\n\n        return budgets;\n    } else {\n        return null;\n    }\n}\n```\n\n## サーバ周り、開発環境\n\n- Node-REDは以下のような感じ。\n    - ~~R&RはHTTPノード、NLCは専用ノードでないとちゃんと動いてくれませんでした…。~~そもそもノードのフォームに資格情報を書いたのですが、今調べたところ、Bluemix側でサービス接続設定してれば専用ノードでそのまま動くんでしょうか？\n\n![nodered.png](https://qiita-image-store.s3.amazonaws.com/0/106259/10dd84b8-caa3-9605-680a-dfc85a6cf7de.png)\n\n- Javaは仕事であまり触れられてなかったのですが、REST呼び出し、JSON→DB、DB→JSONorCSVなど色々できて楽しかったです。\n    - EclipseのMavenが参照追加や削除のたびにエラーとなり、と思えば唐突に治り、よくわからず。\n    - 作業中生じたストレスの3/5ほどはMaven起因の気がします…\n\n- Ranker作成用学習データの生成にあたって、ある検索文の検索結果に対して返却されないドキュメントに加減点しようとするとtrain.pyにてエラーとなるため、JavaからSolrに対して検索をかけて、返却されるドキュメントを選別しています。\n\n## 雑記\n- 年末年始にだらだらやって4~5人日ほどで完成。\n- 無料枠を考慮しなかった場合、維持費は〜5000円/月程度か？（Ranker1インスタンス1000円+NLC1インスタンス2000円+Node-RED〜1500円+学習API）\n    - 無料枠あり&作成しているアプリがこれだけの場合は維持費は0円にできる（はず？）\n    - 本番稼働時はこちらと言われている、[高可用性クラスタを使うと…](https://www.google.co.jp/webhp?sourceid=chrome-instant&ion=1&espv=2&ie=UTF-8#q=(0.3+*+24+*+30)%E3%83%89%E3%83%AB+%E6%97%A5%E6%9C%AC%E5%86%86)\n- 肝心の学習の部分（RankerやNLCの仕組み・より良い作り方）については、よくわからず…。\n    - 特にR&Rについては、見た目に納得のいく検索結果にはなりませんでした。Ranker生成がお粗末だからだと思います…。\n    - 課金も気にしつつ、できれば近く改修したいと思います。\n\n# ソースコード\n[Github](https://github.com/yktakaha4/WatsonRestaurant)に公開してみました。\n",
      "coediting": false,
      "comments_count": 0,
      "created_at": "2017-03-04T09:32:01+09:00",
      "group": null,
      "id": "d14d643db28bc63c7b3f",
      "likes_count": 16,
      "private": false,
      "reactions_count": 0,
      "stocks_count": 16,
      "tags": [
        {
          "name": "Java",
          "versions": []
        },
        {
          "name": "JavaScript",
          "versions": []
        },
        {
          "name": "Bluemix",
          "versions": []
        },
        {
          "name": "Watson",
          "versions": []
        }
      ],
      "title": "IBM Watson + ぐるなびAPIでレストラン検索アプリを作る(ソース付き)",
      "updated_at": "2018-12-23T00:59:34+09:00",
      "url": "https://qiita.com/yktakaha4/items/d14d643db28bc63c7b3f",
      "user": {
        "description": "",
        "facebook_id": "",
        "followees_count": 26,
        "followers_count": 23,
        "github_login_name": "yktakaha4",
        "id": "yktakaha4",
        "items_count": 27,
        "linkedin_id": "",
        "location": "",
        "name": "Yuuki Takahashi",
        "organization": "LAPRAS株式会社",
        "permanent_id": 106259,
        "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/profile-images/1600489516",
        "team_only": false,
        "twitter_screen_name": "yktakaha4",
        "website_url": "https://yktakaha4.github.io/"
      },
      "page_views_count": null,
      "team_membership": null,
      "organization_url_name": null,
      "slide": false
    },
    {
      "rendered_body": "\n<h1>\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n\n<p>とあるハッカソンに参加した折、使う機会がありましたので、その時したことの備忘録となります。<br>\n最後までやると、学習済(?)の検索APIをWebから叩けるようになります。</p>\n\n<p>(私のような)Bluemixも機械学習も触ったことがない、でもなんとなく試してみたい…という方でもなるべく苦しまないように、ファイルやコマンドの情報を色々と補完しました。<br>\n間違い・勘違い等ありましたらご指摘頂ければ幸いです。</p>\n\n<p>[追記]<br>\nハッカソンの後に、Retrieve and RankとNatural Language Classifierを用いてレストラン検索アプリを作成しました。<br>\n辞書や学習の詳細についても記載しましたので、<a href=\"http://qiita.com/takaha4/items/d14d643db28bc63c7b3f\" id=\"reference-e4e92bc3aab71fe0d400\">よろしければご覧ください。</a></p>\n\n<h1>\n<span id=\"参考資料\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83%E8%B3%87%E6%96%99\"><i class=\"fa fa-link\"></i></a>参考資料</h1>\n\n<p>本記事は、以下を始めとする各種資料を見ながら作業した結果のまとめになります。<br>\n先に記事を書かれていた方々のお陰で、ハッカソン当日はなんとか完成にこぎつけました。<br>\nありがとうございました(感謝)。</p>\n\n<ul>\n<li>\n<p>概要</p>\n\n<ul>\n<li>\n<a href=\"http://www.slideshare.net/komine/watson-api-20160716-rev02\" rel=\"nofollow noopener\" target=\"_blank\">Watson API トレーニング 20160716 rev02</a>\n\n<ul>\n<li>p54くらいからRetrieve and Rankの話ですが、時間があれば最初から読んだ方がよいと思います</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Retrieve and Rank</p>\n\n<ul>\n<li>\n<p><a href=\"https://www.ibm.com/watson/developercloud/doc/retrieve-rank/tutorial.shtml\" rel=\"nofollow noopener\" target=\"_blank\">Tutorial</a></p>\n\n<ul>\n<li>英語ですが、詳細な手順&amp;各種サンプルファイルがあります</li>\n</ul>\n</li>\n<li><p><a href=\"http://qiita.com/VegaSato/items/6d2d03d6a8b42adcf87e\" id=\"reference-9312b7a92042b93949e5\">BluemixのRetrieve&amp;Rankによる質問応答システムを試してみた</a></p></li>\n<li><p><a href=\"https://www.ibm.com/developerworks/community/wikis/home?lang=en#!/wiki/%E3%81%93%E3%81%BF%E3%81%AD%E3%81%AE%E6%8A%80%E8%A1%93%E3%83%A1%E3%83%A2/page/Retrieve%20and%20Rank%20%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%AE%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95\" rel=\"nofollow noopener\" target=\"_blank\">Retrieve and Rank サービスの使用方法</a></p></li>\n<li>\n<p><a href=\"http://www.ibm.com/watson/developercloud/retrieve-and-rank/api/v1/\" rel=\"nofollow noopener\" target=\"_blank\">APIリファレンス(Retrieve and Rank)</a></p>\n\n<ul>\n<li>まずこちらを読んで、見つからなかったら↓を探すのがよいと思います</li>\n</ul>\n</li>\n<li><p><a href=\"https://cwiki.apache.org/confluence/display/solr/Apache+Solr+Reference+Guide\" rel=\"nofollow noopener\" target=\"_blank\">リファレンス(Apache Solr)</a></p></li>\n</ul>\n</li>\n<li>\n<p>Node-RED</p>\n\n<ul>\n<li><a href=\"http://ascii.jp/elem/000/001/139/1139255/\" rel=\"nofollow noopener\" target=\"_blank\">コードをほとんど書かずにNode-REDでWebアプリを作ろう</a></li>\n<li><a href=\"http://qiita.com/VegaSato/items/7ce47e6a9c06c290b212\" id=\"reference-01da988953dc2fa7461a\">Bluemix Node-REDを使ってWatson APIを呼び出す</a></li>\n</ul>\n</li>\n</ul>\n\n<h1>\n<span id=\"手順\" class=\"fragment\"></span><a href=\"#%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>手順</h1>\n\n<h2>\n<span id=\"前提\" class=\"fragment\"></span><a href=\"#%E5%89%8D%E6%8F%90\"><i class=\"fa fa-link\"></i></a>前提</h2>\n\n<ul>\n<li><p>筆者はMacbookにて作業を実施</p></li>\n<li><p>ブラウザはChrome、HTMLからのテストに<a href=\"http://brackets.io/\" rel=\"nofollow noopener\" target=\"_blank\">Brackets</a>、その他テキストエディタとして<a href=\"https://coteditor.com/\" rel=\"nofollow noopener\" target=\"_blank\">CotEditor</a>を使用</p></li>\n<li><p>Windowsでも<a href=\"https://www.google.co.jp/webhp?sourceid=chrome-instant&amp;ion=1&amp;espv=2&amp;ie=UTF-8#q=windows%20curl\" rel=\"nofollow noopener\" target=\"_blank\">curlコマンドを使えるようにすれば</a>多分OK</p></li>\n</ul>\n\n<h2>\n<span id=\"アカウントサービス作成\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%82%AB%E3%82%A6%E3%83%B3%E3%83%88%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>アカウント、サービス作成</h2>\n\n<ul>\n<li><p><a href=\"https://www.ibm.com/marketplace/cloud/cognitive-application-development/jp/ja-jp\" rel=\"nofollow noopener\" target=\"_blank\">IBM Watson Developer Cloud</a>にて、<strong>無料評価版(30日間)</strong>のアカウントを作成</p></li>\n<li>\n<p><a href=\"https://console.ng.bluemix.net/dashboard/services\" rel=\"nofollow noopener\" target=\"_blank\">サービス</a>から、<strong>サービスの作成 &gt; Retrieve and Rank &gt; 作成</strong></p>\n\n<ul>\n<li>料金の話が書いてあってびびるが、30日間は大丈夫(のはず)</li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://console.ng.bluemix.net/dashboard/services\" rel=\"nofollow noopener\" target=\"_blank\">サービス</a>から、<strong>Retrieve and Rank &gt; サービス資格情報 &gt; 資格情報の表示</strong>で表示される情報をコピー</p>\n\n<ul>\n<li>以降、curlコマンドの-uオプションに、<code>**username**:**password**</code>の形で設定する</li>\n</ul>\n</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"json\"><div class=\"highlight\"><pre><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"url\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"https://gateway.watsonplatform.net/retrieve-and-rank/api\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"password\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"**password**\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"username\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"**username**\"</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<h2>\n<span id=\"クラスタ作成\" class=\"fragment\"></span><a href=\"#%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%BF%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>クラスタ作成</h2>\n\n<ul>\n<li><p>ターミナル(ないしコマンドプロンプト)を起動。curlを実行していく</p></li>\n<li>\n<p>クラスタを作成</p>\n\n<ul>\n<li>\n<code>**cluster_id**</code>をコピー</li>\n</ul>\n</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><code><span class=\"go\">curl -k -X POST -u \"**username:**password**\" \"https://gateway.watsonplatform.net/retrieve-and-rank/api/v1/solr_clusters\" -d \"\"\n</span></code></pre></div></div>\n\n<div class=\"code-frame\" data-lang=\"json\"><div class=\"highlight\"><pre><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"solr_cluster_id\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"**cluster_id**\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"cluster_name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"cluster_size\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"solr_cluster_status\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"NOT_AVAILABLE\"</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<ul>\n<li>以下でクラスタのステータスが確認できる。ステータスに<code>READY</code>が返るまで待つ</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><code><span class=\"go\">curl -u \"**username**:**password**\" \"https://gateway.watsonplatform.net/retrieve-and-rank/api/v1/solr_clusters\"\n</span></code></pre></div></div>\n\n<div class=\"code-frame\" data-lang=\"json\"><div class=\"highlight\"><pre><code><span class=\"p\">{</span><span class=\"nl\">\"clusters\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[{</span><span class=\"w\">\n  </span><span class=\"nl\">\"solr_cluster_id\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"**cluster_id**\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"cluster_name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"cluster_size\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"solr_cluster_status\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"READY\"</span><span class=\"w\">\n</span><span class=\"p\">}]}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<h2>\n<span id=\"設定ファイル用意インポート\" class=\"fragment\"></span><a href=\"#%E8%A8%AD%E5%AE%9A%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E7%94%A8%E6%84%8F%E3%82%A4%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%88\"><i class=\"fa fa-link\"></i></a>設定ファイル用意・インポート</h2>\n\n<ul>\n<li>\n<p>クラスタを作っている間に、コレクション用設定ファイルを用意</p>\n\n<ul>\n<li>\n<a href=\"https://www.ibm.com/developerworks/community/wikis/home?lang=en#!/wiki/%E3%81%93%E3%81%BF%E3%81%AD%E3%81%AE%E6%8A%80%E8%A1%93%E3%83%A1%E3%83%A2/page/Retrieve%20and%20Rank%20%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%AE%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a>の方が日本語用設定ファイルを公開していたので、ありがたくお借りする(<strong>Attachment &gt; Solr_Japanese_20160108.zip</strong>)</li>\n</ul>\n</li>\n<li>\n<p>設定ファイルを解凍後、schema.xmlファイルを確認</p>\n\n<ul>\n<li>デフォルトであれば、ドキュメント作成時に<code>id</code>、<code>title</code>、<code>body</code>を定義することになる。ハッカソンでは、フィールドの名前を変えたり、他に保持したい情報があったためフィールドの追加をおこなった</li>\n<li>設定ファイルを変更後、再圧縮する時は、解凍先ディレクトリを圧縮しない(=解凍先ディレクトリ直下の内容を選択して圧縮する)こと。インポート時にエラーとなる</li>\n</ul>\n</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"xml\">\n<div class=\"code-lang\"><span class=\"bold\">schema.xml(抜粋)</span></div>\n<div class=\"highlight\"><pre><code>   <span class=\"nt\">&lt;field</span> <span class=\"na\">name=</span><span class=\"s\">\"id\"</span> <span class=\"na\">type=</span><span class=\"s\">\"string\"</span> <span class=\"na\">indexed=</span><span class=\"s\">\"true\"</span> <span class=\"na\">stored=</span><span class=\"s\">\"true\"</span> <span class=\"na\">required=</span><span class=\"s\">\"true\"</span> <span class=\"na\">multiValued=</span><span class=\"s\">\"false\"</span> <span class=\"nt\">/&gt;</span> \n   <span class=\"nt\">&lt;field</span> <span class=\"na\">name=</span><span class=\"s\">\"title\"</span> <span class=\"na\">type=</span><span class=\"s\">\"watson_text_ja\"</span> <span class=\"na\">indexed=</span><span class=\"s\">\"true\"</span> <span class=\"na\">stored=</span><span class=\"s\">\"true\"</span> <span class=\"na\">required=</span><span class=\"s\">\"false\"</span> <span class=\"na\">multiValued=</span><span class=\"s\">\"true\"</span> <span class=\"nt\">/&gt;</span>\n   <span class=\"nt\">&lt;field</span> <span class=\"na\">name=</span><span class=\"s\">\"body\"</span> <span class=\"na\">type=</span><span class=\"s\">\"watson_text_ja\"</span> <span class=\"na\">indexed=</span><span class=\"s\">\"true\"</span> <span class=\"na\">stored=</span><span class=\"s\">\"true\"</span> <span class=\"na\">required=</span><span class=\"s\">\"false\"</span> <span class=\"na\">multiValued=</span><span class=\"s\">\"true\"</span> <span class=\"nt\">/&gt;</span>\n\n   <span class=\"c\">&lt;!-- make a copy field using normal OOB solr text_en --&gt;</span>\n   <span class=\"nt\">&lt;field</span> <span class=\"na\">name=</span><span class=\"s\">\"text\"</span> <span class=\"na\">type=</span><span class=\"s\">\"text_ja\"</span> <span class=\"na\">indexed=</span><span class=\"s\">\"true\"</span> <span class=\"na\">stored=</span><span class=\"s\">\"false\"</span> <span class=\"na\">required=</span><span class=\"s\">\"false\"</span> <span class=\"na\">multiValued=</span><span class=\"s\">\"true\"</span> <span class=\"nt\">/&gt;</span>\n   <span class=\"c\">&lt;!-- make a copy field using watson_text_ja --&gt;</span>\n   <span class=\"nt\">&lt;field</span> <span class=\"na\">name=</span><span class=\"s\">\"watson_text\"</span> <span class=\"na\">type=</span><span class=\"s\">\"watson_text_ja\"</span> <span class=\"na\">indexed=</span><span class=\"s\">\"true\"</span> <span class=\"na\">stored=</span><span class=\"s\">\"false\"</span> <span class=\"na\">required=</span><span class=\"s\">\"false\"</span> <span class=\"na\">multiValued=</span><span class=\"s\">\"true\"</span> <span class=\"nt\">/&gt;</span>\n\n   <span class=\"nt\">&lt;copyField</span> <span class=\"na\">source=</span><span class=\"s\">\"title\"</span> <span class=\"na\">dest=</span><span class=\"s\">\"text\"</span><span class=\"nt\">/&gt;</span>\n   <span class=\"nt\">&lt;copyField</span> <span class=\"na\">source=</span><span class=\"s\">\"body\"</span> <span class=\"na\">dest=</span><span class=\"s\">\"text\"</span><span class=\"nt\">/&gt;</span>\n\n   <span class=\"nt\">&lt;copyField</span> <span class=\"na\">source=</span><span class=\"s\">\"title\"</span> <span class=\"na\">dest=</span><span class=\"s\">\"watson_text\"</span><span class=\"nt\">/&gt;</span>\n   <span class=\"nt\">&lt;copyField</span> <span class=\"na\">source=</span><span class=\"s\">\"body\"</span> <span class=\"na\">dest=</span><span class=\"s\">\"watson_text\"</span><span class=\"nt\">/&gt;</span>\n</code></pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"xml\">\n<div class=\"code-lang\"><span class=\"bold\">schema.xml(フィールド追加)</span></div>\n<div class=\"highlight\"><pre><code>   <span class=\"c\">&lt;!-- Watsonによる解析が不要であれば、以下のように定義すればよい模様 --&gt;</span>\n   <span class=\"nt\">&lt;field</span> <span class=\"na\">name=</span><span class=\"s\">\"custom_field\"</span> <span class=\"na\">type=</span><span class=\"s\">\"string\"</span> <span class=\"na\">indexed=</span><span class=\"s\">\"true\"</span> <span class=\"na\">stored=</span><span class=\"s\">\"true\"</span> <span class=\"na\">required=</span><span class=\"s\">\"false\"</span> <span class=\"na\">multiValued=</span><span class=\"s\">\"false\"</span> <span class=\"nt\">/&gt;</span>\n</code></pre></div>\n</div>\n\n<ul>\n<li>設定ファイルをインポート\n\n<ul>\n<li>\n<code>**cluster_id**</code>に先ほど取得したクラスタID、<code>**config_name**</code>に任意の名前(英数字)、<code>**config_path**</code>に設定ファイル(zip)へのパスを設定</li>\n</ul>\n</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><code><span class=\"go\">curl -k -X POST -H \"Content-Type: application/zip\" -u \"**username**:**password**\" \"https://gateway.watsonplatform.net/retrieve-and-rank/api/v1/solr_clusters/**cluster_id**/config/**config_name**\" --data-binary @**config_path**\n</span></code></pre></div></div>\n\n<div class=\"code-frame\" data-lang=\"json\"><div class=\"highlight\"><pre><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"message\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"WRRCSR026: Successfully uploaded named config [**config_name**] for Solr cluster [**cluster_id**].\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"statusCode\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">200</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<h2>\n<span id=\"コレクション作成\" class=\"fragment\"></span><a href=\"#%E3%82%B3%E3%83%AC%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>コレクション作成</h2>\n\n<ul>\n<li>以下を実行しコレクションを作成\n\n<ul>\n<li>\n<code>**collection_name**</code>に任意の名前(英数字)、<code>**config_name**</code>に先ほどインポートした設定ファイルの名前を設定</li>\n<li>\n<code>success</code>などと書かれたXMLが返ってくればOK</li>\n</ul>\n</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><code><span class=\"go\">curl -k -X POST -u \"**username**:**password**\" \"https://gateway.watsonplatform.net/retrieve-and-rank/api/v1/solr_clusters/**cluster_id**/solr/admin/collections\" -d \"action=CREATE&amp;name=**collection_name**&amp;collection.configName=**config_name**\"\n</span></code></pre></div></div>\n\n<div class=\"code-frame\" data-lang=\"xml\"><div class=\"highlight\"><pre><code><span class=\"cp\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n  <span class=\"nt\">&lt;response&gt;</span>\n    <span class=\"nt\">&lt;lst</span> <span class=\"na\">name=</span><span class=\"s\">\"responseHeader\"</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;int</span> <span class=\"na\">name=</span><span class=\"s\">\"status\"</span><span class=\"nt\">&gt;</span>0<span class=\"nt\">&lt;/int&gt;</span>\n      <span class=\"nt\">&lt;int</span> <span class=\"na\">name=</span><span class=\"s\">\"QTime\"</span><span class=\"nt\">&gt;</span>11214<span class=\"nt\">&lt;/int&gt;</span>\n    <span class=\"nt\">&lt;/lst&gt;</span>\n    <span class=\"nt\">&lt;lst</span> <span class=\"na\">name=</span><span class=\"s\">\"success\"</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;lst</span> <span class=\"na\">name=</span><span class=\"s\">\"****\"</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;lst</span> <span class=\"na\">name=</span><span class=\"s\">\"responseHeader\"</span><span class=\"nt\">&gt;</span>\n          <span class=\"nt\">&lt;int</span> <span class=\"na\">name=</span><span class=\"s\">\"status\"</span><span class=\"nt\">&gt;</span>0<span class=\"nt\">&lt;/int&gt;</span>\n          <span class=\"nt\">&lt;int</span> <span class=\"na\">name=</span><span class=\"s\">\"QTime\"</span><span class=\"nt\">&gt;</span>2468<span class=\"nt\">&lt;/int&gt;</span>\n        <span class=\"nt\">&lt;/lst&gt;</span>\n        <span class=\"nt\">&lt;str</span> <span class=\"na\">name=</span><span class=\"s\">\"core\"</span><span class=\"nt\">&gt;</span>****<span class=\"nt\">&lt;/str&gt;</span>\n      <span class=\"nt\">&lt;/lst&gt;</span>\n      <span class=\"nt\">&lt;lst</span> <span class=\"na\">name=</span><span class=\"s\">\"****\"</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;lst</span> <span class=\"na\">name=</span><span class=\"s\">\"responseHeader\"</span><span class=\"nt\">&gt;</span>\n          <span class=\"nt\">&lt;int</span> <span class=\"na\">name=</span><span class=\"s\">\"status\"</span><span class=\"nt\">&gt;</span>0<span class=\"nt\">&lt;/int&gt;</span>\n          <span class=\"nt\">&lt;int</span> <span class=\"na\">name=</span><span class=\"s\">\"QTime\"</span><span class=\"nt\">&gt;</span>2915<span class=\"nt\">&lt;/int&gt;</span>\n        <span class=\"nt\">&lt;/lst&gt;</span>\n      <span class=\"nt\">&lt;str</span> <span class=\"na\">name=</span><span class=\"s\">\"core\"</span><span class=\"nt\">&gt;</span>****<span class=\"nt\">&lt;/str&gt;</span>\n    <span class=\"nt\">&lt;/lst&gt;</span>\n  <span class=\"nt\">&lt;/lst&gt;</span>\n<span class=\"nt\">&lt;/response&gt;</span>\n</code></pre></div></div>\n\n<h2>\n<span id=\"ドキュメント準備\" class=\"fragment\"></span><a href=\"#%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E6%BA%96%E5%82%99\"><i class=\"fa fa-link\"></i></a>ドキュメント準備</h2>\n\n<ul>\n<li>投入するドキュメント情報を用意\n\n<ul>\n<li>ハッカソンでは、チームの方に簡易クローラ(とあるサイトのHTMLから投入データを抽出)を作ってもらい救われた。8000件ほどのレコードを登録した</li>\n<li>未確認だが<a href=\"http://www.ibm.com/smarterplanet/jp/ja/ibmwatson/developercloud/document-conversion.html\" rel=\"nofollow noopener\" target=\"_blank\">Document Conversion</a>を使ってもよさそう</li>\n</ul>\n</li>\n</ul>\n\n<h2>\n<span id=\"ドキュメント作成\" class=\"fragment\"></span><a href=\"#%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>ドキュメント作成</h2>\n\n<ul>\n<li>設定ファイルで定義したフィールドに合わせて、以下のようなJSONファイルを作成\n\n<ul>\n<li>\n<a href=\"https://cwiki.apache.org/confluence/display/solr/Uploading+Data+with+Index+Handlers#UploadingDatawithIndexHandlers-JSONFormattedIndexUpdates\" rel=\"nofollow noopener\" target=\"_blank\">ここ</a>を見ると記法は色々あるらしい(これはJSONとして問題ないんでしょうか…?)</li>\n<li>文字コードはUTF-8、改行はLFのみ</li>\n<li>ハッカソンでは、ここで<code>commit</code>が必要なことに気づけず数時間をフイにした(反省)</li>\n</ul>\n</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">documents.json</span></div>\n<div class=\"highlight\"><pre><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"add\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nl\">\"doc\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n      </span><span class=\"nl\">\"id\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"1\"</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"title\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"＊＊＊＊\"</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"body\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"＊＊＊＊\"</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"custom_field\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"＊＊＊＊\"</span><span class=\"w\">\n    </span><span class=\"p\">}</span><span class=\"w\">\n  </span><span class=\"p\">},</span><span class=\"w\">\n  </span><span class=\"nl\">\"add\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nl\">\"doc\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n      </span><span class=\"nl\">\"id\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"2\"</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"title\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"＊＊＊＊\"</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"body\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"＊＊＊＊\"</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"custom_field\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"＊＊＊＊\"</span><span class=\"w\">\n    </span><span class=\"p\">}</span><span class=\"w\">\n  </span><span class=\"p\">},</span><span class=\"w\">\n\n</span><span class=\"err\">・・・中略・・・</span><span class=\"w\">\n\n  </span><span class=\"nl\">\"commit\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div>\n</div>\n\n<h2>\n<span id=\"ドキュメント投入\" class=\"fragment\"></span><a href=\"#%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E6%8A%95%E5%85%A5\"><i class=\"fa fa-link\"></i></a>ドキュメント投入</h2>\n\n<ul>\n<li>以下実行でコレクションにドキュメントを投入\n\n<ul>\n<li>\n<code>**cluster_id**</code>、<code>**config_name**</code>は適宜置換、<code>**document_path**</code>に先ほど作成したjsonファイルへのパスを設定</li>\n</ul>\n</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><code><span class=\"go\">curl -k -X POST -H \"Content-Type: application/json\" -u \"**username**:**password**\" \"https://gateway.watsonplatform.net/retrieve-and-rank/api/v1/solr_clusters/**cluster_id**/solr/**collection_name**/update\" --data-binary @**document_path**\n</span></code></pre></div></div>\n\n<div class=\"code-frame\" data-lang=\"json\"><div class=\"highlight\"><pre><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"responseHeader\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nl\">\"status\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"QTime\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">495</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<h2>\n<span id=\"検索ランカー無し\" class=\"fragment\"></span><a href=\"#%E6%A4%9C%E7%B4%A2%E3%83%A9%E3%83%B3%E3%82%AB%E3%83%BC%E7%84%A1%E3%81%97\"><i class=\"fa fa-link\"></i></a>検索(ランカー無し)</h2>\n\n<ul>\n<li>ブラウザのアドレスバーに以下を入力\n\n<ul>\n<li>\n<code>**xxxx**</code>の箇所は今までに倣って適宜変更。検索文は任意に設定</li>\n<li>検索文に応じてドキュメントが返ってくればOK</li>\n<li>id検索がしたい場合は、q=id:1などとする</li>\n</ul>\n</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>https://**username**:**password**@gateway.watsonplatform.net/retrieve-and-rank/api/v1/solr_clusters/**cluster_id**/solr/**collection_name**/select?q=検索文&amp;wt=json&amp;fl=id,title,body,custom_field\n</code></pre></div></div>\n\n<div class=\"code-frame\" data-lang=\"json\"><div class=\"highlight\"><pre><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"responseHeader\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nl\">\"status\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"QTime\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"params\"</span><span class=\"p\">:{</span><span class=\"w\">\n      </span><span class=\"nl\">\"q\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"検索文\"</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"fl\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"id,title,body,custom_field\"</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"wt\"</span><span class=\"p\">:</span><span class=\"s2\">\"json\"</span><span class=\"w\">\n    </span><span class=\"p\">}</span><span class=\"w\">\n  </span><span class=\"p\">},</span><span class=\"w\">\n  </span><span class=\"nl\">\"response\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nl\">\"numFound\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">58</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"start\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"docs\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n      </span><span class=\"p\">{</span><span class=\"w\">\n        </span><span class=\"nl\">\"id\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"1\"</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"nl\">\"title\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"＊＊＊＊\"</span><span class=\"p\">],</span><span class=\"w\">\n        </span><span class=\"nl\">\"body\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"＊＊＊＊\"</span><span class=\"p\">],</span><span class=\"w\">\n        </span><span class=\"nl\">\"custom_field\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"＊＊＊＊\"</span><span class=\"w\">\n      </span><span class=\"p\">},</span><span class=\"w\">\n\n</span><span class=\"err\">・・・中略・・・</span><span class=\"w\">\n\n    </span><span class=\"p\">]</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<h2>\n<span id=\"アプリケーション作成\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>アプリケーション作成</h2>\n\n<ul>\n<li>\n<p>Retrieve and RankをWebから呼び出すには、Node-REDアプリケーションを経由する必要がある</p>\n\n<ul>\n<li>ハッカソンではこれに気づけず1時間ほどフイにした(反省)</li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://console.ng.bluemix.net/dashboard/applications\" rel=\"nofollow noopener\" target=\"_blank\">アプリ</a>から<strong>アプリケーションの作成 &gt; Node-RED Starter &gt; 作成</strong></p>\n\n<ul>\n<li>入力項目は任意、デフォルトでよいが、ホスト名についてはAPIのURLに用いられる</li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://console.ng.bluemix.net/dashboard/applications\" rel=\"nofollow noopener\" target=\"_blank\">アプリ</a>から<strong>アプリ名 &gt; ランタイム &gt; 環境変数 &gt; ユーザー定義 &gt; 追加 &gt; 保存</strong>でユーザー名、パスワードを設定</p>\n\n<ul>\n<li>\n<a href=\"https://console.ng.bluemix.net/dashboard/applications\" rel=\"nofollow noopener\" target=\"_blank\">アプリ</a>にて<strong>再始動</strong>(円弧型の矢印のボタン)を押しておく</li>\n</ul>\n</li>\n</ul>\n\n<table>\n<thead>\n<tr>\n<th>名前</th>\n<th>値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>NODE_RED_USERNAME</td>\n<td>任意</td>\n</tr>\n<tr>\n<td>NODE_RED_PASSWORD</td>\n<td>任意</td>\n</tr>\n</tbody>\n</table>\n\n<h2>\n<span id=\"アプリケーション編集\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E7%B7%A8%E9%9B%86\"><i class=\"fa fa-link\"></i></a>アプリケーション編集</h2>\n\n<ul>\n<li><p><a href=\"https://console.ng.bluemix.net/dashboard/applications\" rel=\"nofollow noopener\" target=\"_blank\">アプリ</a>で<strong>アプリ名 &gt; 経路</strong>に表示されているURLにアクセスすると、Node-REDのトップ画面が表示される</p></li>\n<li><p><strong>Go to your Node-RED flow editor</strong>をクリックすると認証画面が出るので、先ほど設定したユーザー名、パスワードを入力</p></li>\n<li><p>表示されたエディタ画面にて、以下要領でノードを作成、接続</p></li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/16ce313844a56d1451f5244b8d12e9618fa8f407/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130363235392f64393564333031302d386331332d323638612d303432632d3263613834353331613939642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"533\" alt=\"接続イメージ\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2Fd95d3010-8c13-268a-042c-2ca84531a99d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=fac0e35a31c5cd5f27f79d88c0cd2f3a\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/d95d3010-8c13-268a-042c-2ca84531a99d.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2Fd95d3010-8c13-268a-042c-2ca84531a99d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=fd41d321b701826db300c97f55a52547 1x\" loading=\"lazy\"></a></p>\n\n<h3>\n<span id=\"httpinput\" class=\"fragment\"></span><a href=\"#httpinput\"><i class=\"fa fa-link\"></i></a>http(input)</h3>\n\n<ul>\n<li><p>画面左より<strong>input &gt; http</strong>。エディタ中央にドロップ</p></li>\n<li><p>URLに指定した値が、APIのURLのパスに使用される</p></li>\n</ul>\n\n<table>\n<thead>\n<tr>\n<th>名前</th>\n<th>値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Method</td>\n<td>POST</td>\n</tr>\n<tr>\n<td>URL</td>\n<td>/<code>**path**</code>\n</td>\n</tr>\n<tr>\n<td>Name</td>\n<td>任意</td>\n</tr>\n</tbody>\n</table>\n\n<h3>\n<span id=\"functionリクエスト生成\" class=\"fragment\"></span><a href=\"#function%E3%83%AA%E3%82%AF%E3%82%A8%E3%82%B9%E3%83%88%E7%94%9F%E6%88%90\"><i class=\"fa fa-link\"></i></a>function(リクエスト生成)</h3>\n\n<ul>\n<li><p>画面左より<strong>function &gt; function</strong></p></li>\n<li><p>Webより呼び出す際に検索文を設定するパラメーターを<code>msg.payload</code>の<code>q</code>で指定する</p></li>\n<li><p>色々とエスケープしているのは<a href=\"http://d.hatena.ne.jp/miau/20140705/1404564644\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a>を参考に。substringはなんとなく実施</p></li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">Function</span></div>\n<div class=\"highlight\"><pre><code><span class=\"kd\">var</span> <span class=\"nx\">query</span><span class=\"p\">;</span>\n<span class=\"k\">try</span> <span class=\"p\">{</span>\n    <span class=\"nx\">query</span> <span class=\"o\">=</span> <span class=\"nx\">msg</span><span class=\"p\">.</span><span class=\"nx\">payload</span><span class=\"p\">.</span><span class=\"nx\">q</span><span class=\"p\">.</span><span class=\"nx\">substring</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">);</span>\n<span class=\"p\">}</span> <span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">query</span> <span class=\"o\">=</span> <span class=\"dl\">\"\"</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"nx\">query</span> <span class=\"o\">=</span> <span class=\"nx\">query</span><span class=\"p\">.</span><span class=\"nx\">replace</span><span class=\"p\">(</span>\n    <span class=\"sr\">/</span><span class=\"se\">[\\\\\\+\\-\\&amp;\\|\\!\\(\\)\\{\\}\\[\\]\\^\\\"\\~\\*\\?\\:\\/\\r\\n\\t\\u</span><span class=\"sr\">0020</span><span class=\"se\">\\u</span><span class=\"sr\">3000</span><span class=\"se\">]</span><span class=\"sr\">|AND|OR|NOT/g</span><span class=\"p\">,</span> \n    <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">c</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"dl\">\"</span><span class=\"se\">\\\\</span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"nx\">c</span><span class=\"p\">;</span> <span class=\"p\">});</span>\n<span class=\"nx\">msg</span><span class=\"p\">.</span><span class=\"nx\">headers</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"dl\">\"</span><span class=\"s2\">content-type</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">application/x-www-form-urlencoded</span><span class=\"dl\">\"</span>\n<span class=\"p\">};</span>\n<span class=\"nx\">msg</span><span class=\"p\">.</span><span class=\"nx\">payload</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"dl\">\"</span><span class=\"s2\">wt</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">json</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"dl\">\"</span><span class=\"s2\">fl</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">id,title,body,custom_field</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"dl\">\"</span><span class=\"s2\">q</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"nx\">query</span>\n<span class=\"p\">};</span>\n<span class=\"k\">return</span> <span class=\"nx\">msg</span><span class=\"p\">;</span>\n</code></pre></div>\n</div>\n\n<h3>\n<span id=\"http-request\" class=\"fragment\"></span><a href=\"#http-request\"><i class=\"fa fa-link\"></i></a>http request</h3>\n\n<ul>\n<li>画面左より<strong>function &gt; http request</strong>\n</li>\n</ul>\n\n<table>\n<thead>\n<tr>\n<th>名前</th>\n<th>値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Method</td>\n<td>POST</td>\n</tr>\n<tr>\n<td>URL</td>\n<td><code>https://gateway.watsonplatform.net/retrieve-and-rank/api/v1/solr_clusters/**cluster_id**/solr/**collection_name**/select</code></td>\n</tr>\n<tr>\n<td>Enable secure (SSL/TLS) connection</td>\n<td>チェック無</td>\n</tr>\n<tr>\n<td>Use basic authentication</td>\n<td>チェック有</td>\n</tr>\n<tr>\n<td>Username</td>\n<td><code>**username**</code></td>\n</tr>\n<tr>\n<td>Password</td>\n<td><code>**password**</code></td>\n</tr>\n<tr>\n<td>Return</td>\n<td>a UTF-8 string</td>\n</tr>\n<tr>\n<td>Name</td>\n<td>任意</td>\n</tr>\n</tbody>\n</table>\n\n<h3>\n<span id=\"functionヘッダ設定\" class=\"fragment\"></span><a href=\"#function%E3%83%98%E3%83%83%E3%83%80%E8%A8%AD%E5%AE%9A\"><i class=\"fa fa-link\"></i></a>function(ヘッダ設定)</h3>\n\n<ul>\n<li><p>画面左より<strong>function &gt; function</strong></p></li>\n<li><p>CORS対応のため</p></li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">Function</span></div>\n<div class=\"highlight\"><pre><code><span class=\"nx\">msg</span><span class=\"p\">.</span><span class=\"nx\">headers</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">Access-Control-Allow-Origin</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">*</span><span class=\"dl\">\"</span>\n<span class=\"p\">}</span>\n<span class=\"k\">return</span> <span class=\"nx\">msg</span><span class=\"p\">;</span>\n</code></pre></div>\n</div>\n\n<h3>\n<span id=\"jsonhttpoutput\" class=\"fragment\"></span><a href=\"#jsonhttpoutput\"><i class=\"fa fa-link\"></i></a>json、http(output)</h3>\n\n<ul>\n<li>画面左より<strong>function &gt; json</strong>、<strong>output &gt; http response</strong>\n</li>\n</ul>\n\n<h2>\n<span id=\"アプリケーション反映\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E5%8F%8D%E6%98%A0\"><i class=\"fa fa-link\"></i></a>アプリケーション反映</h2>\n\n<ul>\n<li>画面右上の<strong>Deploy</strong>を押すと反映\n\n<ul>\n<li>エラーがあると、画面右の<strong>debug</strong>タブに表示される</li>\n</ul>\n</li>\n</ul>\n\n<h2>\n<span id=\"webからapi呼び出し\" class=\"fragment\"></span><a href=\"#web%E3%81%8B%E3%82%89api%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%97\"><i class=\"fa fa-link\"></i></a>WebからAPI呼び出し</h2>\n\n<ul>\n<li>jQuery等を使ってAPI呼び出し、結果取得</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">test.html</span></div>\n<div class=\"highlight\"><pre><code><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"nt\">&lt;html&gt;</span>\n  <span class=\"nt\">&lt;head&gt;</span>\n    <span class=\"nt\">&lt;meta</span> <span class=\"na\">charset=</span><span class=\"s\">\"utf-8\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;title&gt;</span>Retrieve and Rank<span class=\"nt\">&lt;/title&gt;</span>\n    <span class=\"nt\">&lt;script </span><span class=\"na\">type=</span><span class=\"s\">\"text/javascript\"</span> <span class=\"na\">src=</span><span class=\"s\">\"https://code.jquery.com/jquery-3.1.1.min.js\"</span><span class=\"nt\">&gt;&lt;/script&gt;</span>\n  <span class=\"nt\">&lt;/head&gt;</span>\n  <span class=\"nt\">&lt;body&gt;</span>\n    <span class=\"nt\">&lt;input</span> <span class=\"na\">id=</span><span class=\"s\">\"query\"</span> <span class=\"na\">type=</span><span class=\"s\">\"text\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;input</span> <span class=\"na\">id=</span><span class=\"s\">\"test\"</span> <span class=\"na\">type=</span><span class=\"s\">\"button\"</span> <span class=\"na\">value=</span><span class=\"s\">\"Test\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">id=</span><span class=\"s\">\"result\"</span><span class=\"nt\">&gt;&lt;/div&gt;</span>\n  <span class=\"nt\">&lt;/body&gt;</span>\n  <span class=\"nt\">&lt;script </span><span class=\"na\">type=</span><span class=\"s\">\"text/javascript\"</span><span class=\"nt\">&gt;</span>        \n    <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">#test</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">click</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span>\n      <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">#result</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">empty</span><span class=\"p\">();</span>\n\n      <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">ajax</span><span class=\"p\">({</span>\n        <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">POST</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n        <span class=\"na\">url</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">http://**ホスト名**.mybluemix.net/**path**</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n        <span class=\"na\">dataType</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">json</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n        <span class=\"na\">data</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"na\">q</span><span class=\"p\">:</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">#query</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">()</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">}).</span><span class=\"nx\">done</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">){</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">doc</span> <span class=\"o\">=</span> <span class=\"dl\">\"\"</span><span class=\"p\">;</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">docs</span> <span class=\"o\">=</span> <span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">docs</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">docs</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">doc</span> <span class=\"o\">=</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">(</span><span class=\"nx\">docs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]);</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"nx\">doc</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">結果が見つかりませんでした。</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">#result</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">text</span><span class=\"p\">(</span><span class=\"nx\">doc</span><span class=\"p\">);</span>\n      <span class=\"p\">}).</span><span class=\"nx\">fail</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">){</span>\n          <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">);</span>\n      <span class=\"p\">});</span>\n    <span class=\"p\">});</span>\n  <span class=\"nt\">&lt;/script&gt;</span>\n<span class=\"nt\">&lt;/html&gt;</span>\n</code></pre></div>\n</div>\n\n<h2>\n<span id=\"学習\" class=\"fragment\"></span><a href=\"#%E5%AD%A6%E7%BF%92\"><i class=\"fa fa-link\"></i></a>学習</h2>\n\n<ul>\n<li>ハッカソンでは時間が足らず泣く泣く諦めた、ランカーを用いた検索について挑戦した</li>\n</ul>\n\n<h3>\n<span id=\"grandtruthの作成\" class=\"fragment\"></span><a href=\"#grandtruth%E3%81%AE%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>Grandtruthの作成</h3>\n\n<ul>\n<li>質問に対してどの解答が適切であったか解答してGrandtruthを生成するツールを作り、ランカーを作成\n\n<ul>\n<li>\n<strong>質問文入力&amp;解答候補表示→適切と思われるドキュメントのボタンを押す→質問文入力…→Groundtruth取得</strong>でCSVファイル作成</li>\n</ul>\n</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">test2.html</span></div>\n<div class=\"highlight\"><pre><code><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"nt\">&lt;html&gt;</span>\n  <span class=\"nt\">&lt;head&gt;</span>\n    <span class=\"nt\">&lt;meta</span> <span class=\"na\">charset=</span><span class=\"s\">\"utf-8\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;title&gt;</span>Groundtruth<span class=\"nt\">&lt;/title&gt;</span>\n    <span class=\"nt\">&lt;script </span><span class=\"na\">type=</span><span class=\"s\">\"text/javascript\"</span> <span class=\"na\">src=</span><span class=\"s\">\"https://code.jquery.com/jquery-3.1.1.min.js\"</span><span class=\"nt\">&gt;&lt;/script&gt;</span>\n    <span class=\"nt\">&lt;style </span><span class=\"na\">type=</span><span class=\"s\">\"text/css\"</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">body</span> <span class=\"p\">{</span>\n        <span class=\"nl\">font-size</span><span class=\"p\">:</span> <span class=\"n\">small</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n      <span class=\"nf\">#query</span> <span class=\"p\">{</span>\n        <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">95%</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n      <span class=\"nf\">#header</span> <span class=\"p\">{</span>\n        <span class=\"nl\">position</span><span class=\"p\">:</span> <span class=\"nb\">fixed</span><span class=\"p\">;</span>\n        <span class=\"nl\">top</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n        <span class=\"nl\">left</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n        <span class=\"nl\">right</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n        <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"m\">0.2em</span><span class=\"p\">;</span>\n        <span class=\"nl\">background-color</span><span class=\"p\">:</span> <span class=\"no\">gray</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n      <span class=\"nc\">.doc</span> <span class=\"p\">{</span>\n        <span class=\"nl\">border</span><span class=\"p\">:</span> <span class=\"m\">1px</span> <span class=\"nb\">solid</span> <span class=\"no\">gray</span><span class=\"p\">;</span>\n        <span class=\"nl\">border-radius</span><span class=\"p\">:</span> <span class=\"m\">0.2em</span><span class=\"p\">;</span>\n        <span class=\"nl\">margin</span><span class=\"p\">:</span> <span class=\"m\">0.2em</span><span class=\"p\">;</span>\n        <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"m\">0.2em</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n      <span class=\"nf\">#result</span> <span class=\"p\">{</span>\n        <span class=\"nl\">margin-top</span><span class=\"p\">:</span> <span class=\"m\">4em</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n    <span class=\"nt\">&lt;/style&gt;</span>\n  <span class=\"nt\">&lt;/head&gt;</span>\n  <span class=\"nt\">&lt;body&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">id=</span><span class=\"s\">\"header\"</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;input</span> <span class=\"na\">id=</span><span class=\"s\">\"query\"</span> <span class=\"na\">type=</span><span class=\"s\">\"text\"</span> <span class=\"na\">placeholder=</span><span class=\"s\">\"質問文\"</span><span class=\"nt\">&gt;&lt;br&gt;</span>\n      <span class=\"nt\">&lt;input</span> <span class=\"na\">id=</span><span class=\"s\">\"send\"</span> <span class=\"na\">type=</span><span class=\"s\">\"button\"</span> <span class=\"na\">value=</span><span class=\"s\">\"候補表示\"</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;input</span> <span class=\"na\">id=</span><span class=\"s\">\"getgt\"</span> <span class=\"na\">type=</span><span class=\"s\">\"button\"</span> <span class=\"na\">value=</span><span class=\"s\">\"Groundtruth取得\"</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;a</span> <span class=\"na\">id=</span><span class=\"s\">\"downloadlink\"</span> <span class=\"na\">target=</span><span class=\"s\">\"_blank\"</span> <span class=\"na\">href=</span><span class=\"s\">\"#\"</span><span class=\"nt\">&gt;&lt;/a&gt;</span>\n    <span class=\"nt\">&lt;/div&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">id=</span><span class=\"s\">\"result\"</span><span class=\"nt\">&gt;&lt;/div&gt;</span>\n  <span class=\"nt\">&lt;/body&gt;</span>\n  <span class=\"nt\">&lt;script </span><span class=\"na\">type=</span><span class=\"s\">\"text/javascript\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">MAX_USEFUL</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">;</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">groundtruth</span><span class=\"o\">=</span><span class=\"p\">{};</span>\n\n    <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">#send</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">click</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">$result</span><span class=\"o\">=</span><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">#result</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n      <span class=\"nx\">$result</span><span class=\"p\">.</span><span class=\"nx\">empty</span><span class=\"p\">();</span>\n\n      <span class=\"kd\">var</span> <span class=\"nx\">$query</span><span class=\"o\">=</span><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">#query</span><span class=\"dl\">\"</span><span class=\"p\">);</span>      \n      <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">ajax</span><span class=\"p\">({</span>\n        <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">POST</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n        <span class=\"na\">url</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">http://**ホスト名**.mybluemix.net/**path**</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n        <span class=\"na\">dataType</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">json</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n        <span class=\"na\">data</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n          <span class=\"na\">q</span><span class=\"p\">:</span> <span class=\"nx\">$query</span><span class=\"p\">.</span><span class=\"nx\">val</span><span class=\"p\">()</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">}).</span><span class=\"nx\">done</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">){</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">docs</span> <span class=\"o\">=</span> <span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">docs</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">docs</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"nx\">docs</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">doc</span><span class=\"p\">){</span>\n            <span class=\"kd\">var</span> <span class=\"nx\">$doc</span><span class=\"o\">=</span><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">&lt;div&gt;</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">addClass</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">doc</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">data</span><span class=\"p\">({</span> \n              <span class=\"dl\">\"</span><span class=\"s2\">query</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">responseHeader</span><span class=\"p\">.</span><span class=\"nx\">params</span><span class=\"p\">.</span><span class=\"nx\">q</span><span class=\"p\">,</span>\n              <span class=\"dl\">\"</span><span class=\"s2\">doc</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"nx\">doc</span> \n            <span class=\"p\">});</span>\n\n            <span class=\"nx\">$doc</span><span class=\"p\">.</span><span class=\"nx\">append</span><span class=\"p\">(</span><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">&lt;input&gt;</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">attr</span><span class=\"p\">({</span>\n              <span class=\"dl\">\"</span><span class=\"s2\">id</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">useful</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n              <span class=\"dl\">\"</span><span class=\"s2\">type</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">button</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n              <span class=\"dl\">\"</span><span class=\"s2\">value</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"nx\">doc</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">,</span>\n            <span class=\"p\">}).</span><span class=\"nx\">click</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span> <span class=\"nx\">clickUseful</span><span class=\"p\">(</span><span class=\"nx\">$doc</span><span class=\"p\">);</span> <span class=\"p\">}));</span>\n\n            <span class=\"nx\">$doc</span><span class=\"p\">.</span><span class=\"nx\">append</span><span class=\"p\">(</span><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">&lt;span&gt;</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">addClass</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">counter</span><span class=\"dl\">\"</span><span class=\"p\">));</span>\n            <span class=\"nx\">$doc</span><span class=\"p\">.</span><span class=\"nx\">append</span><span class=\"p\">(</span><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">&lt;div&gt;</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">text</span><span class=\"p\">(</span><span class=\"nx\">doc</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">));</span>            \n\n            <span class=\"nx\">$result</span><span class=\"p\">.</span><span class=\"nx\">append</span><span class=\"p\">(</span><span class=\"nx\">$doc</span><span class=\"p\">);</span>\n          <span class=\"p\">});</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n          <span class=\"nx\">$result</span><span class=\"p\">.</span><span class=\"nx\">text</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">結果が見つかりませんでした。</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">}).</span><span class=\"nx\">fail</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">){</span>\n          <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">);</span>\n      <span class=\"p\">});</span>      \n    <span class=\"p\">});</span>\n\n    <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">#getgt</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">click</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">rows</span><span class=\"o\">=</span><span class=\"p\">[];</span>\n      <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">each</span><span class=\"p\">(</span><span class=\"nx\">groundtruth</span><span class=\"p\">,</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">query</span><span class=\"p\">,</span> <span class=\"nx\">idList</span><span class=\"p\">){</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">row</span><span class=\"o\">=</span><span class=\"p\">[];</span>\n        <span class=\"nx\">row</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">query</span><span class=\"p\">);</span>\n        <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">each</span><span class=\"p\">(</span><span class=\"nx\">idList</span><span class=\"p\">,</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">id</span><span class=\"p\">,</span> <span class=\"nx\">count</span><span class=\"p\">){</span>\n          <span class=\"nx\">row</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">id</span><span class=\"p\">);</span>\n          <span class=\"nx\">row</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">count</span><span class=\"p\">);</span>\n        <span class=\"p\">});</span>\n        <span class=\"nx\">rows</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">row</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">){</span> <span class=\"k\">return</span> <span class=\"nx\">escapeCSV</span><span class=\"p\">(</span><span class=\"nb\">String</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">))</span> <span class=\"p\">}).</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">,</span><span class=\"dl\">\"</span><span class=\"p\">));</span>\n      <span class=\"p\">});</span>\n      <span class=\"nx\">rows</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"dl\">\"\"</span><span class=\"p\">);</span>\n\n      <span class=\"kd\">var</span> <span class=\"nx\">blob</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Blob</span><span class=\"p\">([</span><span class=\"nx\">rows</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"se\">\\n</span><span class=\"dl\">\"</span><span class=\"p\">)],</span> <span class=\"p\">{</span> <span class=\"dl\">\"</span><span class=\"s2\">type</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">text/plain</span><span class=\"dl\">\"</span> <span class=\"p\">});</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">$downloadlink</span><span class=\"o\">=</span><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">#downloadlink</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n      <span class=\"nx\">$downloadlink</span><span class=\"p\">.</span><span class=\"nx\">attr</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">href</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">URL</span><span class=\"p\">.</span><span class=\"nx\">createObjectURL</span><span class=\"p\">(</span><span class=\"nx\">blob</span><span class=\"p\">));</span>\n      <span class=\"nx\">$downloadlink</span><span class=\"p\">.</span><span class=\"nx\">attr</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">download</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">gt_</span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"nx\">createTimeString</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"dl\">\"</span><span class=\"s2\">.csv</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n      <span class=\"nx\">$downloadlink</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">click</span><span class=\"p\">();</span>\n    <span class=\"p\">});</span>\n\n    <span class=\"kd\">function</span> <span class=\"nx\">clickUseful</span><span class=\"p\">(</span><span class=\"nx\">$doc</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">query</span><span class=\"o\">=</span><span class=\"nx\">$doc</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">query</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">id</span><span class=\"o\">=</span><span class=\"nx\">$doc</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">doc</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">id</span><span class=\"p\">;</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">groundtruth</span><span class=\"p\">[</span><span class=\"nx\">query</span><span class=\"p\">]</span> <span class=\"o\">===</span> <span class=\"kc\">undefined</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">groundtruth</span><span class=\"p\">[</span><span class=\"nx\">query</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"p\">{};</span>\n      <span class=\"p\">}</span>\n\n      <span class=\"kd\">var</span> <span class=\"nx\">count</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"nx\">groundtruth</span><span class=\"p\">[</span><span class=\"nx\">query</span><span class=\"p\">][</span><span class=\"nx\">id</span><span class=\"p\">]</span> <span class=\"o\">===</span> <span class=\"kc\">undefined</span> <span class=\"p\">?</span> <span class=\"mi\">0</span> <span class=\"p\">:</span> <span class=\"nx\">groundtruth</span><span class=\"p\">[</span><span class=\"nx\">query</span><span class=\"p\">][</span><span class=\"nx\">id</span><span class=\"p\">]);</span>\n      <span class=\"nx\">count</span><span class=\"o\">=</span><span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">min</span><span class=\"p\">(</span><span class=\"nx\">count</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nx\">MAX_USEFUL</span><span class=\"p\">);</span>\n      <span class=\"nx\">groundtruth</span><span class=\"p\">[</span><span class=\"nx\">query</span><span class=\"p\">][</span><span class=\"nx\">id</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"nx\">count</span><span class=\"p\">;</span>\n\n      <span class=\"nx\">$doc</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">.counter</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">text</span><span class=\"p\">(</span><span class=\"nx\">count</span><span class=\"p\">);</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">count</span> <span class=\"o\">&gt;=</span> <span class=\"nx\">MAX_USEFUL</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">$doc</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">#useful</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">prop</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">disabled</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"kc\">true</span><span class=\"p\">);</span>        \n      <span class=\"p\">}</span>      \n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">function</span> <span class=\"nx\">escapeCSV</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"dl\">\"</span><span class=\"se\">\\\"</span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"nx\">value</span><span class=\"p\">.</span><span class=\"nx\">replace</span><span class=\"p\">(</span><span class=\"sr\">/</span><span class=\"se\">\\\"</span><span class=\"sr\">/</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"se\">\\\"\\\"</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"dl\">\"</span><span class=\"se\">\\\"</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"kd\">function</span> <span class=\"nx\">createTimeString</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"kd\">function</span> <span class=\"nx\">padZero</span><span class=\"p\">(</span><span class=\"nx\">num</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"kd\">var</span> <span class=\"nx\">result</span><span class=\"p\">;</span>\n          <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">num</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n              <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">0</span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"nx\">num</span><span class=\"p\">;</span>\n          <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n              <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"dl\">\"\"</span> <span class=\"o\">+</span> <span class=\"nx\">num</span><span class=\"p\">;</span>\n          <span class=\"p\">}</span>\n          <span class=\"k\">return</span> <span class=\"nx\">result</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">now</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">();</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">res</span> <span class=\"o\">=</span> <span class=\"dl\">\"\"</span> <span class=\"o\">+</span> <span class=\"nx\">now</span><span class=\"p\">.</span><span class=\"nx\">getFullYear</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"nx\">padZero</span><span class=\"p\">(</span><span class=\"nx\">now</span><span class=\"p\">.</span><span class=\"nx\">getMonth</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> \n          <span class=\"nx\">padZero</span><span class=\"p\">(</span><span class=\"nx\">now</span><span class=\"p\">.</span><span class=\"nx\">getDate</span><span class=\"p\">())</span> <span class=\"o\">+</span> <span class=\"nx\">padZero</span><span class=\"p\">(</span><span class=\"nx\">now</span><span class=\"p\">.</span><span class=\"nx\">getHours</span><span class=\"p\">())</span> <span class=\"o\">+</span> \n          <span class=\"nx\">padZero</span><span class=\"p\">(</span><span class=\"nx\">now</span><span class=\"p\">.</span><span class=\"nx\">getMinutes</span><span class=\"p\">())</span> <span class=\"o\">+</span> <span class=\"nx\">padZero</span><span class=\"p\">(</span><span class=\"nx\">now</span><span class=\"p\">.</span><span class=\"nx\">getSeconds</span><span class=\"p\">());</span>\n      <span class=\"k\">return</span> <span class=\"nx\">res</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n  <span class=\"nt\">&lt;/script&gt;</span>\n<span class=\"nt\">&lt;/html&gt;</span>\n</code></pre></div>\n</div>\n\n<p><a href=\"https://camo.qiitausercontent.com/fa0360ea6e0e6d00c1309a1379abbd13d6b99328/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130363235392f38363330633035302d653663322d653664612d346665382d3738373438343138613732302e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"588\" alt=\"ツール\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F8630c050-e6c2-e6da-4fe8-78748418a720.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=887d0bdb428dde60dd80071615ccad0e\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/8630c050-e6c2-e6da-4fe8-78748418a720.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F8630c050-e6c2-e6da-4fe8-78748418a720.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=f242121826ebdd602c115e5e10bd9473 1x\" loading=\"lazy\"></a></p>\n\n<ul>\n<li>\n<p>質問文,解答1のID,解答1の役に立った度(1〜4),解答2のID,解答2の役に立った度(1〜4)...</p>\n\n<ul>\n<li>質問文に対し解答候補として返却されないIDを指定すると、次のtrain.pyでエラーとなる</li>\n<li>最低49行(=ユニークな質問文49個)以上が必要らしい。足りないとやはりエラーになる</li>\n<li>その他、必要な要件が色々とある模様(<a href=\"http://www.slideshare.net/kotasuizu5/watson-61078069\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a>のp25とか、<a href=\"https://www.ibm.com/watson/developercloud/doc/retrieve-rank/training_data.shtml#data_stds\" rel=\"nofollow noopener\" target=\"_blank\">ここ</a>とか)</li>\n<li>UTF-8、LFで出力のこと</li>\n</ul>\n</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">gt.csv(イメージ)</span></div>\n<div class=\"highlight\"><pre><code><span class=\"dl\">\"</span><span class=\"s2\">こんにちは</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"dl\">\"</span><span class=\"s2\">7203</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"dl\">\"</span><span class=\"s2\">3</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"dl\">\"</span><span class=\"s2\">7654</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"dl\">\"</span><span class=\"s2\">2</span><span class=\"dl\">\"</span>\n\n</code></pre></div>\n</div>\n\n<h3>\n<span id=\"ランカーの作成\" class=\"fragment\"></span><a href=\"#%E3%83%A9%E3%83%B3%E3%82%AB%E3%83%BC%E3%81%AE%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>ランカーの作成</h3>\n\n<ul>\n<li>csvファイルを作ったら、<a href=\"http://www.ibm.com/watson/developercloud/doc/retrieve-rank/tutorial.shtml#create-train\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a>から<strong>train.py</strong>を取得し、以下実行\n\n<ul>\n<li>\n<code>**ranker_name**</code>は任意でよい</li>\n<li>Windows環境の人は、Pythonを使えるようにする必要がある</li>\n</ul>\n</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><code><span class=\"go\">python ./train.py -u \"**username**:**password**\" -i ./gt.csv -c \"**cluster_id**\" -x \"**collection_name**\" -n \"**ranker_name**\"\n</span></code></pre></div></div>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>Input file is ./gt.csv\nSolr cluster is **cluster_id**\nSolr collection is **collection_name**\nRanker name is **ranker_name**\nRows per query 10\nGenerating training data...\nGenerating training data complete.\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100  242k    0   316  100  241k    113  88936  0:00:02  0:00:02 --:--:-- 88935\n</code></pre></div></div>\n\n<ul>\n<li>ステータスが<code>Training</code>の間は使用不可。5分程度かかるので暫し待つ\n\n<ul>\n<li>\n<code>**ranker_id**</code>をメモ</li>\n</ul>\n</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"json\"><div class=\"highlight\"><pre><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"ranker_id\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"**ranker_id**\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"**ranker_name**\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"created\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"2016-11-18T19:14:20.146Z\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"url\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"https://gateway.watsonplatform.net/retrieve-and-rank/api/v1/rankers/**ranker_id**\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"status\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Training\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"status_description\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"The ranker instance is in its training phase, not yet ready to accept rank requests\"</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<ul>\n<li>ランカーの状態確認は以下。<code>Available</code>となればOK</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><code><span class=\"go\">curl -u \"**username**:**password**\" \"https://gateway.watsonplatform.net/retrieve-and-rank/api/v1/rankers/**ranker_id**\"\n</span></code></pre></div></div>\n\n<div class=\"code-frame\" data-lang=\"json\"><div class=\"highlight\"><pre><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"ranker_id\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"**ranker_id**\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"**ranker_name**\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"created\"</span><span class=\"p\">:</span><span class=\"s2\">\"2016-11-18T19:14:20.146Z\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"url\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"https://gateway.watsonplatform.net/retrieve-and-rank/api/v1/rankers/**ranker_id**\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"status\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Available\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"status_description\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"The ranker instance is now available and is ready to take ranker requests.\"</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<h3>\n<span id=\"検索ランカー有り\" class=\"fragment\"></span><a href=\"#%E6%A4%9C%E7%B4%A2%E3%83%A9%E3%83%B3%E3%82%AB%E3%83%BC%E6%9C%89%E3%82%8A\"><i class=\"fa fa-link\"></i></a>検索(ランカー有り)</h3>\n\n<ul>\n<li>fcselectで実施\n\n<ul>\n<li>APIリファレンスに記載がないが、flに<code>ranker.confidence</code>を追加すると、ランク付けの信頼度が出力される(<a href=\"http://www.ibm.com/watson/developercloud/doc/retrieve-rank/training_data.shtml#top\" rel=\"nofollow noopener\" target=\"_blank\">ここ</a>の<strong>Working with ranker confidence scores</strong>参照)</li>\n</ul>\n</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>https://**username**:**password**@gateway.watsonplatform.net/retrieve-and-rank/api/v1/solr_clusters/**cluster_id**/solr/**collection_name**/fcselect?ranker_id=**ranker_id**&amp;q=検索文&amp;wt=json&amp;fl=id,title,body,custom_field,ranker.confidence\n</code></pre></div></div>\n\n<div class=\"code-frame\" data-lang=\"json\"><div class=\"highlight\"><pre><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"responseHeader\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nl\">\"status\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"QTime\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">75</span><span class=\"w\">\n  </span><span class=\"p\">},</span><span class=\"w\">\n  </span><span class=\"nl\">\"response\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nl\">\"numFound\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">11</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"start\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"maxScore\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">10.0</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"docs\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n      </span><span class=\"p\">{</span><span class=\"w\">\n        </span><span class=\"nl\">\"id\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"7722\"</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"nl\">\"title\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"＊＊＊＊\"</span><span class=\"p\">],</span><span class=\"w\">\n        </span><span class=\"nl\">\"body\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"＊＊＊＊\"</span><span class=\"p\">],</span><span class=\"w\">\n        </span><span class=\"nl\">\"custom_field\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"＊＊＊＊\"</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"nl\">\"ranker.confidence\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">0.48287850973637736</span><span class=\"w\">\n      </span><span class=\"p\">},</span><span class=\"w\">\n      </span><span class=\"p\">{</span><span class=\"w\">\n        </span><span class=\"nl\">\"id\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"7203\"</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"nl\">\"title\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"＊＊＊＊\"</span><span class=\"p\">],</span><span class=\"w\">\n        </span><span class=\"nl\">\"body\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"＊＊＊＊\"</span><span class=\"p\">],</span><span class=\"w\">\n        </span><span class=\"nl\">\"custom_field\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"＊＊＊＊\"</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"nl\">\"ranker.confidence\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">0.3192066081818791</span><span class=\"w\">\n      </span><span class=\"p\">},</span><span class=\"w\">\n\n</span><span class=\"err\">・・・中略・・・</span><span class=\"w\">\n\n    </span><span class=\"p\">]</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<h3>\n<span id=\"結果の比較\" class=\"fragment\"></span><a href=\"#%E7%B5%90%E6%9E%9C%E3%81%AE%E6%AF%94%E8%BC%83\"><i class=\"fa fa-link\"></i></a>結果の比較</h3>\n\n<ul>\n<li><p>左がselect(=学習無?)、右がfcselect(=学習有?)</p></li>\n<li><p>\"7810\"はselectでランクの一番下だったが、fcselectでは検索に引っかからなくなった…</p></li>\n<li>\n<p>\"1908\"など、直接指定していないIDもランクが上昇</p>\n\n<ul>\n<li>\"どうもよろしくお願いします\"で\"4\"を指定しているので、その影響か?</li>\n</ul>\n</li>\n<li>\n<p>\"7963\"は、Grandtruth全体を通じて一度もボタンを押してないが順位が上昇している</p>\n\n<ul>\n<li>周りが下がっている?</li>\n<li>その他色々な質問文にボタンを押しているので、それらの影響もあるのかも</li>\n</ul>\n</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">Grandtruth(抜粋)</span></div>\n<div class=\"highlight\"><pre><code><span class=\"dl\">\"</span><span class=\"s2\">どうも</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"dl\">\"</span><span class=\"s2\">1525</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"dl\">\"</span><span class=\"s2\">2</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"dl\">\"</span><span class=\"s2\">4669</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"dl\">\"</span><span class=\"s2\">4</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"dl\">\"</span><span class=\"s2\">6137</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"dl\">\"</span><span class=\"s2\">3</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"dl\">\"</span><span class=\"s2\">7481</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"dl\">\"</span><span class=\"s2\">3</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"dl\">\"</span><span class=\"s2\">8252</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"dl\">\"</span><span class=\"s2\">4</span><span class=\"dl\">\"</span>\n<span class=\"dl\">\"</span><span class=\"s2\">どうもー</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"dl\">\"</span><span class=\"s2\">1908</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"dl\">\"</span><span class=\"s2\">2</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"dl\">\"</span><span class=\"s2\">7481</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"dl\">\"</span><span class=\"s2\">2</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"dl\">\"</span><span class=\"s2\">7810</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"dl\">\"</span><span class=\"s2\">2</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"dl\">\"</span><span class=\"s2\">8252</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"dl\">\"</span><span class=\"s2\">3</span><span class=\"dl\">\"</span>\n<span class=\"dl\">\"</span><span class=\"s2\">どうもありがとうございました</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"dl\">\"</span><span class=\"s2\">2475</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"dl\">\"</span><span class=\"s2\">4</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"dl\">\"</span><span class=\"s2\">5984</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"dl\">\"</span><span class=\"s2\">4</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"dl\">\"</span><span class=\"s2\">6220</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"dl\">\"</span><span class=\"s2\">4</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"dl\">\"</span><span class=\"s2\">6490</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"dl\">\"</span><span class=\"s2\">4</span><span class=\"dl\">\"</span>\n<span class=\"dl\">\"</span><span class=\"s2\">どうもよろしくお願いします</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"dl\">\"</span><span class=\"s2\">252</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"dl\">\"</span><span class=\"s2\">4</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"dl\">\"</span><span class=\"s2\">1439</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"dl\">\"</span><span class=\"s2\">4</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"dl\">\"</span><span class=\"s2\">1750</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"dl\">\"</span><span class=\"s2\">2</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"dl\">\"</span><span class=\"s2\">1821</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"dl\">\"</span><span class=\"s2\">2</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"dl\">\"</span><span class=\"s2\">1908</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"dl\">\"</span><span class=\"s2\">4</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"dl\">\"</span><span class=\"s2\">3731</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"dl\">\"</span><span class=\"s2\">4</span><span class=\"dl\">\"</span>\n<span class=\"dl\">\"</span><span class=\"s2\">どうもこんにちは</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"dl\">\"</span><span class=\"s2\">3627</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"dl\">\"</span><span class=\"s2\">3</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"dl\">\"</span><span class=\"s2\">7203</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"dl\">\"</span><span class=\"s2\">2</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"dl\">\"</span><span class=\"s2\">7654</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"dl\">\"</span><span class=\"s2\">2</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"dl\">\"</span><span class=\"s2\">7660</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"dl\">\"</span><span class=\"s2\">4</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"dl\">\"</span><span class=\"s2\">7722</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"dl\">\"</span><span class=\"s2\">2</span><span class=\"dl\">\"</span>\n</code></pre></div>\n</div>\n\n<p><a href=\"https://camo.qiitausercontent.com/4902f8198c13350e00f4f36edf8dd1feb07e0594/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130363235392f37306663353038342d343432352d306562332d323234392d3666653635363663346164352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"944\" alt=\"比較\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F70fc5084-4425-0eb3-2249-6fe6566c4ad5.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=bf21a66b57ae65cfbadccedb80a2563a\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/70fc5084-4425-0eb3-2249-6fe6566c4ad5.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F106259%2F70fc5084-4425-0eb3-2249-6fe6566c4ad5.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=6b195f52a69b9998aa57520678c85ba9 1x\" loading=\"lazy\"></a></p>\n\n<h2>\n<span id=\"後片付け\" class=\"fragment\"></span><a href=\"#%E5%BE%8C%E7%89%87%E4%BB%98%E3%81%91\"><i class=\"fa fa-link\"></i></a>後片付け</h2>\n\n<ul>\n<li><p><a href=\"http://www.ibm.com/developerworks/jp/bluemix/credit.html\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a>を見ると、試用期間終了後に自動で全削除される雰囲気だが、なんとなく手で消しておく</p></li>\n<li><p>ランカー削除</p></li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><code><span class=\"go\">curl -X DELETE -u \"**username**:**password**\" \"https://gateway.watsonplatform.net/retrieve-and-rank/api/v1/rankers/**ranker_id**\"\n</span></code></pre></div></div>\n\n<div class=\"code-frame\" data-lang=\"json\"><div class=\"highlight\"><pre><code><span class=\"p\">{}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<ul>\n<li>コレクション削除</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><code><span class=\"go\">curl -X POST -u \"**username**:**password**\" \"https://gateway.watsonplatform.net/retrieve-and-rank/api/v1/solr_clusters/**cluster_id**/solr/admin/collections\" -d \"action=DELETE&amp;name=**collection_name**\"\n</span></code></pre></div></div>\n\n<div class=\"code-frame\" data-lang=\"xml\"><div class=\"highlight\"><pre><code><span class=\"cp\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n<span class=\"nt\">&lt;response&gt;</span>\n  <span class=\"nt\">&lt;lst</span> <span class=\"na\">name=</span><span class=\"s\">\"responseHeader\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;int</span> <span class=\"na\">name=</span><span class=\"s\">\"status\"</span><span class=\"nt\">&gt;</span>0<span class=\"nt\">&lt;/int&gt;</span>\n    <span class=\"nt\">&lt;int</span> <span class=\"na\">name=</span><span class=\"s\">\"QTime\"</span><span class=\"nt\">&gt;</span>907<span class=\"nt\">&lt;/int&gt;</span>\n  <span class=\"nt\">&lt;/lst&gt;</span>\n  <span class=\"nt\">&lt;lst</span> <span class=\"na\">name=</span><span class=\"s\">\"success\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;lst</span> <span class=\"na\">name=</span><span class=\"s\">\"****\"</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;lst</span> <span class=\"na\">name=</span><span class=\"s\">\"responseHeader\"</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;int</span> <span class=\"na\">name=</span><span class=\"s\">\"status\"</span><span class=\"nt\">&gt;</span>0<span class=\"nt\">&lt;/int&gt;</span>\n        <span class=\"nt\">&lt;int</span> <span class=\"na\">name=</span><span class=\"s\">\"QTime\"</span><span class=\"nt\">&gt;</span>95<span class=\"nt\">&lt;/int&gt;</span>\n      <span class=\"nt\">&lt;/lst&gt;</span>\n    <span class=\"nt\">&lt;/lst&gt;</span>\n    <span class=\"nt\">&lt;lst</span> <span class=\"na\">name=</span><span class=\"s\">\"****\"</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;lst</span> <span class=\"na\">name=</span><span class=\"s\">\"responseHeader\"</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;int</span> <span class=\"na\">name=</span><span class=\"s\">\"status\"</span><span class=\"nt\">&gt;</span>0<span class=\"nt\">&lt;/int&gt;</span>\n        <span class=\"nt\">&lt;int</span> <span class=\"na\">name=</span><span class=\"s\">\"QTime\"</span><span class=\"nt\">&gt;</span>119<span class=\"nt\">&lt;/int&gt;</span>\n      <span class=\"nt\">&lt;/lst&gt;</span>\n    <span class=\"nt\">&lt;/lst&gt;</span>\n  <span class=\"nt\">&lt;/lst&gt;</span>\n<span class=\"nt\">&lt;/response&gt;</span>\n</code></pre></div></div>\n\n<ul>\n<li>コンフィグ削除</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><code><span class=\"go\">curl -X DELETE -u \"**username**:**password**\" \"https://gateway.watsonplatform.net/retrieve-and-rank/api/v1/solr_clusters/**cluster_id**/config/**config_name**\"\n</span></code></pre></div></div>\n\n<div class=\"code-frame\" data-lang=\"json\"><div class=\"highlight\"><pre><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"message\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"WRRCSR025: Successfully deleted named config [**config_name**] for Solr cluster [**cluster_id**].\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"statusCode\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">200</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<ul>\n<li>クラスタ削除</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><code><span class=\"go\">curl -X DELETE -u \"**username**:**password**\" \"https://gateway.watsonplatform.net/retrieve-and-rank/api/v1/solr_clusters/**cluster_id**\"\n</span></code></pre></div></div>\n\n<div class=\"code-frame\" data-lang=\"json\"><div class=\"highlight\"><pre><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"message\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"WRRCSR023: Successfully deleted Solr cluster [**cluster_id**].\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"statusCode\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">200</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<ul>\n<li>\n<a href=\"https://console.ng.bluemix.net/dashboard/applications\" rel=\"nofollow noopener\" target=\"_blank\">アプリ</a>、<a href=\"https://console.ng.bluemix.net/dashboard/services\" rel=\"nofollow noopener\" target=\"_blank\">サービス</a>から、作成したアプリケーション、サービスを削除</li>\n</ul>\n",
      "body": "#はじめに\n\nとあるハッカソンに参加した折、使う機会がありましたので、その時したことの備忘録となります。\n最後までやると、学習済(?)の検索APIをWebから叩けるようになります。\n\n(私のような)Bluemixも機械学習も触ったことがない、でもなんとなく試してみたい…という方でもなるべく苦しまないように、ファイルやコマンドの情報を色々と補完しました。\n間違い・勘違い等ありましたらご指摘頂ければ幸いです。\n\n[追記]\nハッカソンの後に、Retrieve and RankとNatural Language Classifierを用いてレストラン検索アプリを作成しました。\n辞書や学習の詳細についても記載しましたので、[よろしければご覧ください。](http://qiita.com/takaha4/items/d14d643db28bc63c7b3f)\n\n#参考資料\n\n本記事は、以下を始めとする各種資料を見ながら作業した結果のまとめになります。\n先に記事を書かれていた方々のお陰で、ハッカソン当日はなんとか完成にこぎつけました。\nありがとうございました(感謝)。\n\n- 概要\n\n    - [Watson API トレーニング 20160716 rev02](http://www.slideshare.net/komine/watson-api-20160716-rev02)\n        - p54くらいからRetrieve and Rankの話ですが、時間があれば最初から読んだ方がよいと思います\n\n- Retrieve and Rank\n\n    - [Tutorial](https://www.ibm.com/watson/developercloud/doc/retrieve-rank/tutorial.shtml)\n\n        - 英語ですが、詳細な手順&各種サンプルファイルがあります\n\n    - [BluemixのRetrieve&Rankによる質問応答システムを試してみた](http://qiita.com/VegaSato/items/6d2d03d6a8b42adcf87e)\n\n    - [Retrieve and Rank サービスの使用方法](https://www.ibm.com/developerworks/community/wikis/home?lang=en#!/wiki/%E3%81%93%E3%81%BF%E3%81%AD%E3%81%AE%E6%8A%80%E8%A1%93%E3%83%A1%E3%83%A2/page/Retrieve%20and%20Rank%20%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%AE%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95)\n\n    - [APIリファレンス(Retrieve and Rank)](http://www.ibm.com/watson/developercloud/retrieve-and-rank/api/v1/)\n\n        - まずこちらを読んで、見つからなかったら↓を探すのがよいと思います\n\n    - [リファレンス(Apache Solr)](https://cwiki.apache.org/confluence/display/solr/Apache+Solr+Reference+Guide)\n\n- Node-RED\n    \n    - [コードをほとんど書かずにNode-REDでWebアプリを作ろう](http://ascii.jp/elem/000/001/139/1139255/)\n\n    - [Bluemix Node-REDを使ってWatson APIを呼び出す](http://qiita.com/VegaSato/items/7ce47e6a9c06c290b212)\n\n\n#手順\n\n##前提\n\n- 筆者はMacbookにて作業を実施\n\n- ブラウザはChrome、HTMLからのテストに[Brackets](http://brackets.io/)、その他テキストエディタとして[CotEditor](https://coteditor.com/)を使用\n\n- Windowsでも[curlコマンドを使えるようにすれば](https://www.google.co.jp/webhp?sourceid=chrome-instant&ion=1&espv=2&ie=UTF-8#q=windows%20curl)多分OK\n\n##アカウント、サービス作成\n\n- [IBM Watson Developer Cloud](https://www.ibm.com/marketplace/cloud/cognitive-application-development/jp/ja-jp)にて、**無料評価版(30日間)**のアカウントを作成\n\n- [サービス](https://console.ng.bluemix.net/dashboard/services)から、**サービスの作成 > Retrieve and Rank > 作成**\n    - 料金の話が書いてあってびびるが、30日間は大丈夫(のはず)\n\n- [サービス](https://console.ng.bluemix.net/dashboard/services)から、**Retrieve and Rank > サービス資格情報 > 資格情報の表示**で表示される情報をコピー\n    - 以降、curlコマンドの-uオプションに、```**username**:**password**```の形で設定する\n\n```json\n{\n  \"url\": \"https://gateway.watsonplatform.net/retrieve-and-rank/api\",\n  \"password\": \"**password**\",\n  \"username\": \"**username**\"\n}\n```\n\n##クラスタ作成\n\n- ターミナル(ないしコマンドプロンプト)を起動。curlを実行していく\n\n- クラスタを作成\n    - ```**cluster_id**```をコピー\n\n```shell-session\ncurl -k -X POST -u \"**username:**password**\" \"https://gateway.watsonplatform.net/retrieve-and-rank/api/v1/solr_clusters\" -d \"\"\n```\n\n```json\n{\n  \"solr_cluster_id\": \"**cluster_id**\",\n  \"cluster_name\": \"\",\n  \"cluster_size\": \"\",\n  \"solr_cluster_status\": \"NOT_AVAILABLE\"\n}\n```\n\n- 以下でクラスタのステータスが確認できる。ステータスに```READY```が返るまで待つ\n\n```shell-session\ncurl -u \"**username**:**password**\" \"https://gateway.watsonplatform.net/retrieve-and-rank/api/v1/solr_clusters\"\n```\n\n```json\n{\"clusters\": [{\n  \"solr_cluster_id\": \"**cluster_id**\",\n  \"cluster_name\": \"\",\n  \"cluster_size\": \"\",\n  \"solr_cluster_status\": \"READY\"\n}]}\n```\n\n##設定ファイル用意・インポート\n\n- クラスタを作っている間に、コレクション用設定ファイルを用意\n    - [こちら](https://www.ibm.com/developerworks/community/wikis/home?lang=en#!/wiki/%E3%81%93%E3%81%BF%E3%81%AD%E3%81%AE%E6%8A%80%E8%A1%93%E3%83%A1%E3%83%A2/page/Retrieve%20and%20Rank%20%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%AE%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95)の方が日本語用設定ファイルを公開していたので、ありがたくお借りする(**Attachment > Solr_Japanese_20160108.zip**)\n\n- 設定ファイルを解凍後、schema.xmlファイルを確認\n    - デフォルトであれば、ドキュメント作成時に```id```、```title```、```body```を定義することになる。ハッカソンでは、フィールドの名前を変えたり、他に保持したい情報があったためフィールドの追加をおこなった\n    - 設定ファイルを変更後、再圧縮する時は、解凍先ディレクトリを圧縮しない(=解凍先ディレクトリ直下の内容を選択して圧縮する)こと。インポート時にエラーとなる\n\n```xml:schema.xml(抜粋)\n   <field name=\"id\" type=\"string\" indexed=\"true\" stored=\"true\" required=\"true\" multiValued=\"false\" /> \n   <field name=\"title\" type=\"watson_text_ja\" indexed=\"true\" stored=\"true\" required=\"false\" multiValued=\"true\" />\n   <field name=\"body\" type=\"watson_text_ja\" indexed=\"true\" stored=\"true\" required=\"false\" multiValued=\"true\" />\n\n   <!-- make a copy field using normal OOB solr text_en -->\n   <field name=\"text\" type=\"text_ja\" indexed=\"true\" stored=\"false\" required=\"false\" multiValued=\"true\" />\n   <!-- make a copy field using watson_text_ja -->\n   <field name=\"watson_text\" type=\"watson_text_ja\" indexed=\"true\" stored=\"false\" required=\"false\" multiValued=\"true\" />\n   \n   <copyField source=\"title\" dest=\"text\"/>\n   <copyField source=\"body\" dest=\"text\"/>\n   \n   <copyField source=\"title\" dest=\"watson_text\"/>\n   <copyField source=\"body\" dest=\"watson_text\"/>\n```\n\n```xml:schema.xml(フィールド追加)\n   <!-- Watsonによる解析が不要であれば、以下のように定義すればよい模様 -->\n   <field name=\"custom_field\" type=\"string\" indexed=\"true\" stored=\"true\" required=\"false\" multiValued=\"false\" />\n```\n\n- 設定ファイルをインポート\n    - ```**cluster_id**```に先ほど取得したクラスタID、```**config_name**```に任意の名前(英数字)、```**config_path**```に設定ファイル(zip)へのパスを設定\n\n```shell-session\ncurl -k -X POST -H \"Content-Type: application/zip\" -u \"**username**:**password**\" \"https://gateway.watsonplatform.net/retrieve-and-rank/api/v1/solr_clusters/**cluster_id**/config/**config_name**\" --data-binary @**config_path**\n```\n\n```json\n{\n  \"message\": \"WRRCSR026: Successfully uploaded named config [**config_name**] for Solr cluster [**cluster_id**].\",\n  \"statusCode\": 200\n}\n```\n\n##コレクション作成\n\n- 以下を実行しコレクションを作成\n    - ```**collection_name**```に任意の名前(英数字)、```**config_name**```に先ほどインポートした設定ファイルの名前を設定\n    - ```success```などと書かれたXMLが返ってくればOK\n\n```shell-session\ncurl -k -X POST -u \"**username**:**password**\" \"https://gateway.watsonplatform.net/retrieve-and-rank/api/v1/solr_clusters/**cluster_id**/solr/admin/collections\" -d \"action=CREATE&name=**collection_name**&collection.configName=**config_name**\"\n```\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  <response>\n    <lst name=\"responseHeader\">\n      <int name=\"status\">0</int>\n      <int name=\"QTime\">11214</int>\n    </lst>\n    <lst name=\"success\">\n      <lst name=\"****\">\n        <lst name=\"responseHeader\">\n          <int name=\"status\">0</int>\n          <int name=\"QTime\">2468</int>\n        </lst>\n        <str name=\"core\">****</str>\n      </lst>\n      <lst name=\"****\">\n        <lst name=\"responseHeader\">\n          <int name=\"status\">0</int>\n          <int name=\"QTime\">2915</int>\n        </lst>\n      <str name=\"core\">****</str>\n    </lst>\n  </lst>\n</response>\n```\n\n##ドキュメント準備\n- 投入するドキュメント情報を用意\n    - ハッカソンでは、チームの方に簡易クローラ(とあるサイトのHTMLから投入データを抽出)を作ってもらい救われた。8000件ほどのレコードを登録した\n    - 未確認だが[Document Conversion](http://www.ibm.com/smarterplanet/jp/ja/ibmwatson/developercloud/document-conversion.html)を使ってもよさそう\n\n##ドキュメント作成\n\n- 設定ファイルで定義したフィールドに合わせて、以下のようなJSONファイルを作成\n    - [ここ](https://cwiki.apache.org/confluence/display/solr/Uploading+Data+with+Index+Handlers#UploadingDatawithIndexHandlers-JSONFormattedIndexUpdates)を見ると記法は色々あるらしい(これはJSONとして問題ないんでしょうか…?)\n    - 文字コードはUTF-8、改行はLFのみ\n    - ハッカソンでは、ここで```commit```が必要なことに気づけず数時間をフイにした(反省)\n\n```json:documents.json\n{\n  \"add\": {\n    \"doc\": {\n      \"id\": \"1\",\n      \"title\": \"＊＊＊＊\",\n      \"body\": \"＊＊＊＊\",\n      \"custom_field\": \"＊＊＊＊\"\n    }\n  },\n  \"add\": {\n    \"doc\": {\n      \"id\": \"2\",\n      \"title\": \"＊＊＊＊\",\n      \"body\": \"＊＊＊＊\",\n      \"custom_field\": \"＊＊＊＊\"\n    }\n  },\n\n・・・中略・・・\n\n  \"commit\": { }\n}\n```\n\n##ドキュメント投入\n\n- 以下実行でコレクションにドキュメントを投入\n    - ```**cluster_id**```、```**config_name**```は適宜置換、```**document_path**```に先ほど作成したjsonファイルへのパスを設定\n\n```shell-session\ncurl -k -X POST -H \"Content-Type: application/json\" -u \"**username**:**password**\" \"https://gateway.watsonplatform.net/retrieve-and-rank/api/v1/solr_clusters/**cluster_id**/solr/**collection_name**/update\" --data-binary @**document_path**\n```\n\n```json\n{\n  \"responseHeader\": {\n    \"status\": 0,\n    \"QTime\": 495\n  }\n}\n```\n\n##検索(ランカー無し)\n- ブラウザのアドレスバーに以下を入力\n    - ```**xxxx**```の箇所は今までに倣って適宜変更。検索文は任意に設定\n    - 検索文に応じてドキュメントが返ってくればOK\n    - id検索がしたい場合は、q=id:1などとする\n\n```\nhttps://**username**:**password**@gateway.watsonplatform.net/retrieve-and-rank/api/v1/solr_clusters/**cluster_id**/solr/**collection_name**/select?q=検索文&wt=json&fl=id,title,body,custom_field\n```\n\n```json\n{\n  \"responseHeader\": {\n    \"status\": 0,\n    \"QTime\": 1,\n    \"params\":{\n      \"q\": \"検索文\",\n      \"fl\": \"id,title,body,custom_field\",\n      \"wt\":\"json\"\n    }\n  },\n  \"response\": {\n    \"numFound\": 58,\n    \"start\": 0,\n    \"docs\": [\n      {\n        \"id\": \"1\",\n        \"title\": [\"＊＊＊＊\"],\n        \"body\": [\"＊＊＊＊\"],\n        \"custom_field\": \"＊＊＊＊\"\n      },\n\n・・・中略・・・\n\n    ]\n  }\n}\n```\n\n##アプリケーション作成\n\n- Retrieve and RankをWebから呼び出すには、Node-REDアプリケーションを経由する必要がある\n    - ハッカソンではこれに気づけず1時間ほどフイにした(反省)\n\n- [アプリ](https://console.ng.bluemix.net/dashboard/applications)から**アプリケーションの作成 > Node-RED Starter > 作成**\n    - 入力項目は任意、デフォルトでよいが、ホスト名についてはAPIのURLに用いられる\n\n- [アプリ](https://console.ng.bluemix.net/dashboard/applications)から**アプリ名 > ランタイム > 環境変数 > ユーザー定義 > 追加 > 保存**でユーザー名、パスワードを設定\n    - [アプリ](https://console.ng.bluemix.net/dashboard/applications)にて**再始動**(円弧型の矢印のボタン)を押しておく\n\n名前|値\n---|---\nNODE_RED_USERNAME|任意\nNODE_RED_PASSWORD|任意\n\n##アプリケーション編集\n\n- [アプリ](https://console.ng.bluemix.net/dashboard/applications)で**アプリ名 > 経路**に表示されているURLにアクセスすると、Node-REDのトップ画面が表示される\n\n- **Go to your Node-RED flow editor**をクリックすると認証画面が出るので、先ほど設定したユーザー名、パスワードを入力\n\n- 表示されたエディタ画面にて、以下要領でノードを作成、接続\n\n<img width=\"533\" alt=\"接続イメージ\" src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/d95d3010-8c13-268a-042c-2ca84531a99d.png\">\n\n###http(input)\n\n- 画面左より**input > http**。エディタ中央にドロップ\n\n- URLに指定した値が、APIのURLのパスに使用される\n\n名前|値\n---|---\nMethod|POST\nURL|/```**path**```\nName|任意\n\n###function(リクエスト生成)\n\n- 画面左より**function > function**\n\n- Webより呼び出す際に検索文を設定するパラメーターを```msg.payload```の```q```で指定する\n\n- 色々とエスケープしているのは[こちら](http://d.hatena.ne.jp/miau/20140705/1404564644)を参考に。substringはなんとなく実施\n\n```javascript:Function\nvar query;\ntry {\n    query = msg.payload.q.substring(0, 1000);\n} catch(e) {\n    query = \"\";\n}\nquery = query.replace(\n    /[\\\\\\+\\-\\&\\|\\!\\(\\)\\{\\}\\[\\]\\^\\\"\\~\\*\\?\\:\\/\\r\\n\\t\\u0020\\u3000]|AND|OR|NOT/g, \n    function(c) { return \"\\\\\" + c; });\nmsg.headers = {\n    \"content-type\": \"application/x-www-form-urlencoded\"\n};\nmsg.payload = {\n    \"wt\": \"json\",\n    \"fl\": \"id,title,body,custom_field\",\n    \"q\": query\n};\nreturn msg;\n```\n\n###http request\n\n- 画面左より**function > http request**\n\n名前|値\n---|---\nMethod|POST\nURL|```https://gateway.watsonplatform.net/retrieve-and-rank/api/v1/solr_clusters/**cluster_id**/solr/**collection_name**/select```\nEnable secure (SSL/TLS) connection| チェック無\nUse basic authentication|チェック有\nUsername|```**username**```\nPassword|```**password**```\nReturn|a UTF-8 string\nName|任意\n\n###function(ヘッダ設定)\n\n- 画面左より**function > function**\n\n- CORS対応のため\n\n```javascript:Function\nmsg.headers = {\n  \"Access-Control-Allow-Origin\": \"*\"\n}\nreturn msg;\n```\n\n###json、http(output)\n\n- 画面左より**function > json**、**output > http response**\n\n##アプリケーション反映\n\n- 画面右上の**Deploy**を押すと反映\n    - エラーがあると、画面右の**debug**タブに表示される\n\n##WebからAPI呼び出し\n\n- jQuery等を使ってAPI呼び出し、結果取得\n\n```html:test.html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Retrieve and Rank</title>\n    <script type=\"text/javascript\" src=\"https://code.jquery.com/jquery-3.1.1.min.js\"></script>\n  </head>\n  <body>\n    <input id=\"query\" type=\"text\">\n    <input id=\"test\" type=\"button\" value=\"Test\">\n    <div id=\"result\"></div>\n  </body>\n  <script type=\"text/javascript\">        \n    $(\"#test\").click(function(){\n      $(\"#result\").empty();\n\n      $.ajax({\n        type: \"POST\",\n        url: \"http://**ホスト名**.mybluemix.net/**path**\",\n        dataType: \"json\",\n        data: {\n            q: $(\"#query\").val()\n        }\n      }).done(function(data){\n        var doc = \"\";\n        var docs = data.response.docs;\n        if (docs.length > 0) {\n            doc = JSON.stringify(docs[0]);\n        } else {\n            doc = \"結果が見つかりませんでした。\";\n        }\n        $(\"#result\").text(doc);\n      }).fail(function(error){\n          console.log(error);\n      });\n    });\n  </script>\n</html>\n```\n\n##学習\n\n- ハッカソンでは時間が足らず泣く泣く諦めた、ランカーを用いた検索について挑戦した\n\n###Grandtruthの作成\n\n- 質問に対してどの解答が適切であったか解答してGrandtruthを生成するツールを作り、ランカーを作成\n    - **質問文入力&解答候補表示→適切と思われるドキュメントのボタンを押す→質問文入力…→Groundtruth取得**でCSVファイル作成\n\n```html:test2.html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Groundtruth</title>\n    <script type=\"text/javascript\" src=\"https://code.jquery.com/jquery-3.1.1.min.js\"></script>\n    <style type=\"text/css\">\n      body {\n        font-size: small;\n      }\n      #query {\n        width: 95%;\n      }\n      #header {\n        position: fixed;\n        top: 0;\n        left: 0;\n        right: 0;\n        padding: 0.2em;\n        background-color: gray;\n      }\n      .doc {\n        border: 1px solid gray;\n        border-radius: 0.2em;\n        margin: 0.2em;\n        padding: 0.2em;\n      }\n      #result {\n        margin-top: 4em;\n      }\n    </style>\n  </head>\n  <body>\n    <div id=\"header\">\n      <input id=\"query\" type=\"text\" placeholder=\"質問文\"><br>\n      <input id=\"send\" type=\"button\" value=\"候補表示\">\n      <input id=\"getgt\" type=\"button\" value=\"Groundtruth取得\">\n      <a id=\"downloadlink\" target=\"_blank\" href=\"#\"></a>\n    </div>\n    <div id=\"result\"></div>\n  </body>\n  <script type=\"text/javascript\">\n    var MAX_USEFUL=4;\n    var groundtruth={};\n    \n    $(\"#send\").click(function(){\n      var $result=$(\"#result\");\n      $result.empty();\n      \n      var $query=$(\"#query\");      \n      $.ajax({\n        type: \"POST\",\n        url: \"http://**ホスト名**.mybluemix.net/**path**\",\n        dataType: \"json\",\n        data: {\n          q: $query.val()\n        }\n      }).done(function(data){\n        var docs = data.response.docs;\n        if (docs.length > 0) {\n          docs.forEach(function(doc){\n            var $doc=$(\"<div>\").addClass(\"doc\").data({ \n              \"query\": data.responseHeader.params.q,\n              \"doc\": doc \n            });\n            \n            $doc.append($(\"<input>\").attr({\n              \"id\": \"useful\",\n              \"type\": \"button\",\n              \"value\": doc.id,\n            }).click(function(){ clickUseful($doc); }));\n            \n            $doc.append($(\"<span>\").addClass(\"counter\"));\n            $doc.append($(\"<div>\").text(doc.body));            \n            \n            $result.append($doc);\n          });\n        } else {\n          $result.text(\"結果が見つかりませんでした。\");\n        }\n      }).fail(function(error){\n          console.log(error);\n      });      \n    });\n    \n    $(\"#getgt\").click(function(){\n      var rows=[];\n      $.each(groundtruth,function(query, idList){\n        var row=[];\n        row.push(query);\n        $.each(idList,function(id, count){\n          row.push(id);\n          row.push(count);\n        });\n        rows.push(row.map(function(value){ return escapeCSV(String(value)) }).join(\",\"));\n      });\n      rows.push(\"\");\n\n      var blob = new Blob([rows.join(\"\\n\")], { \"type\": \"text/plain\" });\n      var $downloadlink=$(\"#downloadlink\");\n      $downloadlink.attr(\"href\", window.URL.createObjectURL(blob));\n      $downloadlink.attr(\"download\", \"gt_\" + createTimeString() + \".csv\");\n      $downloadlink[0].click();\n    });\n    \n    function clickUseful($doc) {\n      var query=$doc.data(\"query\");\n      var id=$doc.data(\"doc\").id;\n      if (groundtruth[query] === undefined) {\n        groundtruth[query]={};\n      }\n      \n      var count=(groundtruth[query][id] === undefined ? 0 : groundtruth[query][id]);\n      count=Math.min(count + 1, MAX_USEFUL);\n      groundtruth[query][id]=count;\n\n      $doc.find(\".counter\").text(count);\n      if (count >= MAX_USEFUL) {\n        $doc.find(\"#useful\").prop(\"disabled\", true);        \n      }      \n    }\n    \n    function escapeCSV(value) {\n      return \"\\\"\" + value.replace(/\\\"/, \"\\\"\\\"\") + \"\\\"\";\n    }\n    function createTimeString() {\n      function padZero(num) {\n          var result;\n          if (num < 10) {\n              result = \"0\" + num;\n          } else {\n              result = \"\" + num;\n          }\n          return result;\n      }\n      var now = new Date();\n      var res = \"\" + now.getFullYear() + padZero(now.getMonth() + 1) + \n          padZero(now.getDate()) + padZero(now.getHours()) + \n          padZero(now.getMinutes()) + padZero(now.getSeconds());\n      return res;\n    }\n  </script>\n</html>\n```\n\n<img width=\"588\" alt=\"ツール\" src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/8630c050-e6c2-e6da-4fe8-78748418a720.png\">\n\n- 質問文,解答1のID,解答1の役に立った度(1〜4),解答2のID,解答2の役に立った度(1〜4)...\n    - 質問文に対し解答候補として返却されないIDを指定すると、次のtrain.pyでエラーとなる\n\n    - 最低49行(=ユニークな質問文49個)以上が必要らしい。足りないとやはりエラーになる\n\n    - その他、必要な要件が色々とある模様([こちら](http://www.slideshare.net/kotasuizu5/watson-61078069)のp25とか、[ここ](https://www.ibm.com/watson/developercloud/doc/retrieve-rank/training_data.shtml#data_stds)とか)\n\n    - UTF-8、LFで出力のこと\n\n```javascript:gt.csv(イメージ)\n\"こんにちは\",\"7203\",\"3\",\"7654\",\"2\"\n\n```\n\n###ランカーの作成\n\n- csvファイルを作ったら、[こちら](http://www.ibm.com/watson/developercloud/doc/retrieve-rank/tutorial.shtml#create-train)から**train.py**を取得し、以下実行\n    - ```**ranker_name**```は任意でよい\n    - Windows環境の人は、Pythonを使えるようにする必要がある\n\n```shell-session\npython ./train.py -u \"**username**:**password**\" -i ./gt.csv -c \"**cluster_id**\" -x \"**collection_name**\" -n \"**ranker_name**\"\n```\n\n```text\nInput file is ./gt.csv\nSolr cluster is **cluster_id**\nSolr collection is **collection_name**\nRanker name is **ranker_name**\nRows per query 10\nGenerating training data...\nGenerating training data complete.\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100  242k    0   316  100  241k    113  88936  0:00:02  0:00:02 --:--:-- 88935\n```\n\n- ステータスが```Training```の間は使用不可。5分程度かかるので暫し待つ\n    - ```**ranker_id**```をメモ\n\n```json\n{\n  \"ranker_id\": \"**ranker_id**\",\n  \"name\": \"**ranker_name**\",\n  \"created\": \"2016-11-18T19:14:20.146Z\",\n  \"url\": \"https://gateway.watsonplatform.net/retrieve-and-rank/api/v1/rankers/**ranker_id**\",\n  \"status\": \"Training\",\n  \"status_description\": \"The ranker instance is in its training phase, not yet ready to accept rank requests\"\n}\n```\n\n- ランカーの状態確認は以下。```Available```となればOK\n\n```shell-session\ncurl -u \"**username**:**password**\" \"https://gateway.watsonplatform.net/retrieve-and-rank/api/v1/rankers/**ranker_id**\"\n```\n\n```json\n{\n  \"ranker_id\": \"**ranker_id**\",\n  \"name\": \"**ranker_name**\",\n  \"created\":\"2016-11-18T19:14:20.146Z\",\n  \"url\": \"https://gateway.watsonplatform.net/retrieve-and-rank/api/v1/rankers/**ranker_id**\",\n  \"status\": \"Available\",\n  \"status_description\": \"The ranker instance is now available and is ready to take ranker requests.\"\n}\n```\n\n###検索(ランカー有り)\n\n- fcselectで実施\n    - APIリファレンスに記載がないが、flに```ranker.confidence```を追加すると、ランク付けの信頼度が出力される([ここ](http://www.ibm.com/watson/developercloud/doc/retrieve-rank/training_data.shtml#top)の**Working with ranker confidence scores**参照)\n\n```\nhttps://**username**:**password**@gateway.watsonplatform.net/retrieve-and-rank/api/v1/solr_clusters/**cluster_id**/solr/**collection_name**/fcselect?ranker_id=**ranker_id**&q=検索文&wt=json&fl=id,title,body,custom_field,ranker.confidence\n```\n\n```json\n{\n  \"responseHeader\": {\n    \"status\": 0,\n    \"QTime\": 75\n  },\n  \"response\": {\n    \"numFound\": 11,\n    \"start\": 0,\n    \"maxScore\": 10.0,\n    \"docs\": [\n      {\n        \"id\": \"7722\",\n        \"title\": [\"＊＊＊＊\"],\n        \"body\": [\"＊＊＊＊\"],\n        \"custom_field\": \"＊＊＊＊\",\n        \"ranker.confidence\": 0.48287850973637736\n      },\n      {\n        \"id\": \"7203\",\n        \"title\": [\"＊＊＊＊\"],\n        \"body\": [\"＊＊＊＊\"],\n        \"custom_field\": \"＊＊＊＊\",\n        \"ranker.confidence\": 0.3192066081818791\n      },\n\n・・・中略・・・\n\n    ]\n  }\n}\n```\n\n###結果の比較\n\n- 左がselect(=学習無?)、右がfcselect(=学習有?)\n\n- \"7810\"はselectでランクの一番下だったが、fcselectでは検索に引っかからなくなった…\n\n- \"1908\"など、直接指定していないIDもランクが上昇\n    - \"どうもよろしくお願いします\"で\"4\"を指定しているので、その影響か?\n\n- \"7963\"は、Grandtruth全体を通じて一度もボタンを押してないが順位が上昇している\n    - 周りが下がっている?\n    - その他色々な質問文にボタンを押しているので、それらの影響もあるのかも\n\n```javascript:Grandtruth(抜粋)\n\"どうも\",\"1525\",\"2\",\"4669\",\"4\",\"6137\",\"3\",\"7481\",\"3\",\"8252\",\"4\"\n\"どうもー\",\"1908\",\"2\",\"7481\",\"2\",\"7810\",\"2\",\"8252\",\"3\"\n\"どうもありがとうございました\",\"2475\",\"4\",\"5984\",\"4\",\"6220\",\"4\",\"6490\",\"4\"\n\"どうもよろしくお願いします\",\"252\",\"4\",\"1439\",\"4\",\"1750\",\"2\",\"1821\",\"2\",\"1908\",\"4\",\"3731\",\"4\"\n\"どうもこんにちは\",\"3627\",\"3\",\"7203\",\"2\",\"7654\",\"2\",\"7660\",\"4\",\"7722\",\"2\"\n```\n\n<img width=\"944\" alt=\"比較\" src=\"https://qiita-image-store.s3.amazonaws.com/0/106259/70fc5084-4425-0eb3-2249-6fe6566c4ad5.png\">\n\n##後片付け\n\n- [こちら](http://www.ibm.com/developerworks/jp/bluemix/credit.html)を見ると、試用期間終了後に自動で全削除される雰囲気だが、なんとなく手で消しておく\n\n- ランカー削除\n\n```shell-session\ncurl -X DELETE -u \"**username**:**password**\" \"https://gateway.watsonplatform.net/retrieve-and-rank/api/v1/rankers/**ranker_id**\"\n```\n\n```json\n{}\n```\n\n- コレクション削除\n\n```shell-session\ncurl -X POST -u \"**username**:**password**\" \"https://gateway.watsonplatform.net/retrieve-and-rank/api/v1/solr_clusters/**cluster_id**/solr/admin/collections\" -d \"action=DELETE&name=**collection_name**\"\n```\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<response>\n  <lst name=\"responseHeader\">\n    <int name=\"status\">0</int>\n    <int name=\"QTime\">907</int>\n  </lst>\n  <lst name=\"success\">\n    <lst name=\"****\">\n      <lst name=\"responseHeader\">\n        <int name=\"status\">0</int>\n        <int name=\"QTime\">95</int>\n      </lst>\n    </lst>\n    <lst name=\"****\">\n      <lst name=\"responseHeader\">\n        <int name=\"status\">0</int>\n        <int name=\"QTime\">119</int>\n      </lst>\n    </lst>\n  </lst>\n</response>\n```\n\n- コンフィグ削除\n\n```shell-session\ncurl -X DELETE -u \"**username**:**password**\" \"https://gateway.watsonplatform.net/retrieve-and-rank/api/v1/solr_clusters/**cluster_id**/config/**config_name**\"\n```\n\n```json\n{\n  \"message\": \"WRRCSR025: Successfully deleted named config [**config_name**] for Solr cluster [**cluster_id**].\",\n  \"statusCode\": 200\n}\n```\n\n- クラスタ削除\n\n```shell-session\ncurl -X DELETE -u \"**username**:**password**\" \"https://gateway.watsonplatform.net/retrieve-and-rank/api/v1/solr_clusters/**cluster_id**\"\n```\n\n```json\n{\n  \"message\": \"WRRCSR023: Successfully deleted Solr cluster [**cluster_id**].\",\n  \"statusCode\": 200\n}\n```\n\n- [アプリ](https://console.ng.bluemix.net/dashboard/applications)、[サービス](https://console.ng.bluemix.net/dashboard/services)から、作成したアプリケーション、サービスを削除\n",
      "coediting": false,
      "comments_count": 0,
      "created_at": "2016-11-20T19:23:24+09:00",
      "group": null,
      "id": "0a1dcad29162f02b3908",
      "likes_count": 8,
      "private": false,
      "reactions_count": 0,
      "stocks_count": 12,
      "tags": [
        {
          "name": "Solr",
          "versions": []
        },
        {
          "name": "Bluemix",
          "versions": []
        },
        {
          "name": "Watson",
          "versions": []
        },
        {
          "name": "node-red",
          "versions": []
        }
      ],
      "title": "Watson Retrieve and RankをWebから使う",
      "updated_at": "2017-05-18T23:31:19+09:00",
      "url": "https://qiita.com/yktakaha4/items/0a1dcad29162f02b3908",
      "user": {
        "description": "",
        "facebook_id": "",
        "followees_count": 26,
        "followers_count": 23,
        "github_login_name": "yktakaha4",
        "id": "yktakaha4",
        "items_count": 27,
        "linkedin_id": "",
        "location": "",
        "name": "Yuuki Takahashi",
        "organization": "LAPRAS株式会社",
        "permanent_id": 106259,
        "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/106259/profile-images/1600489516",
        "team_only": false,
        "twitter_screen_name": "yktakaha4",
        "website_url": "https://yktakaha4.github.io/"
      },
      "page_views_count": null,
      "team_membership": null,
      "organization_url_name": null,
      "slide": false
    }
  ]
}
